%%
%% remote_protocol_xdr was generated by erpcgen (do not edit)
%% date: Apr 19 07:33:21 2021
%%
-module(remote_protocol_xdr).
-export([enc_remote_nonnull_string/1, dec_remote_nonnull_string/2]).
-export([enc_remote_string/1, dec_remote_string/2]).
-export([enc_remote_uuid/1, dec_remote_uuid/2]).
-export([enc_remote_nonnull_domain/1, dec_remote_nonnull_domain/2]).
-export([enc_remote_nonnull_network/1, dec_remote_nonnull_network/2]).
-export([enc_remote_nonnull_network_port/1, dec_remote_nonnull_network_port/2]).
-export([enc_remote_nonnull_nwfilter/1, dec_remote_nonnull_nwfilter/2]).
-export([enc_remote_nonnull_nwfilter_binding/1, dec_remote_nonnull_nwfilter_binding/2]).
-export([enc_remote_nonnull_interface/1, dec_remote_nonnull_interface/2]).
-export([enc_remote_nonnull_storage_pool/1, dec_remote_nonnull_storage_pool/2]).
-export([enc_remote_nonnull_storage_vol/1, dec_remote_nonnull_storage_vol/2]).
-export([enc_remote_nonnull_node_device/1, dec_remote_nonnull_node_device/2]).
-export([enc_remote_nonnull_secret/1, dec_remote_nonnull_secret/2]).
-export([enc_remote_nonnull_domain_checkpoint/1, dec_remote_nonnull_domain_checkpoint/2]).
-export([enc_remote_nonnull_domain_snapshot/1, dec_remote_nonnull_domain_snapshot/2]).
-export([enc_remote_domain/1, dec_remote_domain/2]).
-export([enc_remote_network/1, dec_remote_network/2]).
-export([enc_remote_network_port/1, dec_remote_network_port/2]).
-export([enc_remote_nwfilter/1, dec_remote_nwfilter/2]).
-export([enc_remote_nwfilter_binding/1, dec_remote_nwfilter_binding/2]).
-export([enc_remote_storage_pool/1, dec_remote_storage_pool/2]).
-export([enc_remote_storage_vol/1, dec_remote_storage_vol/2]).
-export([enc_remote_node_device/1, dec_remote_node_device/2]).
-export([enc_remote_secret/1, dec_remote_secret/2]).
-export([enc_remote_error/1, dec_remote_error/2]).
-export([enc_remote_auth_type/1, dec_remote_auth_type/2]).
-export([enc_remote_vcpu_info/1, dec_remote_vcpu_info/2]).
-export([enc_remote_typed_param_value/1, dec_remote_typed_param_value/2]).
-export([enc_remote_typed_param/1, dec_remote_typed_param/2]).
-export([enc_remote_node_get_cpu_stats/1, dec_remote_node_get_cpu_stats/2]).
-export([enc_remote_node_get_memory_stats/1, dec_remote_node_get_memory_stats/2]).
-export([enc_remote_domain_disk_error/1, dec_remote_domain_disk_error/2]).
-export([enc_remote_connect_open_args/1, dec_remote_connect_open_args/2]).
-export([enc_remote_connect_supports_feature_args/1, dec_remote_connect_supports_feature_args/2]).
-export([enc_remote_connect_supports_feature_ret/1, dec_remote_connect_supports_feature_ret/2]).
-export([enc_remote_connect_get_type_ret/1, dec_remote_connect_get_type_ret/2]).
-export([enc_remote_connect_get_version_ret/1, dec_remote_connect_get_version_ret/2]).
-export([enc_remote_connect_get_lib_version_ret/1, dec_remote_connect_get_lib_version_ret/2]).
-export([enc_remote_connect_get_hostname_ret/1, dec_remote_connect_get_hostname_ret/2]).
-export([enc_remote_connect_get_sysinfo_args/1, dec_remote_connect_get_sysinfo_args/2]).
-export([enc_remote_connect_get_sysinfo_ret/1, dec_remote_connect_get_sysinfo_ret/2]).
-export([enc_remote_connect_get_uri_ret/1, dec_remote_connect_get_uri_ret/2]).
-export([enc_remote_connect_get_max_vcpus_args/1, dec_remote_connect_get_max_vcpus_args/2]).
-export([enc_remote_connect_get_max_vcpus_ret/1, dec_remote_connect_get_max_vcpus_ret/2]).
-export([enc_remote_node_get_info_ret/1, dec_remote_node_get_info_ret/2]).
-export([enc_remote_connect_get_capabilities_ret/1, dec_remote_connect_get_capabilities_ret/2]).
-export([enc_remote_connect_get_domain_capabilities_args/1, dec_remote_connect_get_domain_capabilities_args/2]).
-export([enc_remote_connect_get_domain_capabilities_ret/1, dec_remote_connect_get_domain_capabilities_ret/2]).
-export([enc_remote_node_get_cpu_stats_args/1, dec_remote_node_get_cpu_stats_args/2]).
-export([enc_remote_node_get_cpu_stats_ret/1, dec_remote_node_get_cpu_stats_ret/2]).
-export([enc_remote_node_get_memory_stats_args/1, dec_remote_node_get_memory_stats_args/2]).
-export([enc_remote_node_get_memory_stats_ret/1, dec_remote_node_get_memory_stats_ret/2]).
-export([enc_remote_node_get_cells_free_memory_args/1, dec_remote_node_get_cells_free_memory_args/2]).
-export([enc_remote_node_get_cells_free_memory_ret/1, dec_remote_node_get_cells_free_memory_ret/2]).
-export([enc_remote_node_get_free_memory_ret/1, dec_remote_node_get_free_memory_ret/2]).
-export([enc_remote_domain_get_scheduler_type_args/1, dec_remote_domain_get_scheduler_type_args/2]).
-export([enc_remote_domain_get_scheduler_type_ret/1, dec_remote_domain_get_scheduler_type_ret/2]).
-export([enc_remote_domain_get_scheduler_parameters_args/1, dec_remote_domain_get_scheduler_parameters_args/2]).
-export([enc_remote_domain_get_scheduler_parameters_ret/1, dec_remote_domain_get_scheduler_parameters_ret/2]).
-export([enc_remote_domain_get_scheduler_parameters_flags_args/1, dec_remote_domain_get_scheduler_parameters_flags_args/2]).
-export([enc_remote_domain_get_scheduler_parameters_flags_ret/1, dec_remote_domain_get_scheduler_parameters_flags_ret/2]).
-export([enc_remote_domain_set_scheduler_parameters_args/1, dec_remote_domain_set_scheduler_parameters_args/2]).
-export([enc_remote_domain_set_scheduler_parameters_flags_args/1, dec_remote_domain_set_scheduler_parameters_flags_args/2]).
-export([enc_remote_domain_set_blkio_parameters_args/1, dec_remote_domain_set_blkio_parameters_args/2]).
-export([enc_remote_domain_get_blkio_parameters_args/1, dec_remote_domain_get_blkio_parameters_args/2]).
-export([enc_remote_domain_get_blkio_parameters_ret/1, dec_remote_domain_get_blkio_parameters_ret/2]).
-export([enc_remote_domain_set_memory_parameters_args/1, dec_remote_domain_set_memory_parameters_args/2]).
-export([enc_remote_domain_get_memory_parameters_args/1, dec_remote_domain_get_memory_parameters_args/2]).
-export([enc_remote_domain_get_memory_parameters_ret/1, dec_remote_domain_get_memory_parameters_ret/2]).
-export([enc_remote_domain_block_resize_args/1, dec_remote_domain_block_resize_args/2]).
-export([enc_remote_domain_set_numa_parameters_args/1, dec_remote_domain_set_numa_parameters_args/2]).
-export([enc_remote_domain_get_numa_parameters_args/1, dec_remote_domain_get_numa_parameters_args/2]).
-export([enc_remote_domain_get_numa_parameters_ret/1, dec_remote_domain_get_numa_parameters_ret/2]).
-export([enc_remote_domain_set_perf_events_args/1, dec_remote_domain_set_perf_events_args/2]).
-export([enc_remote_domain_get_perf_events_args/1, dec_remote_domain_get_perf_events_args/2]).
-export([enc_remote_domain_get_perf_events_ret/1, dec_remote_domain_get_perf_events_ret/2]).
-export([enc_remote_domain_block_stats_args/1, dec_remote_domain_block_stats_args/2]).
-export([enc_remote_domain_block_stats_ret/1, dec_remote_domain_block_stats_ret/2]).
-export([enc_remote_domain_block_stats_flags_args/1, dec_remote_domain_block_stats_flags_args/2]).
-export([enc_remote_domain_block_stats_flags_ret/1, dec_remote_domain_block_stats_flags_ret/2]).
-export([enc_remote_domain_interface_stats_args/1, dec_remote_domain_interface_stats_args/2]).
-export([enc_remote_domain_interface_stats_ret/1, dec_remote_domain_interface_stats_ret/2]).
-export([enc_remote_domain_set_interface_parameters_args/1, dec_remote_domain_set_interface_parameters_args/2]).
-export([enc_remote_domain_get_interface_parameters_args/1, dec_remote_domain_get_interface_parameters_args/2]).
-export([enc_remote_domain_get_interface_parameters_ret/1, dec_remote_domain_get_interface_parameters_ret/2]).
-export([enc_remote_domain_memory_stats_args/1, dec_remote_domain_memory_stats_args/2]).
-export([enc_remote_domain_memory_stat/1, dec_remote_domain_memory_stat/2]).
-export([enc_remote_domain_memory_stats_ret/1, dec_remote_domain_memory_stats_ret/2]).
-export([enc_remote_domain_block_peek_args/1, dec_remote_domain_block_peek_args/2]).
-export([enc_remote_domain_block_peek_ret/1, dec_remote_domain_block_peek_ret/2]).
-export([enc_remote_domain_memory_peek_args/1, dec_remote_domain_memory_peek_args/2]).
-export([enc_remote_domain_memory_peek_ret/1, dec_remote_domain_memory_peek_ret/2]).
-export([enc_remote_domain_get_block_info_args/1, dec_remote_domain_get_block_info_args/2]).
-export([enc_remote_domain_get_block_info_ret/1, dec_remote_domain_get_block_info_ret/2]).
-export([enc_remote_connect_list_domains_args/1, dec_remote_connect_list_domains_args/2]).
-export([enc_remote_connect_list_domains_ret/1, dec_remote_connect_list_domains_ret/2]).
-export([enc_remote_connect_num_of_domains_ret/1, dec_remote_connect_num_of_domains_ret/2]).
-export([enc_remote_domain_create_xml_args/1, dec_remote_domain_create_xml_args/2]).
-export([enc_remote_domain_create_xml_ret/1, dec_remote_domain_create_xml_ret/2]).
-export([enc_remote_domain_create_xml_with_files_args/1, dec_remote_domain_create_xml_with_files_args/2]).
-export([enc_remote_domain_create_xml_with_files_ret/1, dec_remote_domain_create_xml_with_files_ret/2]).
-export([enc_remote_domain_lookup_by_id_args/1, dec_remote_domain_lookup_by_id_args/2]).
-export([enc_remote_domain_lookup_by_id_ret/1, dec_remote_domain_lookup_by_id_ret/2]).
-export([enc_remote_domain_lookup_by_uuid_args/1, dec_remote_domain_lookup_by_uuid_args/2]).
-export([enc_remote_domain_lookup_by_uuid_ret/1, dec_remote_domain_lookup_by_uuid_ret/2]).
-export([enc_remote_domain_lookup_by_name_args/1, dec_remote_domain_lookup_by_name_args/2]).
-export([enc_remote_domain_lookup_by_name_ret/1, dec_remote_domain_lookup_by_name_ret/2]).
-export([enc_remote_domain_suspend_args/1, dec_remote_domain_suspend_args/2]).
-export([enc_remote_domain_resume_args/1, dec_remote_domain_resume_args/2]).
-export([enc_remote_domain_pm_suspend_for_duration_args/1, dec_remote_domain_pm_suspend_for_duration_args/2]).
-export([enc_remote_domain_pm_wakeup_args/1, dec_remote_domain_pm_wakeup_args/2]).
-export([enc_remote_domain_shutdown_args/1, dec_remote_domain_shutdown_args/2]).
-export([enc_remote_domain_reboot_args/1, dec_remote_domain_reboot_args/2]).
-export([enc_remote_domain_reset_args/1, dec_remote_domain_reset_args/2]).
-export([enc_remote_domain_destroy_args/1, dec_remote_domain_destroy_args/2]).
-export([enc_remote_domain_destroy_flags_args/1, dec_remote_domain_destroy_flags_args/2]).
-export([enc_remote_domain_get_os_type_args/1, dec_remote_domain_get_os_type_args/2]).
-export([enc_remote_domain_get_os_type_ret/1, dec_remote_domain_get_os_type_ret/2]).
-export([enc_remote_domain_get_max_memory_args/1, dec_remote_domain_get_max_memory_args/2]).
-export([enc_remote_domain_get_max_memory_ret/1, dec_remote_domain_get_max_memory_ret/2]).
-export([enc_remote_domain_set_max_memory_args/1, dec_remote_domain_set_max_memory_args/2]).
-export([enc_remote_domain_set_memory_args/1, dec_remote_domain_set_memory_args/2]).
-export([enc_remote_domain_set_memory_flags_args/1, dec_remote_domain_set_memory_flags_args/2]).
-export([enc_remote_domain_set_memory_stats_period_args/1, dec_remote_domain_set_memory_stats_period_args/2]).
-export([enc_remote_domain_get_info_args/1, dec_remote_domain_get_info_args/2]).
-export([enc_remote_domain_get_info_ret/1, dec_remote_domain_get_info_ret/2]).
-export([enc_remote_domain_save_args/1, dec_remote_domain_save_args/2]).
-export([enc_remote_domain_save_flags_args/1, dec_remote_domain_save_flags_args/2]).
-export([enc_remote_domain_restore_args/1, dec_remote_domain_restore_args/2]).
-export([enc_remote_domain_restore_flags_args/1, dec_remote_domain_restore_flags_args/2]).
-export([enc_remote_domain_save_image_get_xml_desc_args/1, dec_remote_domain_save_image_get_xml_desc_args/2]).
-export([enc_remote_domain_save_image_get_xml_desc_ret/1, dec_remote_domain_save_image_get_xml_desc_ret/2]).
-export([enc_remote_domain_save_image_define_xml_args/1, dec_remote_domain_save_image_define_xml_args/2]).
-export([enc_remote_domain_core_dump_args/1, dec_remote_domain_core_dump_args/2]).
-export([enc_remote_domain_core_dump_with_format_args/1, dec_remote_domain_core_dump_with_format_args/2]).
-export([enc_remote_domain_screenshot_args/1, dec_remote_domain_screenshot_args/2]).
-export([enc_remote_domain_screenshot_ret/1, dec_remote_domain_screenshot_ret/2]).
-export([enc_remote_domain_get_xml_desc_args/1, dec_remote_domain_get_xml_desc_args/2]).
-export([enc_remote_domain_get_xml_desc_ret/1, dec_remote_domain_get_xml_desc_ret/2]).
-export([enc_remote_domain_migrate_prepare_args/1, dec_remote_domain_migrate_prepare_args/2]).
-export([enc_remote_domain_migrate_prepare_ret/1, dec_remote_domain_migrate_prepare_ret/2]).
-export([enc_remote_domain_migrate_perform_args/1, dec_remote_domain_migrate_perform_args/2]).
-export([enc_remote_domain_migrate_finish_args/1, dec_remote_domain_migrate_finish_args/2]).
-export([enc_remote_domain_migrate_finish_ret/1, dec_remote_domain_migrate_finish_ret/2]).
-export([enc_remote_domain_migrate_prepare2_args/1, dec_remote_domain_migrate_prepare2_args/2]).
-export([enc_remote_domain_migrate_prepare2_ret/1, dec_remote_domain_migrate_prepare2_ret/2]).
-export([enc_remote_domain_migrate_finish2_args/1, dec_remote_domain_migrate_finish2_args/2]).
-export([enc_remote_domain_migrate_finish2_ret/1, dec_remote_domain_migrate_finish2_ret/2]).
-export([enc_remote_connect_list_defined_domains_args/1, dec_remote_connect_list_defined_domains_args/2]).
-export([enc_remote_connect_list_defined_domains_ret/1, dec_remote_connect_list_defined_domains_ret/2]).
-export([enc_remote_connect_num_of_defined_domains_ret/1, dec_remote_connect_num_of_defined_domains_ret/2]).
-export([enc_remote_domain_create_args/1, dec_remote_domain_create_args/2]).
-export([enc_remote_domain_create_with_flags_args/1, dec_remote_domain_create_with_flags_args/2]).
-export([enc_remote_domain_create_with_flags_ret/1, dec_remote_domain_create_with_flags_ret/2]).
-export([enc_remote_domain_create_with_files_args/1, dec_remote_domain_create_with_files_args/2]).
-export([enc_remote_domain_create_with_files_ret/1, dec_remote_domain_create_with_files_ret/2]).
-export([enc_remote_domain_define_xml_args/1, dec_remote_domain_define_xml_args/2]).
-export([enc_remote_domain_define_xml_ret/1, dec_remote_domain_define_xml_ret/2]).
-export([enc_remote_domain_define_xml_flags_args/1, dec_remote_domain_define_xml_flags_args/2]).
-export([enc_remote_domain_define_xml_flags_ret/1, dec_remote_domain_define_xml_flags_ret/2]).
-export([enc_remote_domain_undefine_args/1, dec_remote_domain_undefine_args/2]).
-export([enc_remote_domain_undefine_flags_args/1, dec_remote_domain_undefine_flags_args/2]).
-export([enc_remote_domain_inject_nmi_args/1, dec_remote_domain_inject_nmi_args/2]).
-export([enc_remote_domain_send_key_args/1, dec_remote_domain_send_key_args/2]).
-export([enc_remote_domain_send_process_signal_args/1, dec_remote_domain_send_process_signal_args/2]).
-export([enc_remote_domain_set_vcpus_args/1, dec_remote_domain_set_vcpus_args/2]).
-export([enc_remote_domain_set_vcpus_flags_args/1, dec_remote_domain_set_vcpus_flags_args/2]).
-export([enc_remote_domain_get_vcpus_flags_args/1, dec_remote_domain_get_vcpus_flags_args/2]).
-export([enc_remote_domain_get_vcpus_flags_ret/1, dec_remote_domain_get_vcpus_flags_ret/2]).
-export([enc_remote_domain_pin_vcpu_args/1, dec_remote_domain_pin_vcpu_args/2]).
-export([enc_remote_domain_pin_vcpu_flags_args/1, dec_remote_domain_pin_vcpu_flags_args/2]).
-export([enc_remote_domain_get_vcpu_pin_info_args/1, dec_remote_domain_get_vcpu_pin_info_args/2]).
-export([enc_remote_domain_get_vcpu_pin_info_ret/1, dec_remote_domain_get_vcpu_pin_info_ret/2]).
-export([enc_remote_domain_pin_emulator_args/1, dec_remote_domain_pin_emulator_args/2]).
-export([enc_remote_domain_get_emulator_pin_info_args/1, dec_remote_domain_get_emulator_pin_info_args/2]).
-export([enc_remote_domain_get_emulator_pin_info_ret/1, dec_remote_domain_get_emulator_pin_info_ret/2]).
-export([enc_remote_domain_get_vcpus_args/1, dec_remote_domain_get_vcpus_args/2]).
-export([enc_remote_domain_get_vcpus_ret/1, dec_remote_domain_get_vcpus_ret/2]).
-export([enc_remote_domain_get_max_vcpus_args/1, dec_remote_domain_get_max_vcpus_args/2]).
-export([enc_remote_domain_get_max_vcpus_ret/1, dec_remote_domain_get_max_vcpus_ret/2]).
-export([enc_remote_domain_iothread_info/1, dec_remote_domain_iothread_info/2]).
-export([enc_remote_domain_get_iothread_info_args/1, dec_remote_domain_get_iothread_info_args/2]).
-export([enc_remote_domain_get_iothread_info_ret/1, dec_remote_domain_get_iothread_info_ret/2]).
-export([enc_remote_domain_pin_iothread_args/1, dec_remote_domain_pin_iothread_args/2]).
-export([enc_remote_domain_add_iothread_args/1, dec_remote_domain_add_iothread_args/2]).
-export([enc_remote_domain_del_iothread_args/1, dec_remote_domain_del_iothread_args/2]).
-export([enc_remote_domain_set_iothread_params_args/1, dec_remote_domain_set_iothread_params_args/2]).
-export([enc_remote_domain_get_security_label_args/1, dec_remote_domain_get_security_label_args/2]).
-export([enc_remote_domain_get_security_label_ret/1, dec_remote_domain_get_security_label_ret/2]).
-export([enc_remote_domain_get_security_label_list_args/1, dec_remote_domain_get_security_label_list_args/2]).
-export([enc_remote_domain_get_security_label_list_ret/1, dec_remote_domain_get_security_label_list_ret/2]).
-export([enc_remote_node_get_security_model_ret/1, dec_remote_node_get_security_model_ret/2]).
-export([enc_remote_domain_attach_device_args/1, dec_remote_domain_attach_device_args/2]).
-export([enc_remote_domain_attach_device_flags_args/1, dec_remote_domain_attach_device_flags_args/2]).
-export([enc_remote_domain_detach_device_args/1, dec_remote_domain_detach_device_args/2]).
-export([enc_remote_domain_detach_device_flags_args/1, dec_remote_domain_detach_device_flags_args/2]).
-export([enc_remote_domain_update_device_flags_args/1, dec_remote_domain_update_device_flags_args/2]).
-export([enc_remote_domain_detach_device_alias_args/1, dec_remote_domain_detach_device_alias_args/2]).
-export([enc_remote_domain_get_autostart_args/1, dec_remote_domain_get_autostart_args/2]).
-export([enc_remote_domain_get_autostart_ret/1, dec_remote_domain_get_autostart_ret/2]).
-export([enc_remote_domain_set_autostart_args/1, dec_remote_domain_set_autostart_args/2]).
-export([enc_remote_domain_set_metadata_args/1, dec_remote_domain_set_metadata_args/2]).
-export([enc_remote_domain_get_metadata_args/1, dec_remote_domain_get_metadata_args/2]).
-export([enc_remote_domain_get_metadata_ret/1, dec_remote_domain_get_metadata_ret/2]).
-export([enc_remote_domain_block_job_abort_args/1, dec_remote_domain_block_job_abort_args/2]).
-export([enc_remote_domain_get_block_job_info_args/1, dec_remote_domain_get_block_job_info_args/2]).
-export([enc_remote_domain_get_block_job_info_ret/1, dec_remote_domain_get_block_job_info_ret/2]).
-export([enc_remote_domain_block_job_set_speed_args/1, dec_remote_domain_block_job_set_speed_args/2]).
-export([enc_remote_domain_block_pull_args/1, dec_remote_domain_block_pull_args/2]).
-export([enc_remote_domain_block_rebase_args/1, dec_remote_domain_block_rebase_args/2]).
-export([enc_remote_domain_block_copy_args/1, dec_remote_domain_block_copy_args/2]).
-export([enc_remote_domain_block_commit_args/1, dec_remote_domain_block_commit_args/2]).
-export([enc_remote_domain_set_block_io_tune_args/1, dec_remote_domain_set_block_io_tune_args/2]).
-export([enc_remote_domain_get_block_io_tune_args/1, dec_remote_domain_get_block_io_tune_args/2]).
-export([enc_remote_domain_get_block_io_tune_ret/1, dec_remote_domain_get_block_io_tune_ret/2]).
-export([enc_remote_domain_get_cpu_stats_args/1, dec_remote_domain_get_cpu_stats_args/2]).
-export([enc_remote_domain_get_cpu_stats_ret/1, dec_remote_domain_get_cpu_stats_ret/2]).
-export([enc_remote_domain_get_hostname_args/1, dec_remote_domain_get_hostname_args/2]).
-export([enc_remote_domain_get_hostname_ret/1, dec_remote_domain_get_hostname_ret/2]).
-export([enc_remote_connect_num_of_networks_ret/1, dec_remote_connect_num_of_networks_ret/2]).
-export([enc_remote_connect_list_networks_args/1, dec_remote_connect_list_networks_args/2]).
-export([enc_remote_connect_list_networks_ret/1, dec_remote_connect_list_networks_ret/2]).
-export([enc_remote_connect_num_of_defined_networks_ret/1, dec_remote_connect_num_of_defined_networks_ret/2]).
-export([enc_remote_connect_list_defined_networks_args/1, dec_remote_connect_list_defined_networks_args/2]).
-export([enc_remote_connect_list_defined_networks_ret/1, dec_remote_connect_list_defined_networks_ret/2]).
-export([enc_remote_network_lookup_by_uuid_args/1, dec_remote_network_lookup_by_uuid_args/2]).
-export([enc_remote_network_lookup_by_uuid_ret/1, dec_remote_network_lookup_by_uuid_ret/2]).
-export([enc_remote_network_lookup_by_name_args/1, dec_remote_network_lookup_by_name_args/2]).
-export([enc_remote_network_lookup_by_name_ret/1, dec_remote_network_lookup_by_name_ret/2]).
-export([enc_remote_network_create_xml_args/1, dec_remote_network_create_xml_args/2]).
-export([enc_remote_network_create_xml_ret/1, dec_remote_network_create_xml_ret/2]).
-export([enc_remote_network_define_xml_args/1, dec_remote_network_define_xml_args/2]).
-export([enc_remote_network_define_xml_ret/1, dec_remote_network_define_xml_ret/2]).
-export([enc_remote_network_undefine_args/1, dec_remote_network_undefine_args/2]).
-export([enc_remote_network_update_args/1, dec_remote_network_update_args/2]).
-export([enc_remote_network_create_args/1, dec_remote_network_create_args/2]).
-export([enc_remote_network_destroy_args/1, dec_remote_network_destroy_args/2]).
-export([enc_remote_network_get_xml_desc_args/1, dec_remote_network_get_xml_desc_args/2]).
-export([enc_remote_network_get_xml_desc_ret/1, dec_remote_network_get_xml_desc_ret/2]).
-export([enc_remote_network_get_bridge_name_args/1, dec_remote_network_get_bridge_name_args/2]).
-export([enc_remote_network_get_bridge_name_ret/1, dec_remote_network_get_bridge_name_ret/2]).
-export([enc_remote_network_get_autostart_args/1, dec_remote_network_get_autostart_args/2]).
-export([enc_remote_network_get_autostart_ret/1, dec_remote_network_get_autostart_ret/2]).
-export([enc_remote_network_set_autostart_args/1, dec_remote_network_set_autostart_args/2]).
-export([enc_remote_connect_num_of_nwfilters_ret/1, dec_remote_connect_num_of_nwfilters_ret/2]).
-export([enc_remote_connect_list_nwfilters_args/1, dec_remote_connect_list_nwfilters_args/2]).
-export([enc_remote_connect_list_nwfilters_ret/1, dec_remote_connect_list_nwfilters_ret/2]).
-export([enc_remote_nwfilter_lookup_by_uuid_args/1, dec_remote_nwfilter_lookup_by_uuid_args/2]).
-export([enc_remote_nwfilter_lookup_by_uuid_ret/1, dec_remote_nwfilter_lookup_by_uuid_ret/2]).
-export([enc_remote_nwfilter_lookup_by_name_args/1, dec_remote_nwfilter_lookup_by_name_args/2]).
-export([enc_remote_nwfilter_lookup_by_name_ret/1, dec_remote_nwfilter_lookup_by_name_ret/2]).
-export([enc_remote_nwfilter_define_xml_args/1, dec_remote_nwfilter_define_xml_args/2]).
-export([enc_remote_nwfilter_define_xml_ret/1, dec_remote_nwfilter_define_xml_ret/2]).
-export([enc_remote_nwfilter_undefine_args/1, dec_remote_nwfilter_undefine_args/2]).
-export([enc_remote_nwfilter_get_xml_desc_args/1, dec_remote_nwfilter_get_xml_desc_args/2]).
-export([enc_remote_nwfilter_get_xml_desc_ret/1, dec_remote_nwfilter_get_xml_desc_ret/2]).
-export([enc_remote_connect_num_of_interfaces_ret/1, dec_remote_connect_num_of_interfaces_ret/2]).
-export([enc_remote_connect_list_interfaces_args/1, dec_remote_connect_list_interfaces_args/2]).
-export([enc_remote_connect_list_interfaces_ret/1, dec_remote_connect_list_interfaces_ret/2]).
-export([enc_remote_connect_num_of_defined_interfaces_ret/1, dec_remote_connect_num_of_defined_interfaces_ret/2]).
-export([enc_remote_connect_list_defined_interfaces_args/1, dec_remote_connect_list_defined_interfaces_args/2]).
-export([enc_remote_connect_list_defined_interfaces_ret/1, dec_remote_connect_list_defined_interfaces_ret/2]).
-export([enc_remote_interface_lookup_by_name_args/1, dec_remote_interface_lookup_by_name_args/2]).
-export([enc_remote_interface_lookup_by_name_ret/1, dec_remote_interface_lookup_by_name_ret/2]).
-export([enc_remote_interface_lookup_by_mac_string_args/1, dec_remote_interface_lookup_by_mac_string_args/2]).
-export([enc_remote_interface_lookup_by_mac_string_ret/1, dec_remote_interface_lookup_by_mac_string_ret/2]).
-export([enc_remote_interface_get_xml_desc_args/1, dec_remote_interface_get_xml_desc_args/2]).
-export([enc_remote_interface_get_xml_desc_ret/1, dec_remote_interface_get_xml_desc_ret/2]).
-export([enc_remote_interface_define_xml_args/1, dec_remote_interface_define_xml_args/2]).
-export([enc_remote_interface_define_xml_ret/1, dec_remote_interface_define_xml_ret/2]).
-export([enc_remote_interface_undefine_args/1, dec_remote_interface_undefine_args/2]).
-export([enc_remote_interface_create_args/1, dec_remote_interface_create_args/2]).
-export([enc_remote_interface_destroy_args/1, dec_remote_interface_destroy_args/2]).
-export([enc_remote_interface_change_begin_args/1, dec_remote_interface_change_begin_args/2]).
-export([enc_remote_interface_change_commit_args/1, dec_remote_interface_change_commit_args/2]).
-export([enc_remote_interface_change_rollback_args/1, dec_remote_interface_change_rollback_args/2]).
-export([enc_remote_auth_list_ret/1, dec_remote_auth_list_ret/2]).
-export([enc_remote_auth_sasl_init_ret/1, dec_remote_auth_sasl_init_ret/2]).
-export([enc_remote_auth_sasl_start_args/1, dec_remote_auth_sasl_start_args/2]).
-export([enc_remote_auth_sasl_start_ret/1, dec_remote_auth_sasl_start_ret/2]).
-export([enc_remote_auth_sasl_step_args/1, dec_remote_auth_sasl_step_args/2]).
-export([enc_remote_auth_sasl_step_ret/1, dec_remote_auth_sasl_step_ret/2]).
-export([enc_remote_auth_polkit_ret/1, dec_remote_auth_polkit_ret/2]).
-export([enc_remote_connect_num_of_storage_pools_ret/1, dec_remote_connect_num_of_storage_pools_ret/2]).
-export([enc_remote_connect_list_storage_pools_args/1, dec_remote_connect_list_storage_pools_args/2]).
-export([enc_remote_connect_list_storage_pools_ret/1, dec_remote_connect_list_storage_pools_ret/2]).
-export([enc_remote_connect_num_of_defined_storage_pools_ret/1, dec_remote_connect_num_of_defined_storage_pools_ret/2]).
-export([enc_remote_connect_list_defined_storage_pools_args/1, dec_remote_connect_list_defined_storage_pools_args/2]).
-export([enc_remote_connect_list_defined_storage_pools_ret/1, dec_remote_connect_list_defined_storage_pools_ret/2]).
-export([enc_remote_connect_find_storage_pool_sources_args/1, dec_remote_connect_find_storage_pool_sources_args/2]).
-export([enc_remote_connect_find_storage_pool_sources_ret/1, dec_remote_connect_find_storage_pool_sources_ret/2]).
-export([enc_remote_storage_pool_lookup_by_uuid_args/1, dec_remote_storage_pool_lookup_by_uuid_args/2]).
-export([enc_remote_storage_pool_lookup_by_uuid_ret/1, dec_remote_storage_pool_lookup_by_uuid_ret/2]).
-export([enc_remote_storage_pool_lookup_by_name_args/1, dec_remote_storage_pool_lookup_by_name_args/2]).
-export([enc_remote_storage_pool_lookup_by_name_ret/1, dec_remote_storage_pool_lookup_by_name_ret/2]).
-export([enc_remote_storage_pool_lookup_by_volume_args/1, dec_remote_storage_pool_lookup_by_volume_args/2]).
-export([enc_remote_storage_pool_lookup_by_volume_ret/1, dec_remote_storage_pool_lookup_by_volume_ret/2]).
-export([enc_remote_storage_pool_lookup_by_target_path_args/1, dec_remote_storage_pool_lookup_by_target_path_args/2]).
-export([enc_remote_storage_pool_lookup_by_target_path_ret/1, dec_remote_storage_pool_lookup_by_target_path_ret/2]).
-export([enc_remote_storage_pool_create_xml_args/1, dec_remote_storage_pool_create_xml_args/2]).
-export([enc_remote_storage_pool_create_xml_ret/1, dec_remote_storage_pool_create_xml_ret/2]).
-export([enc_remote_storage_pool_define_xml_args/1, dec_remote_storage_pool_define_xml_args/2]).
-export([enc_remote_storage_pool_define_xml_ret/1, dec_remote_storage_pool_define_xml_ret/2]).
-export([enc_remote_storage_pool_build_args/1, dec_remote_storage_pool_build_args/2]).
-export([enc_remote_storage_pool_undefine_args/1, dec_remote_storage_pool_undefine_args/2]).
-export([enc_remote_storage_pool_create_args/1, dec_remote_storage_pool_create_args/2]).
-export([enc_remote_storage_pool_destroy_args/1, dec_remote_storage_pool_destroy_args/2]).
-export([enc_remote_storage_pool_delete_args/1, dec_remote_storage_pool_delete_args/2]).
-export([enc_remote_storage_pool_refresh_args/1, dec_remote_storage_pool_refresh_args/2]).
-export([enc_remote_storage_pool_get_xml_desc_args/1, dec_remote_storage_pool_get_xml_desc_args/2]).
-export([enc_remote_storage_pool_get_xml_desc_ret/1, dec_remote_storage_pool_get_xml_desc_ret/2]).
-export([enc_remote_storage_pool_get_info_args/1, dec_remote_storage_pool_get_info_args/2]).
-export([enc_remote_storage_pool_get_info_ret/1, dec_remote_storage_pool_get_info_ret/2]).
-export([enc_remote_storage_pool_get_autostart_args/1, dec_remote_storage_pool_get_autostart_args/2]).
-export([enc_remote_storage_pool_get_autostart_ret/1, dec_remote_storage_pool_get_autostart_ret/2]).
-export([enc_remote_storage_pool_set_autostart_args/1, dec_remote_storage_pool_set_autostart_args/2]).
-export([enc_remote_storage_pool_num_of_volumes_args/1, dec_remote_storage_pool_num_of_volumes_args/2]).
-export([enc_remote_storage_pool_num_of_volumes_ret/1, dec_remote_storage_pool_num_of_volumes_ret/2]).
-export([enc_remote_storage_pool_list_volumes_args/1, dec_remote_storage_pool_list_volumes_args/2]).
-export([enc_remote_storage_pool_list_volumes_ret/1, dec_remote_storage_pool_list_volumes_ret/2]).
-export([enc_remote_storage_vol_lookup_by_name_args/1, dec_remote_storage_vol_lookup_by_name_args/2]).
-export([enc_remote_storage_vol_lookup_by_name_ret/1, dec_remote_storage_vol_lookup_by_name_ret/2]).
-export([enc_remote_storage_vol_lookup_by_key_args/1, dec_remote_storage_vol_lookup_by_key_args/2]).
-export([enc_remote_storage_vol_lookup_by_key_ret/1, dec_remote_storage_vol_lookup_by_key_ret/2]).
-export([enc_remote_storage_vol_lookup_by_path_args/1, dec_remote_storage_vol_lookup_by_path_args/2]).
-export([enc_remote_storage_vol_lookup_by_path_ret/1, dec_remote_storage_vol_lookup_by_path_ret/2]).
-export([enc_remote_storage_vol_create_xml_args/1, dec_remote_storage_vol_create_xml_args/2]).
-export([enc_remote_storage_vol_create_xml_ret/1, dec_remote_storage_vol_create_xml_ret/2]).
-export([enc_remote_storage_vol_create_xml_from_args/1, dec_remote_storage_vol_create_xml_from_args/2]).
-export([enc_remote_storage_vol_create_xml_from_ret/1, dec_remote_storage_vol_create_xml_from_ret/2]).
-export([enc_remote_storage_vol_delete_args/1, dec_remote_storage_vol_delete_args/2]).
-export([enc_remote_storage_vol_wipe_args/1, dec_remote_storage_vol_wipe_args/2]).
-export([enc_remote_storage_vol_wipe_pattern_args/1, dec_remote_storage_vol_wipe_pattern_args/2]).
-export([enc_remote_storage_vol_get_xml_desc_args/1, dec_remote_storage_vol_get_xml_desc_args/2]).
-export([enc_remote_storage_vol_get_xml_desc_ret/1, dec_remote_storage_vol_get_xml_desc_ret/2]).
-export([enc_remote_storage_vol_get_info_args/1, dec_remote_storage_vol_get_info_args/2]).
-export([enc_remote_storage_vol_get_info_ret/1, dec_remote_storage_vol_get_info_ret/2]).
-export([enc_remote_storage_vol_get_info_flags_args/1, dec_remote_storage_vol_get_info_flags_args/2]).
-export([enc_remote_storage_vol_get_info_flags_ret/1, dec_remote_storage_vol_get_info_flags_ret/2]).
-export([enc_remote_storage_vol_get_path_args/1, dec_remote_storage_vol_get_path_args/2]).
-export([enc_remote_storage_vol_get_path_ret/1, dec_remote_storage_vol_get_path_ret/2]).
-export([enc_remote_storage_vol_resize_args/1, dec_remote_storage_vol_resize_args/2]).
-export([enc_remote_node_num_of_devices_args/1, dec_remote_node_num_of_devices_args/2]).
-export([enc_remote_node_num_of_devices_ret/1, dec_remote_node_num_of_devices_ret/2]).
-export([enc_remote_node_list_devices_args/1, dec_remote_node_list_devices_args/2]).
-export([enc_remote_node_list_devices_ret/1, dec_remote_node_list_devices_ret/2]).
-export([enc_remote_node_device_lookup_by_name_args/1, dec_remote_node_device_lookup_by_name_args/2]).
-export([enc_remote_node_device_lookup_by_name_ret/1, dec_remote_node_device_lookup_by_name_ret/2]).
-export([enc_remote_node_device_lookup_scsi_host_by_wwn_args/1, dec_remote_node_device_lookup_scsi_host_by_wwn_args/2]).
-export([enc_remote_node_device_lookup_scsi_host_by_wwn_ret/1, dec_remote_node_device_lookup_scsi_host_by_wwn_ret/2]).
-export([enc_remote_node_device_get_xml_desc_args/1, dec_remote_node_device_get_xml_desc_args/2]).
-export([enc_remote_node_device_get_xml_desc_ret/1, dec_remote_node_device_get_xml_desc_ret/2]).
-export([enc_remote_node_device_get_parent_args/1, dec_remote_node_device_get_parent_args/2]).
-export([enc_remote_node_device_get_parent_ret/1, dec_remote_node_device_get_parent_ret/2]).
-export([enc_remote_node_device_num_of_caps_args/1, dec_remote_node_device_num_of_caps_args/2]).
-export([enc_remote_node_device_num_of_caps_ret/1, dec_remote_node_device_num_of_caps_ret/2]).
-export([enc_remote_node_device_list_caps_args/1, dec_remote_node_device_list_caps_args/2]).
-export([enc_remote_node_device_list_caps_ret/1, dec_remote_node_device_list_caps_ret/2]).
-export([enc_remote_node_device_dettach_args/1, dec_remote_node_device_dettach_args/2]).
-export([enc_remote_node_device_detach_flags_args/1, dec_remote_node_device_detach_flags_args/2]).
-export([enc_remote_node_device_re_attach_args/1, dec_remote_node_device_re_attach_args/2]).
-export([enc_remote_node_device_reset_args/1, dec_remote_node_device_reset_args/2]).
-export([enc_remote_node_device_create_xml_args/1, dec_remote_node_device_create_xml_args/2]).
-export([enc_remote_node_device_create_xml_ret/1, dec_remote_node_device_create_xml_ret/2]).
-export([enc_remote_node_device_destroy_args/1, dec_remote_node_device_destroy_args/2]).
-export([enc_remote_connect_domain_event_register_ret/1, dec_remote_connect_domain_event_register_ret/2]).
-export([enc_remote_connect_domain_event_deregister_ret/1, dec_remote_connect_domain_event_deregister_ret/2]).
-export([enc_remote_domain_event_lifecycle_msg/1, dec_remote_domain_event_lifecycle_msg/2]).
-export([enc_remote_domain_event_callback_lifecycle_msg/1, dec_remote_domain_event_callback_lifecycle_msg/2]).
-export([enc_remote_connect_domain_xml_from_native_args/1, dec_remote_connect_domain_xml_from_native_args/2]).
-export([enc_remote_connect_domain_xml_from_native_ret/1, dec_remote_connect_domain_xml_from_native_ret/2]).
-export([enc_remote_connect_domain_xml_to_native_args/1, dec_remote_connect_domain_xml_to_native_args/2]).
-export([enc_remote_connect_domain_xml_to_native_ret/1, dec_remote_connect_domain_xml_to_native_ret/2]).
-export([enc_remote_connect_num_of_secrets_ret/1, dec_remote_connect_num_of_secrets_ret/2]).
-export([enc_remote_connect_list_secrets_args/1, dec_remote_connect_list_secrets_args/2]).
-export([enc_remote_connect_list_secrets_ret/1, dec_remote_connect_list_secrets_ret/2]).
-export([enc_remote_secret_lookup_by_uuid_args/1, dec_remote_secret_lookup_by_uuid_args/2]).
-export([enc_remote_secret_lookup_by_uuid_ret/1, dec_remote_secret_lookup_by_uuid_ret/2]).
-export([enc_remote_secret_define_xml_args/1, dec_remote_secret_define_xml_args/2]).
-export([enc_remote_secret_define_xml_ret/1, dec_remote_secret_define_xml_ret/2]).
-export([enc_remote_secret_get_xml_desc_args/1, dec_remote_secret_get_xml_desc_args/2]).
-export([enc_remote_secret_get_xml_desc_ret/1, dec_remote_secret_get_xml_desc_ret/2]).
-export([enc_remote_secret_set_value_args/1, dec_remote_secret_set_value_args/2]).
-export([enc_remote_secret_get_value_args/1, dec_remote_secret_get_value_args/2]).
-export([enc_remote_secret_get_value_ret/1, dec_remote_secret_get_value_ret/2]).
-export([enc_remote_secret_undefine_args/1, dec_remote_secret_undefine_args/2]).
-export([enc_remote_secret_lookup_by_usage_args/1, dec_remote_secret_lookup_by_usage_args/2]).
-export([enc_remote_secret_lookup_by_usage_ret/1, dec_remote_secret_lookup_by_usage_ret/2]).
-export([enc_remote_domain_migrate_prepare_tunnel_args/1, dec_remote_domain_migrate_prepare_tunnel_args/2]).
-export([enc_remote_connect_is_secure_ret/1, dec_remote_connect_is_secure_ret/2]).
-export([enc_remote_domain_is_active_args/1, dec_remote_domain_is_active_args/2]).
-export([enc_remote_domain_is_active_ret/1, dec_remote_domain_is_active_ret/2]).
-export([enc_remote_domain_is_persistent_args/1, dec_remote_domain_is_persistent_args/2]).
-export([enc_remote_domain_is_persistent_ret/1, dec_remote_domain_is_persistent_ret/2]).
-export([enc_remote_domain_is_updated_args/1, dec_remote_domain_is_updated_args/2]).
-export([enc_remote_domain_is_updated_ret/1, dec_remote_domain_is_updated_ret/2]).
-export([enc_remote_network_is_active_args/1, dec_remote_network_is_active_args/2]).
-export([enc_remote_network_is_active_ret/1, dec_remote_network_is_active_ret/2]).
-export([enc_remote_network_is_persistent_args/1, dec_remote_network_is_persistent_args/2]).
-export([enc_remote_network_is_persistent_ret/1, dec_remote_network_is_persistent_ret/2]).
-export([enc_remote_storage_pool_is_active_args/1, dec_remote_storage_pool_is_active_args/2]).
-export([enc_remote_storage_pool_is_active_ret/1, dec_remote_storage_pool_is_active_ret/2]).
-export([enc_remote_storage_pool_is_persistent_args/1, dec_remote_storage_pool_is_persistent_args/2]).
-export([enc_remote_storage_pool_is_persistent_ret/1, dec_remote_storage_pool_is_persistent_ret/2]).
-export([enc_remote_interface_is_active_args/1, dec_remote_interface_is_active_args/2]).
-export([enc_remote_interface_is_active_ret/1, dec_remote_interface_is_active_ret/2]).
-export([enc_remote_connect_compare_cpu_args/1, dec_remote_connect_compare_cpu_args/2]).
-export([enc_remote_connect_compare_cpu_ret/1, dec_remote_connect_compare_cpu_ret/2]).
-export([enc_remote_connect_baseline_cpu_args/1, dec_remote_connect_baseline_cpu_args/2]).
-export([enc_remote_connect_baseline_cpu_ret/1, dec_remote_connect_baseline_cpu_ret/2]).
-export([enc_remote_domain_get_job_info_args/1, dec_remote_domain_get_job_info_args/2]).
-export([enc_remote_domain_get_job_info_ret/1, dec_remote_domain_get_job_info_ret/2]).
-export([enc_remote_domain_get_job_stats_args/1, dec_remote_domain_get_job_stats_args/2]).
-export([enc_remote_domain_get_job_stats_ret/1, dec_remote_domain_get_job_stats_ret/2]).
-export([enc_remote_domain_abort_job_args/1, dec_remote_domain_abort_job_args/2]).
-export([enc_remote_domain_migrate_get_max_downtime_args/1, dec_remote_domain_migrate_get_max_downtime_args/2]).
-export([enc_remote_domain_migrate_get_max_downtime_ret/1, dec_remote_domain_migrate_get_max_downtime_ret/2]).
-export([enc_remote_domain_migrate_set_max_downtime_args/1, dec_remote_domain_migrate_set_max_downtime_args/2]).
-export([enc_remote_domain_migrate_get_compression_cache_args/1, dec_remote_domain_migrate_get_compression_cache_args/2]).
-export([enc_remote_domain_migrate_get_compression_cache_ret/1, dec_remote_domain_migrate_get_compression_cache_ret/2]).
-export([enc_remote_domain_migrate_set_compression_cache_args/1, dec_remote_domain_migrate_set_compression_cache_args/2]).
-export([enc_remote_domain_migrate_set_max_speed_args/1, dec_remote_domain_migrate_set_max_speed_args/2]).
-export([enc_remote_domain_migrate_get_max_speed_args/1, dec_remote_domain_migrate_get_max_speed_args/2]).
-export([enc_remote_domain_migrate_get_max_speed_ret/1, dec_remote_domain_migrate_get_max_speed_ret/2]).
-export([enc_remote_connect_domain_event_register_any_args/1, dec_remote_connect_domain_event_register_any_args/2]).
-export([enc_remote_connect_domain_event_deregister_any_args/1, dec_remote_connect_domain_event_deregister_any_args/2]).
-export([enc_remote_connect_domain_event_callback_register_any_args/1, dec_remote_connect_domain_event_callback_register_any_args/2]).
-export([enc_remote_connect_domain_event_callback_register_any_ret/1, dec_remote_connect_domain_event_callback_register_any_ret/2]).
-export([enc_remote_connect_domain_event_callback_deregister_any_args/1, dec_remote_connect_domain_event_callback_deregister_any_args/2]).
-export([enc_remote_domain_event_reboot_msg/1, dec_remote_domain_event_reboot_msg/2]).
-export([enc_remote_domain_event_callback_reboot_msg/1, dec_remote_domain_event_callback_reboot_msg/2]).
-export([enc_remote_domain_event_rtc_change_msg/1, dec_remote_domain_event_rtc_change_msg/2]).
-export([enc_remote_domain_event_callback_rtc_change_msg/1, dec_remote_domain_event_callback_rtc_change_msg/2]).
-export([enc_remote_domain_event_watchdog_msg/1, dec_remote_domain_event_watchdog_msg/2]).
-export([enc_remote_domain_event_callback_watchdog_msg/1, dec_remote_domain_event_callback_watchdog_msg/2]).
-export([enc_remote_domain_event_io_error_msg/1, dec_remote_domain_event_io_error_msg/2]).
-export([enc_remote_domain_event_callback_io_error_msg/1, dec_remote_domain_event_callback_io_error_msg/2]).
-export([enc_remote_domain_event_io_error_reason_msg/1, dec_remote_domain_event_io_error_reason_msg/2]).
-export([enc_remote_domain_event_callback_io_error_reason_msg/1, dec_remote_domain_event_callback_io_error_reason_msg/2]).
-export([enc_remote_domain_event_graphics_address/1, dec_remote_domain_event_graphics_address/2]).
-export([enc_remote_domain_event_graphics_identity/1, dec_remote_domain_event_graphics_identity/2]).
-export([enc_remote_domain_event_graphics_msg/1, dec_remote_domain_event_graphics_msg/2]).
-export([enc_remote_domain_event_callback_graphics_msg/1, dec_remote_domain_event_callback_graphics_msg/2]).
-export([enc_remote_domain_event_block_job_msg/1, dec_remote_domain_event_block_job_msg/2]).
-export([enc_remote_domain_event_callback_block_job_msg/1, dec_remote_domain_event_callback_block_job_msg/2]).
-export([enc_remote_domain_event_disk_change_msg/1, dec_remote_domain_event_disk_change_msg/2]).
-export([enc_remote_domain_event_callback_disk_change_msg/1, dec_remote_domain_event_callback_disk_change_msg/2]).
-export([enc_remote_domain_event_tray_change_msg/1, dec_remote_domain_event_tray_change_msg/2]).
-export([enc_remote_domain_event_callback_tray_change_msg/1, dec_remote_domain_event_callback_tray_change_msg/2]).
-export([enc_remote_domain_event_pmwakeup_msg/1, dec_remote_domain_event_pmwakeup_msg/2]).
-export([enc_remote_domain_event_callback_pmwakeup_msg/1, dec_remote_domain_event_callback_pmwakeup_msg/2]).
-export([enc_remote_domain_event_pmsuspend_msg/1, dec_remote_domain_event_pmsuspend_msg/2]).
-export([enc_remote_domain_event_callback_pmsuspend_msg/1, dec_remote_domain_event_callback_pmsuspend_msg/2]).
-export([enc_remote_domain_event_balloon_change_msg/1, dec_remote_domain_event_balloon_change_msg/2]).
-export([enc_remote_domain_event_callback_balloon_change_msg/1, dec_remote_domain_event_callback_balloon_change_msg/2]).
-export([enc_remote_domain_event_pmsuspend_disk_msg/1, dec_remote_domain_event_pmsuspend_disk_msg/2]).
-export([enc_remote_domain_event_callback_pmsuspend_disk_msg/1, dec_remote_domain_event_callback_pmsuspend_disk_msg/2]).
-export([enc_remote_domain_managed_save_args/1, dec_remote_domain_managed_save_args/2]).
-export([enc_remote_domain_has_managed_save_image_args/1, dec_remote_domain_has_managed_save_image_args/2]).
-export([enc_remote_domain_has_managed_save_image_ret/1, dec_remote_domain_has_managed_save_image_ret/2]).
-export([enc_remote_domain_managed_save_remove_args/1, dec_remote_domain_managed_save_remove_args/2]).
-export([enc_remote_domain_managed_save_get_xml_desc_args/1, dec_remote_domain_managed_save_get_xml_desc_args/2]).
-export([enc_remote_domain_managed_save_get_xml_desc_ret/1, dec_remote_domain_managed_save_get_xml_desc_ret/2]).
-export([enc_remote_domain_managed_save_define_xml_args/1, dec_remote_domain_managed_save_define_xml_args/2]).
-export([enc_remote_domain_snapshot_create_xml_args/1, dec_remote_domain_snapshot_create_xml_args/2]).
-export([enc_remote_domain_snapshot_create_xml_ret/1, dec_remote_domain_snapshot_create_xml_ret/2]).
-export([enc_remote_domain_snapshot_get_xml_desc_args/1, dec_remote_domain_snapshot_get_xml_desc_args/2]).
-export([enc_remote_domain_snapshot_get_xml_desc_ret/1, dec_remote_domain_snapshot_get_xml_desc_ret/2]).
-export([enc_remote_domain_snapshot_num_args/1, dec_remote_domain_snapshot_num_args/2]).
-export([enc_remote_domain_snapshot_num_ret/1, dec_remote_domain_snapshot_num_ret/2]).
-export([enc_remote_domain_snapshot_list_names_args/1, dec_remote_domain_snapshot_list_names_args/2]).
-export([enc_remote_domain_snapshot_list_names_ret/1, dec_remote_domain_snapshot_list_names_ret/2]).
-export([enc_remote_domain_list_all_snapshots_args/1, dec_remote_domain_list_all_snapshots_args/2]).
-export([enc_remote_domain_list_all_snapshots_ret/1, dec_remote_domain_list_all_snapshots_ret/2]).
-export([enc_remote_domain_snapshot_num_children_args/1, dec_remote_domain_snapshot_num_children_args/2]).
-export([enc_remote_domain_snapshot_num_children_ret/1, dec_remote_domain_snapshot_num_children_ret/2]).
-export([enc_remote_domain_snapshot_list_children_names_args/1, dec_remote_domain_snapshot_list_children_names_args/2]).
-export([enc_remote_domain_snapshot_list_children_names_ret/1, dec_remote_domain_snapshot_list_children_names_ret/2]).
-export([enc_remote_domain_snapshot_list_all_children_args/1, dec_remote_domain_snapshot_list_all_children_args/2]).
-export([enc_remote_domain_snapshot_list_all_children_ret/1, dec_remote_domain_snapshot_list_all_children_ret/2]).
-export([enc_remote_domain_snapshot_lookup_by_name_args/1, dec_remote_domain_snapshot_lookup_by_name_args/2]).
-export([enc_remote_domain_snapshot_lookup_by_name_ret/1, dec_remote_domain_snapshot_lookup_by_name_ret/2]).
-export([enc_remote_domain_has_current_snapshot_args/1, dec_remote_domain_has_current_snapshot_args/2]).
-export([enc_remote_domain_has_current_snapshot_ret/1, dec_remote_domain_has_current_snapshot_ret/2]).
-export([enc_remote_domain_snapshot_get_parent_args/1, dec_remote_domain_snapshot_get_parent_args/2]).
-export([enc_remote_domain_snapshot_get_parent_ret/1, dec_remote_domain_snapshot_get_parent_ret/2]).
-export([enc_remote_domain_snapshot_current_args/1, dec_remote_domain_snapshot_current_args/2]).
-export([enc_remote_domain_snapshot_current_ret/1, dec_remote_domain_snapshot_current_ret/2]).
-export([enc_remote_domain_snapshot_is_current_args/1, dec_remote_domain_snapshot_is_current_args/2]).
-export([enc_remote_domain_snapshot_is_current_ret/1, dec_remote_domain_snapshot_is_current_ret/2]).
-export([enc_remote_domain_snapshot_has_metadata_args/1, dec_remote_domain_snapshot_has_metadata_args/2]).
-export([enc_remote_domain_snapshot_has_metadata_ret/1, dec_remote_domain_snapshot_has_metadata_ret/2]).
-export([enc_remote_domain_revert_to_snapshot_args/1, dec_remote_domain_revert_to_snapshot_args/2]).
-export([enc_remote_domain_snapshot_delete_args/1, dec_remote_domain_snapshot_delete_args/2]).
-export([enc_remote_domain_open_console_args/1, dec_remote_domain_open_console_args/2]).
-export([enc_remote_domain_open_channel_args/1, dec_remote_domain_open_channel_args/2]).
-export([enc_remote_storage_vol_upload_args/1, dec_remote_storage_vol_upload_args/2]).
-export([enc_remote_storage_vol_download_args/1, dec_remote_storage_vol_download_args/2]).
-export([enc_remote_domain_get_state_args/1, dec_remote_domain_get_state_args/2]).
-export([enc_remote_domain_get_state_ret/1, dec_remote_domain_get_state_ret/2]).
-export([enc_remote_domain_migrate_begin3_args/1, dec_remote_domain_migrate_begin3_args/2]).
-export([enc_remote_domain_migrate_begin3_ret/1, dec_remote_domain_migrate_begin3_ret/2]).
-export([enc_remote_domain_migrate_prepare3_args/1, dec_remote_domain_migrate_prepare3_args/2]).
-export([enc_remote_domain_migrate_prepare3_ret/1, dec_remote_domain_migrate_prepare3_ret/2]).
-export([enc_remote_domain_migrate_prepare_tunnel3_args/1, dec_remote_domain_migrate_prepare_tunnel3_args/2]).
-export([enc_remote_domain_migrate_prepare_tunnel3_ret/1, dec_remote_domain_migrate_prepare_tunnel3_ret/2]).
-export([enc_remote_domain_migrate_perform3_args/1, dec_remote_domain_migrate_perform3_args/2]).
-export([enc_remote_domain_migrate_perform3_ret/1, dec_remote_domain_migrate_perform3_ret/2]).
-export([enc_remote_domain_migrate_finish3_args/1, dec_remote_domain_migrate_finish3_args/2]).
-export([enc_remote_domain_migrate_finish3_ret/1, dec_remote_domain_migrate_finish3_ret/2]).
-export([enc_remote_domain_migrate_confirm3_args/1, dec_remote_domain_migrate_confirm3_args/2]).
-export([enc_remote_domain_event_control_error_msg/1, dec_remote_domain_event_control_error_msg/2]).
-export([enc_remote_domain_event_callback_control_error_msg/1, dec_remote_domain_event_callback_control_error_msg/2]).
-export([enc_remote_domain_get_control_info_args/1, dec_remote_domain_get_control_info_args/2]).
-export([enc_remote_domain_get_control_info_ret/1, dec_remote_domain_get_control_info_ret/2]).
-export([enc_remote_domain_open_graphics_args/1, dec_remote_domain_open_graphics_args/2]).
-export([enc_remote_domain_open_graphics_fd_args/1, dec_remote_domain_open_graphics_fd_args/2]).
-export([enc_remote_node_suspend_for_duration_args/1, dec_remote_node_suspend_for_duration_args/2]).
-export([enc_remote_domain_shutdown_flags_args/1, dec_remote_domain_shutdown_flags_args/2]).
-export([enc_remote_domain_get_disk_errors_args/1, dec_remote_domain_get_disk_errors_args/2]).
-export([enc_remote_domain_get_disk_errors_ret/1, dec_remote_domain_get_disk_errors_ret/2]).
-export([enc_remote_connect_list_all_domains_args/1, dec_remote_connect_list_all_domains_args/2]).
-export([enc_remote_connect_list_all_domains_ret/1, dec_remote_connect_list_all_domains_ret/2]).
-export([enc_remote_connect_list_all_storage_pools_args/1, dec_remote_connect_list_all_storage_pools_args/2]).
-export([enc_remote_connect_list_all_storage_pools_ret/1, dec_remote_connect_list_all_storage_pools_ret/2]).
-export([enc_remote_storage_pool_list_all_volumes_args/1, dec_remote_storage_pool_list_all_volumes_args/2]).
-export([enc_remote_storage_pool_list_all_volumes_ret/1, dec_remote_storage_pool_list_all_volumes_ret/2]).
-export([enc_remote_connect_list_all_networks_args/1, dec_remote_connect_list_all_networks_args/2]).
-export([enc_remote_connect_list_all_networks_ret/1, dec_remote_connect_list_all_networks_ret/2]).
-export([enc_remote_connect_list_all_interfaces_args/1, dec_remote_connect_list_all_interfaces_args/2]).
-export([enc_remote_connect_list_all_interfaces_ret/1, dec_remote_connect_list_all_interfaces_ret/2]).
-export([enc_remote_connect_list_all_node_devices_args/1, dec_remote_connect_list_all_node_devices_args/2]).
-export([enc_remote_connect_list_all_node_devices_ret/1, dec_remote_connect_list_all_node_devices_ret/2]).
-export([enc_remote_connect_list_all_nwfilters_args/1, dec_remote_connect_list_all_nwfilters_args/2]).
-export([enc_remote_connect_list_all_nwfilters_ret/1, dec_remote_connect_list_all_nwfilters_ret/2]).
-export([enc_remote_connect_list_all_secrets_args/1, dec_remote_connect_list_all_secrets_args/2]).
-export([enc_remote_connect_list_all_secrets_ret/1, dec_remote_connect_list_all_secrets_ret/2]).
-export([enc_remote_node_set_memory_parameters_args/1, dec_remote_node_set_memory_parameters_args/2]).
-export([enc_remote_node_get_memory_parameters_args/1, dec_remote_node_get_memory_parameters_args/2]).
-export([enc_remote_node_get_memory_parameters_ret/1, dec_remote_node_get_memory_parameters_ret/2]).
-export([enc_remote_node_get_cpu_map_args/1, dec_remote_node_get_cpu_map_args/2]).
-export([enc_remote_node_get_cpu_map_ret/1, dec_remote_node_get_cpu_map_ret/2]).
-export([enc_remote_domain_fstrim_args/1, dec_remote_domain_fstrim_args/2]).
-export([enc_remote_domain_get_time_args/1, dec_remote_domain_get_time_args/2]).
-export([enc_remote_domain_get_time_ret/1, dec_remote_domain_get_time_ret/2]).
-export([enc_remote_domain_set_time_args/1, dec_remote_domain_set_time_args/2]).
-export([enc_remote_domain_migrate_begin3_params_args/1, dec_remote_domain_migrate_begin3_params_args/2]).
-export([enc_remote_domain_migrate_begin3_params_ret/1, dec_remote_domain_migrate_begin3_params_ret/2]).
-export([enc_remote_domain_migrate_prepare3_params_args/1, dec_remote_domain_migrate_prepare3_params_args/2]).
-export([enc_remote_domain_migrate_prepare3_params_ret/1, dec_remote_domain_migrate_prepare3_params_ret/2]).
-export([enc_remote_domain_migrate_prepare_tunnel3_params_args/1, dec_remote_domain_migrate_prepare_tunnel3_params_args/2]).
-export([enc_remote_domain_migrate_prepare_tunnel3_params_ret/1, dec_remote_domain_migrate_prepare_tunnel3_params_ret/2]).
-export([enc_remote_domain_migrate_perform3_params_args/1, dec_remote_domain_migrate_perform3_params_args/2]).
-export([enc_remote_domain_migrate_perform3_params_ret/1, dec_remote_domain_migrate_perform3_params_ret/2]).
-export([enc_remote_domain_migrate_finish3_params_args/1, dec_remote_domain_migrate_finish3_params_args/2]).
-export([enc_remote_domain_migrate_finish3_params_ret/1, dec_remote_domain_migrate_finish3_params_ret/2]).
-export([enc_remote_domain_migrate_confirm3_params_args/1, dec_remote_domain_migrate_confirm3_params_args/2]).
-export([enc_remote_domain_event_device_removed_msg/1, dec_remote_domain_event_device_removed_msg/2]).
-export([enc_remote_domain_event_callback_device_removed_msg/1, dec_remote_domain_event_callback_device_removed_msg/2]).
-export([enc_remote_domain_event_block_job_2_msg/1, dec_remote_domain_event_block_job_2_msg/2]).
-export([enc_remote_domain_event_block_threshold_msg/1, dec_remote_domain_event_block_threshold_msg/2]).
-export([enc_remote_domain_event_callback_tunable_msg/1, dec_remote_domain_event_callback_tunable_msg/2]).
-export([enc_remote_domain_event_callback_device_added_msg/1, dec_remote_domain_event_callback_device_added_msg/2]).
-export([enc_remote_connect_event_connection_closed_msg/1, dec_remote_connect_event_connection_closed_msg/2]).
-export([enc_remote_connect_get_cpu_model_names_args/1, dec_remote_connect_get_cpu_model_names_args/2]).
-export([enc_remote_connect_get_cpu_model_names_ret/1, dec_remote_connect_get_cpu_model_names_ret/2]).
-export([enc_remote_connect_network_event_register_any_args/1, dec_remote_connect_network_event_register_any_args/2]).
-export([enc_remote_connect_network_event_register_any_ret/1, dec_remote_connect_network_event_register_any_ret/2]).
-export([enc_remote_connect_network_event_deregister_any_args/1, dec_remote_connect_network_event_deregister_any_args/2]).
-export([enc_remote_network_event_lifecycle_msg/1, dec_remote_network_event_lifecycle_msg/2]).
-export([enc_remote_connect_storage_pool_event_register_any_args/1, dec_remote_connect_storage_pool_event_register_any_args/2]).
-export([enc_remote_connect_storage_pool_event_register_any_ret/1, dec_remote_connect_storage_pool_event_register_any_ret/2]).
-export([enc_remote_connect_storage_pool_event_deregister_any_args/1, dec_remote_connect_storage_pool_event_deregister_any_args/2]).
-export([enc_remote_storage_pool_event_lifecycle_msg/1, dec_remote_storage_pool_event_lifecycle_msg/2]).
-export([enc_remote_storage_pool_event_refresh_msg/1, dec_remote_storage_pool_event_refresh_msg/2]).
-export([enc_remote_connect_node_device_event_register_any_args/1, dec_remote_connect_node_device_event_register_any_args/2]).
-export([enc_remote_connect_node_device_event_register_any_ret/1, dec_remote_connect_node_device_event_register_any_ret/2]).
-export([enc_remote_connect_node_device_event_deregister_any_args/1, dec_remote_connect_node_device_event_deregister_any_args/2]).
-export([enc_remote_node_device_event_lifecycle_msg/1, dec_remote_node_device_event_lifecycle_msg/2]).
-export([enc_remote_node_device_event_update_msg/1, dec_remote_node_device_event_update_msg/2]).
-export([enc_remote_domain_fsfreeze_args/1, dec_remote_domain_fsfreeze_args/2]).
-export([enc_remote_domain_fsfreeze_ret/1, dec_remote_domain_fsfreeze_ret/2]).
-export([enc_remote_domain_fsthaw_args/1, dec_remote_domain_fsthaw_args/2]).
-export([enc_remote_domain_fsthaw_ret/1, dec_remote_domain_fsthaw_ret/2]).
-export([enc_remote_node_get_free_pages_args/1, dec_remote_node_get_free_pages_args/2]).
-export([enc_remote_node_get_free_pages_ret/1, dec_remote_node_get_free_pages_ret/2]).
-export([enc_remote_node_alloc_pages_args/1, dec_remote_node_alloc_pages_args/2]).
-export([enc_remote_node_alloc_pages_ret/1, dec_remote_node_alloc_pages_ret/2]).
-export([enc_remote_network_dhcp_lease/1, dec_remote_network_dhcp_lease/2]).
-export([enc_remote_network_get_dhcp_leases_args/1, dec_remote_network_get_dhcp_leases_args/2]).
-export([enc_remote_network_get_dhcp_leases_ret/1, dec_remote_network_get_dhcp_leases_ret/2]).
-export([enc_remote_domain_stats_record/1, dec_remote_domain_stats_record/2]).
-export([enc_remote_connect_get_all_domain_stats_args/1, dec_remote_connect_get_all_domain_stats_args/2]).
-export([enc_remote_domain_event_callback_agent_lifecycle_msg/1, dec_remote_domain_event_callback_agent_lifecycle_msg/2]).
-export([enc_remote_connect_get_all_domain_stats_ret/1, dec_remote_connect_get_all_domain_stats_ret/2]).
-export([enc_remote_domain_fsinfo/1, dec_remote_domain_fsinfo/2]).
-export([enc_remote_domain_get_fsinfo_args/1, dec_remote_domain_get_fsinfo_args/2]).
-export([enc_remote_domain_get_fsinfo_ret/1, dec_remote_domain_get_fsinfo_ret/2]).
-export([enc_remote_domain_ip_addr/1, dec_remote_domain_ip_addr/2]).
-export([enc_remote_domain_interface/1, dec_remote_domain_interface/2]).
-export([enc_remote_domain_interface_addresses_args/1, dec_remote_domain_interface_addresses_args/2]).
-export([enc_remote_domain_interface_addresses_ret/1, dec_remote_domain_interface_addresses_ret/2]).
-export([enc_remote_domain_set_user_password_args/1, dec_remote_domain_set_user_password_args/2]).
-export([enc_remote_domain_rename_args/1, dec_remote_domain_rename_args/2]).
-export([enc_remote_domain_rename_ret/1, dec_remote_domain_rename_ret/2]).
-export([enc_remote_domain_event_callback_migration_iteration_msg/1, dec_remote_domain_event_callback_migration_iteration_msg/2]).
-export([enc_remote_domain_event_callback_job_completed_msg/1, dec_remote_domain_event_callback_job_completed_msg/2]).
-export([enc_remote_domain_migrate_start_post_copy_args/1, dec_remote_domain_migrate_start_post_copy_args/2]).
-export([enc_remote_domain_event_callback_device_removal_failed_msg/1, dec_remote_domain_event_callback_device_removal_failed_msg/2]).
-export([enc_remote_domain_get_guest_vcpus_args/1, dec_remote_domain_get_guest_vcpus_args/2]).
-export([enc_remote_domain_get_guest_vcpus_ret/1, dec_remote_domain_get_guest_vcpus_ret/2]).
-export([enc_remote_domain_set_guest_vcpus_args/1, dec_remote_domain_set_guest_vcpus_args/2]).
-export([enc_remote_domain_set_vcpu_args/1, dec_remote_domain_set_vcpu_args/2]).
-export([enc_remote_domain_event_callback_metadata_change_msg/1, dec_remote_domain_event_callback_metadata_change_msg/2]).
-export([enc_remote_connect_secret_event_register_any_args/1, dec_remote_connect_secret_event_register_any_args/2]).
-export([enc_remote_connect_secret_event_register_any_ret/1, dec_remote_connect_secret_event_register_any_ret/2]).
-export([enc_remote_connect_secret_event_deregister_any_args/1, dec_remote_connect_secret_event_deregister_any_args/2]).
-export([enc_remote_secret_event_lifecycle_msg/1, dec_remote_secret_event_lifecycle_msg/2]).
-export([enc_remote_secret_event_value_changed_msg/1, dec_remote_secret_event_value_changed_msg/2]).
-export([enc_remote_domain_set_block_threshold_args/1, dec_remote_domain_set_block_threshold_args/2]).
-export([enc_remote_domain_set_lifecycle_action_args/1, dec_remote_domain_set_lifecycle_action_args/2]).
-export([enc_remote_connect_compare_hypervisor_cpu_args/1, dec_remote_connect_compare_hypervisor_cpu_args/2]).
-export([enc_remote_connect_compare_hypervisor_cpu_ret/1, dec_remote_connect_compare_hypervisor_cpu_ret/2]).
-export([enc_remote_connect_baseline_hypervisor_cpu_args/1, dec_remote_connect_baseline_hypervisor_cpu_args/2]).
-export([enc_remote_connect_baseline_hypervisor_cpu_ret/1, dec_remote_connect_baseline_hypervisor_cpu_ret/2]).
-export([enc_remote_node_get_sev_info_args/1, dec_remote_node_get_sev_info_args/2]).
-export([enc_remote_node_get_sev_info_ret/1, dec_remote_node_get_sev_info_ret/2]).
-export([enc_remote_domain_get_launch_security_info_args/1, dec_remote_domain_get_launch_security_info_args/2]).
-export([enc_remote_domain_get_launch_security_info_ret/1, dec_remote_domain_get_launch_security_info_ret/2]).
-export([enc_remote_nwfilter_binding_lookup_by_port_dev_args/1, dec_remote_nwfilter_binding_lookup_by_port_dev_args/2]).
-export([enc_remote_nwfilter_binding_lookup_by_port_dev_ret/1, dec_remote_nwfilter_binding_lookup_by_port_dev_ret/2]).
-export([enc_remote_nwfilter_binding_create_xml_args/1, dec_remote_nwfilter_binding_create_xml_args/2]).
-export([enc_remote_nwfilter_binding_create_xml_ret/1, dec_remote_nwfilter_binding_create_xml_ret/2]).
-export([enc_remote_nwfilter_binding_delete_args/1, dec_remote_nwfilter_binding_delete_args/2]).
-export([enc_remote_nwfilter_binding_get_xml_desc_args/1, dec_remote_nwfilter_binding_get_xml_desc_args/2]).
-export([enc_remote_nwfilter_binding_get_xml_desc_ret/1, dec_remote_nwfilter_binding_get_xml_desc_ret/2]).
-export([enc_remote_connect_list_all_nwfilter_bindings_args/1, dec_remote_connect_list_all_nwfilter_bindings_args/2]).
-export([enc_remote_connect_list_all_nwfilter_bindings_ret/1, dec_remote_connect_list_all_nwfilter_bindings_ret/2]).
-export([enc_remote_connect_get_storage_pool_capabilities_args/1, dec_remote_connect_get_storage_pool_capabilities_args/2]).
-export([enc_remote_connect_get_storage_pool_capabilities_ret/1, dec_remote_connect_get_storage_pool_capabilities_ret/2]).
-export([enc_remote_network_list_all_ports_args/1, dec_remote_network_list_all_ports_args/2]).
-export([enc_remote_network_list_all_ports_ret/1, dec_remote_network_list_all_ports_ret/2]).
-export([enc_remote_network_port_lookup_by_uuid_args/1, dec_remote_network_port_lookup_by_uuid_args/2]).
-export([enc_remote_network_port_lookup_by_uuid_ret/1, dec_remote_network_port_lookup_by_uuid_ret/2]).
-export([enc_remote_network_port_create_xml_args/1, dec_remote_network_port_create_xml_args/2]).
-export([enc_remote_network_port_create_xml_ret/1, dec_remote_network_port_create_xml_ret/2]).
-export([enc_remote_network_port_set_parameters_args/1, dec_remote_network_port_set_parameters_args/2]).
-export([enc_remote_network_port_get_parameters_args/1, dec_remote_network_port_get_parameters_args/2]).
-export([enc_remote_network_port_get_parameters_ret/1, dec_remote_network_port_get_parameters_ret/2]).
-export([enc_remote_network_port_get_xml_desc_args/1, dec_remote_network_port_get_xml_desc_args/2]).
-export([enc_remote_network_port_get_xml_desc_ret/1, dec_remote_network_port_get_xml_desc_ret/2]).
-export([enc_remote_network_port_delete_args/1, dec_remote_network_port_delete_args/2]).
-export([enc_remote_domain_checkpoint_create_xml_args/1, dec_remote_domain_checkpoint_create_xml_args/2]).
-export([enc_remote_domain_checkpoint_create_xml_ret/1, dec_remote_domain_checkpoint_create_xml_ret/2]).
-export([enc_remote_domain_checkpoint_get_xml_desc_args/1, dec_remote_domain_checkpoint_get_xml_desc_args/2]).
-export([enc_remote_domain_checkpoint_get_xml_desc_ret/1, dec_remote_domain_checkpoint_get_xml_desc_ret/2]).
-export([enc_remote_domain_list_all_checkpoints_args/1, dec_remote_domain_list_all_checkpoints_args/2]).
-export([enc_remote_domain_list_all_checkpoints_ret/1, dec_remote_domain_list_all_checkpoints_ret/2]).
-export([enc_remote_domain_checkpoint_list_all_children_args/1, dec_remote_domain_checkpoint_list_all_children_args/2]).
-export([enc_remote_domain_checkpoint_list_all_children_ret/1, dec_remote_domain_checkpoint_list_all_children_ret/2]).
-export([enc_remote_domain_checkpoint_lookup_by_name_args/1, dec_remote_domain_checkpoint_lookup_by_name_args/2]).
-export([enc_remote_domain_checkpoint_lookup_by_name_ret/1, dec_remote_domain_checkpoint_lookup_by_name_ret/2]).
-export([enc_remote_domain_checkpoint_get_parent_args/1, dec_remote_domain_checkpoint_get_parent_args/2]).
-export([enc_remote_domain_checkpoint_get_parent_ret/1, dec_remote_domain_checkpoint_get_parent_ret/2]).
-export([enc_remote_domain_checkpoint_delete_args/1, dec_remote_domain_checkpoint_delete_args/2]).
-export([enc_remote_domain_get_guest_info_args/1, dec_remote_domain_get_guest_info_args/2]).
-export([enc_remote_domain_get_guest_info_ret/1, dec_remote_domain_get_guest_info_ret/2]).
-export([enc_remote_connect_set_identity_args/1, dec_remote_connect_set_identity_args/2]).
-export([enc_remote_domain_agent_set_response_timeout_args/1, dec_remote_domain_agent_set_response_timeout_args/2]).
-export([enc_remote_domain_agent_set_response_timeout_ret/1, dec_remote_domain_agent_set_response_timeout_ret/2]).
-export([enc_remote_domain_backup_begin_args/1, dec_remote_domain_backup_begin_args/2]).
-export([enc_remote_domain_backup_get_xml_desc_args/1, dec_remote_domain_backup_get_xml_desc_args/2]).
-export([enc_remote_domain_backup_get_xml_desc_ret/1, dec_remote_domain_backup_get_xml_desc_ret/2]).
-export([enc_remote_procedure/1, dec_remote_procedure/2]).

enc_remote_nonnull_string(_1) ->
    begin
        _2 = io_list_len(_1),
        if
            _2 =< 4194304 ->
                [<<_2:32/unsigned>>, _1, enc_align(_2)];
            true ->
                exit({xdr, limit})
        end
    end.

dec_remote_nonnull_string(_1, _2) ->
    begin
        <<_:_2/binary,_3:32/unsigned,_/binary>> = _1,
        if
            _3 > 4194304 ->
                exit({xdr, limit});
            true ->
                _4 = _2 + 4,
                <<_:_4/binary,_5:_3/binary,_/binary>> = _1,
                {_5, _4 + align(_3)}
        end
    end.

enc_remote_string(_1) ->
    case _1 of
        void ->
            <<0:32>>;
        _ ->
            [<<1:32>>, enc_remote_nonnull_string(_1)]
    end.

dec_remote_string(_1, _2) ->
    begin
        <<_:_2/binary,_3:32/unsigned,_/binary>> = _1,
        _4 = _2 + 4,
        if
            _3 == 0 ->
                {void, _4};
            _3 == 1 ->
                dec_remote_nonnull_string(_1, _4)
        end
    end.

enc_remote_uuid(_1) ->
    case io_list_len(_1) of
        16 ->
            _1;
        _ ->
            exit({xdr, limit})
    end.

dec_remote_uuid(_1, _2) ->
    begin
        <<_:_2/binary,_3:16/binary,_/binary>> = _1,
        {_3, _2 + 16}
    end.

enc_remote_nonnull_domain(_1) ->
    case _1 of
        {_4, _3, _2} ->
            [enc_remote_nonnull_string(_4),
             enc_remote_uuid(_3),
             <<_2:32>>]
    end.

dec_remote_nonnull_domain(_1, _2) ->
    begin
        {_3, _4} = dec_remote_nonnull_string(_1, _2),
        {_5, _6} = dec_remote_uuid(_1, _4),
        begin
            <<_:_6/binary,_7:32/signed,_/binary>> = _1,
            _8 = _6 + 4
        end,
        {{_3, _5, _7}, _8}
    end.

enc_remote_nonnull_network(_1) ->
    case _1 of
        {_3, _2} ->
            [enc_remote_nonnull_string(_3), enc_remote_uuid(_2)]
    end.

dec_remote_nonnull_network(_1, _2) ->
    begin
        {_3, _4} = dec_remote_nonnull_string(_1, _2),
        {_5, _6} = dec_remote_uuid(_1, _4),
        {{_3, _5}, _6}
    end.

enc_remote_nonnull_network_port(_1) ->
    case _1 of
        {_3, _2} ->
            [enc_remote_nonnull_network(_3), enc_remote_uuid(_2)]
    end.

dec_remote_nonnull_network_port(_1, _2) ->
    begin
        {_3, _4} = dec_remote_nonnull_network(_1, _2),
        {_5, _6} = dec_remote_uuid(_1, _4),
        {{_3, _5}, _6}
    end.

enc_remote_nonnull_nwfilter(_1) ->
    case _1 of
        {_3, _2} ->
            [enc_remote_nonnull_string(_3), enc_remote_uuid(_2)]
    end.

dec_remote_nonnull_nwfilter(_1, _2) ->
    begin
        {_3, _4} = dec_remote_nonnull_string(_1, _2),
        {_5, _6} = dec_remote_uuid(_1, _4),
        {{_3, _5}, _6}
    end.

enc_remote_nonnull_nwfilter_binding(_1) ->
    case _1 of
        {_3, _2} ->
            [enc_remote_nonnull_string(_3),
             enc_remote_nonnull_string(_2)]
    end.

dec_remote_nonnull_nwfilter_binding(_1, _2) ->
    begin
        {_3, _4} = dec_remote_nonnull_string(_1, _2),
        {_5, _6} = dec_remote_nonnull_string(_1, _4),
        {{_3, _5}, _6}
    end.

enc_remote_nonnull_interface(_1) ->
    case _1 of
        {_3, _2} ->
            [enc_remote_nonnull_string(_3),
             enc_remote_nonnull_string(_2)]
    end.

dec_remote_nonnull_interface(_1, _2) ->
    begin
        {_3, _4} = dec_remote_nonnull_string(_1, _2),
        {_5, _6} = dec_remote_nonnull_string(_1, _4),
        {{_3, _5}, _6}
    end.

enc_remote_nonnull_storage_pool(_1) ->
    case _1 of
        {_3, _2} ->
            [enc_remote_nonnull_string(_3), enc_remote_uuid(_2)]
    end.

dec_remote_nonnull_storage_pool(_1, _2) ->
    begin
        {_3, _4} = dec_remote_nonnull_string(_1, _2),
        {_5, _6} = dec_remote_uuid(_1, _4),
        {{_3, _5}, _6}
    end.

enc_remote_nonnull_storage_vol(_1) ->
    case _1 of
        {_4, _3, _2} ->
            [enc_remote_nonnull_string(_4),
             enc_remote_nonnull_string(_3),
             enc_remote_nonnull_string(_2)]
    end.

dec_remote_nonnull_storage_vol(_1, _2) ->
    begin
        {_3, _4} = dec_remote_nonnull_string(_1, _2),
        {_5, _6} = dec_remote_nonnull_string(_1, _4),
        {_7, _8} = dec_remote_nonnull_string(_1, _6),
        {{_3, _5, _7}, _8}
    end.

enc_remote_nonnull_node_device(_1) ->
    case _1 of
        {_2} ->
            [enc_remote_nonnull_string(_2)]
    end.

dec_remote_nonnull_node_device(_1, _2) ->
    begin
        {_3, _4} = dec_remote_nonnull_string(_1, _2),
        {{_3}, _4}
    end.

enc_remote_nonnull_secret(_1) ->
    case _1 of
        {_4, _3, _2} ->
            [enc_remote_uuid(_4),
             <<_3:32>>,
             enc_remote_nonnull_string(_2)]
    end.

dec_remote_nonnull_secret(_1, _2) ->
    begin
        {_3, _4} = dec_remote_uuid(_1, _2),
        begin
            <<_:_4/binary,_5:32/signed,_/binary>> = _1,
            _6 = _4 + 4
        end,
        {_7, _8} = dec_remote_nonnull_string(_1, _6),
        {{_3, _5, _7}, _8}
    end.

enc_remote_nonnull_domain_checkpoint(_1) ->
    case _1 of
        {_3, _2} ->
            [enc_remote_nonnull_string(_3),
             enc_remote_nonnull_domain(_2)]
    end.

dec_remote_nonnull_domain_checkpoint(_1, _2) ->
    begin
        {_3, _4} = dec_remote_nonnull_string(_1, _2),
        {_5, _6} = dec_remote_nonnull_domain(_1, _4),
        {{_3, _5}, _6}
    end.

enc_remote_nonnull_domain_snapshot(_1) ->
    case _1 of
        {_3, _2} ->
            [enc_remote_nonnull_string(_3),
             enc_remote_nonnull_domain(_2)]
    end.

dec_remote_nonnull_domain_snapshot(_1, _2) ->
    begin
        {_3, _4} = dec_remote_nonnull_string(_1, _2),
        {_5, _6} = dec_remote_nonnull_domain(_1, _4),
        {{_3, _5}, _6}
    end.

enc_remote_domain(_1) ->
    case _1 of
        void ->
            <<0:32>>;
        _ ->
            [<<1:32>>, enc_remote_nonnull_domain(_1)]
    end.

dec_remote_domain(_1, _2) ->
    begin
        <<_:_2/binary,_3:32/unsigned,_/binary>> = _1,
        _4 = _2 + 4,
        if
            _3 == 0 ->
                {void, _4};
            _3 == 1 ->
                dec_remote_nonnull_domain(_1, _4)
        end
    end.

enc_remote_network(_1) ->
    case _1 of
        void ->
            <<0:32>>;
        _ ->
            [<<1:32>>, enc_remote_nonnull_network(_1)]
    end.

dec_remote_network(_1, _2) ->
    begin
        <<_:_2/binary,_3:32/unsigned,_/binary>> = _1,
        _4 = _2 + 4,
        if
            _3 == 0 ->
                {void, _4};
            _3 == 1 ->
                dec_remote_nonnull_network(_1, _4)
        end
    end.

enc_remote_network_port(_1) ->
    case _1 of
        void ->
            <<0:32>>;
        _ ->
            [<<1:32>>, enc_remote_nonnull_network_port(_1)]
    end.

dec_remote_network_port(_1, _2) ->
    begin
        <<_:_2/binary,_3:32/unsigned,_/binary>> = _1,
        _4 = _2 + 4,
        if
            _3 == 0 ->
                {void, _4};
            _3 == 1 ->
                dec_remote_nonnull_network_port(_1, _4)
        end
    end.

enc_remote_nwfilter(_1) ->
    case _1 of
        void ->
            <<0:32>>;
        _ ->
            [<<1:32>>, enc_remote_nonnull_nwfilter(_1)]
    end.

dec_remote_nwfilter(_1, _2) ->
    begin
        <<_:_2/binary,_3:32/unsigned,_/binary>> = _1,
        _4 = _2 + 4,
        if
            _3 == 0 ->
                {void, _4};
            _3 == 1 ->
                dec_remote_nonnull_nwfilter(_1, _4)
        end
    end.

enc_remote_nwfilter_binding(_1) ->
    case _1 of
        void ->
            <<0:32>>;
        _ ->
            [<<1:32>>, enc_remote_nonnull_nwfilter_binding(_1)]
    end.

dec_remote_nwfilter_binding(_1, _2) ->
    begin
        <<_:_2/binary,_3:32/unsigned,_/binary>> = _1,
        _4 = _2 + 4,
        if
            _3 == 0 ->
                {void, _4};
            _3 == 1 ->
                dec_remote_nonnull_nwfilter_binding(_1, _4)
        end
    end.

enc_remote_storage_pool(_1) ->
    case _1 of
        void ->
            <<0:32>>;
        _ ->
            [<<1:32>>, enc_remote_nonnull_storage_pool(_1)]
    end.

dec_remote_storage_pool(_1, _2) ->
    begin
        <<_:_2/binary,_3:32/unsigned,_/binary>> = _1,
        _4 = _2 + 4,
        if
            _3 == 0 ->
                {void, _4};
            _3 == 1 ->
                dec_remote_nonnull_storage_pool(_1, _4)
        end
    end.

enc_remote_storage_vol(_1) ->
    case _1 of
        void ->
            <<0:32>>;
        _ ->
            [<<1:32>>, enc_remote_nonnull_storage_vol(_1)]
    end.

dec_remote_storage_vol(_1, _2) ->
    begin
        <<_:_2/binary,_3:32/unsigned,_/binary>> = _1,
        _4 = _2 + 4,
        if
            _3 == 0 ->
                {void, _4};
            _3 == 1 ->
                dec_remote_nonnull_storage_vol(_1, _4)
        end
    end.

enc_remote_node_device(_1) ->
    case _1 of
        void ->
            <<0:32>>;
        _ ->
            [<<1:32>>, enc_remote_nonnull_node_device(_1)]
    end.

dec_remote_node_device(_1, _2) ->
    begin
        <<_:_2/binary,_3:32/unsigned,_/binary>> = _1,
        _4 = _2 + 4,
        if
            _3 == 0 ->
                {void, _4};
            _3 == 1 ->
                dec_remote_nonnull_node_device(_1, _4)
        end
    end.

enc_remote_secret(_1) ->
    case _1 of
        void ->
            <<0:32>>;
        _ ->
            [<<1:32>>, enc_remote_nonnull_secret(_1)]
    end.

dec_remote_secret(_1, _2) ->
    begin
        <<_:_2/binary,_3:32/unsigned,_/binary>> = _1,
        _4 = _2 + 4,
        if
            _3 == 0 ->
                {void, _4};
            _3 == 1 ->
                dec_remote_nonnull_secret(_1, _4)
        end
    end.

enc_remote_error(_1) ->
    case _1 of
        {_12, _11, _10, _9, _8, _7, _6, _5, _4, _3, _2} ->
            [<<_12:32>>,
             <<_11:32>>,
             enc_remote_string(_10),
             <<_9:32>>,
             enc_remote_domain(_8),
             enc_remote_string(_7),
             enc_remote_string(_6),
             enc_remote_string(_5),
             <<_4:32>>,
             <<_3:32>>,
             enc_remote_network(_2)]
    end.

dec_remote_error(_1, _2) ->
    begin
        begin
            <<_:_2/binary,_3:32/signed,_/binary>> = _1,
            _4 = _2 + 4
        end,
        begin
            <<_:_4/binary,_5:32/signed,_/binary>> = _1,
            _6 = _4 + 4
        end,
        {_7, _8} = dec_remote_string(_1, _6),
        begin
            <<_:_8/binary,_9:32/signed,_/binary>> = _1,
            _10 = _8 + 4
        end,
        {_11, _12} = dec_remote_domain(_1, _10),
        {_13, _14} = dec_remote_string(_1, _12),
        {_15, _16} = dec_remote_string(_1, _14),
        {_17, _18} = dec_remote_string(_1, _16),
        begin
            <<_:_18/binary,_19:32/signed,_/binary>> = _1,
            _20 = _18 + 4
        end,
        begin
            <<_:_20/binary,_21:32/signed,_/binary>> = _1,
            _22 = _20 + 4
        end,
        {_23, _24} = dec_remote_network(_1, _22),
        {{_3, _5, _7, _9, _11, _13, _15, _17, _19, _21, _23}, _24}
    end.

enc_remote_auth_type(_1) ->
    case _1 of
        'REMOTE_AUTH_NONE' ->
            <<0:32>>;
        'REMOTE_AUTH_SASL' ->
            <<1:32>>;
        'REMOTE_AUTH_POLKIT' ->
            <<2:32>>
    end.

dec_remote_auth_type(_1, _2) ->
    begin
        <<_:_2/binary,_3:32,_/binary>> = _1,
        case _3 of
            0 ->
                {'REMOTE_AUTH_NONE', _2 + 4};
            1 ->
                {'REMOTE_AUTH_SASL', _2 + 4};
            2 ->
                {'REMOTE_AUTH_POLKIT', _2 + 4}
        end
    end.

dec_remote_auth_type_i2a(_4) ->
    case _4 of
        0 ->
            'REMOTE_AUTH_NONE';
        1 ->
            'REMOTE_AUTH_SASL';
        2 ->
            'REMOTE_AUTH_POLKIT'
    end.

enc_remote_vcpu_info(_1) ->
    case _1 of
        {_5, _4, _3, _2} ->
            [<<_5:32>>, <<_4:32>>, <<_3:64>>, <<_2:32>>]
    end.

dec_remote_vcpu_info(_1, _2) ->
    begin
        begin
            <<_:_2/binary,_3:32/unsigned,_/binary>> = _1,
            _4 = _2 + 4
        end,
        begin
            <<_:_4/binary,_5:32/signed,_/binary>> = _1,
            _6 = _4 + 4
        end,
        begin
            <<_:_6/binary,_7:64/unsigned,_/binary>> = _1,
            _8 = _6 + 8
        end,
        begin
            <<_:_8/binary,_9:32/signed,_/binary>> = _1,
            _10 = _8 + 4
        end,
        {{_3, _5, _7, _9}, _10}
    end.

enc_remote_typed_param_value(_1) ->
    case _1 of
        {_2, _3} ->
            [<<_2:32>>,
             case _2 of
                 1 ->
                     <<_3:32>>;
                 2 ->
                     <<_3:32>>;
                 3 ->
                     <<_3:64>>;
                 4 ->
                     <<_3:64>>;
                 5 ->
                     <<_3:64/float>>;
                 6 ->
                     <<_3:32>>;
                 7 ->
                     enc_remote_nonnull_string(_3)
             end]
    end.

dec_remote_typed_param_value(_1, _2) ->
    begin
        <<_:_2/binary,_3:32/signed,_/binary>> = _1,
        _6 = _2 + 4,
        case _3 of
            1 ->
                begin
                    <<_:_6/binary,_4:32/signed,_/binary>> = _1,
                    _5 = _6 + 4
                end,
                {{1, _4}, _5};
            2 ->
                begin
                    <<_:_6/binary,_4:32/unsigned,_/binary>> = _1,
                    _5 = _6 + 4
                end,
                {{2, _4}, _5};
            3 ->
                begin
                    <<_:_6/binary,_4:64/signed,_/binary>> = _1,
                    _5 = _6 + 8
                end,
                {{3, _4}, _5};
            4 ->
                begin
                    <<_:_6/binary,_4:64/unsigned,_/binary>> = _1,
                    _5 = _6 + 8
                end,
                {{4, _4}, _5};
            5 ->
                begin
                    <<_:_6/binary,_4:64/float,_/binary>> = _1,
                    _5 = _6 + 8
                end,
                {{5, _4}, _5};
            6 ->
                begin
                    <<_:_6/binary,_4:32/signed,_/binary>> = _1,
                    _5 = _6 + 4
                end,
                {{6, _4}, _5};
            7 ->
                {_4, _5} = dec_remote_nonnull_string(_1, _6),
                {{7, _4}, _5}
        end
    end.

enc_remote_typed_param(_1) ->
    case _1 of
        {_3, _2} ->
            [enc_remote_nonnull_string(_3),
             enc_remote_typed_param_value(_2)]
    end.

dec_remote_typed_param(_1, _2) ->
    begin
        {_3, _4} = dec_remote_nonnull_string(_1, _2),
        {_5, _6} = dec_remote_typed_param_value(_1, _4),
        {{_3, _5}, _6}
    end.

enc_remote_node_get_cpu_stats(_1) ->
    case _1 of
        {_3, _2} ->
            [enc_remote_nonnull_string(_3), <<_2:64>>]
    end.

dec_remote_node_get_cpu_stats(_1, _2) ->
    begin
        {_3, _4} = dec_remote_nonnull_string(_1, _2),
        begin
            <<_:_4/binary,_5:64/unsigned,_/binary>> = _1,
            _6 = _4 + 8
        end,
        {{_3, _5}, _6}
    end.

enc_remote_node_get_memory_stats(_1) ->
    case _1 of
        {_3, _2} ->
            [enc_remote_nonnull_string(_3), <<_2:64>>]
    end.

dec_remote_node_get_memory_stats(_1, _2) ->
    begin
        {_3, _4} = dec_remote_nonnull_string(_1, _2),
        begin
            <<_:_4/binary,_5:64/unsigned,_/binary>> = _1,
            _6 = _4 + 8
        end,
        {{_3, _5}, _6}
    end.

enc_remote_domain_disk_error(_1) ->
    case _1 of
        {_3, _2} ->
            [enc_remote_nonnull_string(_3), <<_2:32>>]
    end.

dec_remote_domain_disk_error(_1, _2) ->
    begin
        {_3, _4} = dec_remote_nonnull_string(_1, _2),
        begin
            <<_:_4/binary,_5:32/signed,_/binary>> = _1,
            _6 = _4 + 4
        end,
        {{_3, _5}, _6}
    end.

enc_remote_connect_open_args(_1) ->
    case _1 of
        {_3, _2} ->
            [enc_remote_string(_3), <<_2:32>>]
    end.

dec_remote_connect_open_args(_1, _2) ->
    begin
        {_3, _4} = dec_remote_string(_1, _2),
        begin
            <<_:_4/binary,_5:32/unsigned,_/binary>> = _1,
            _6 = _4 + 4
        end,
        {{_3, _5}, _6}
    end.

enc_remote_connect_supports_feature_args(_1) ->
    case _1 of
        {_2} ->
            [<<_2:32>>]
    end.

dec_remote_connect_supports_feature_args(_1, _2) ->
    begin
        begin
            <<_:_2/binary,_3:32/signed,_/binary>> = _1,
            _4 = _2 + 4
        end,
        {{_3}, _4}
    end.

enc_remote_connect_supports_feature_ret(_1) ->
    case _1 of
        {_2} ->
            [<<_2:32>>]
    end.

dec_remote_connect_supports_feature_ret(_1, _2) ->
    begin
        begin
            <<_:_2/binary,_3:32/signed,_/binary>> = _1,
            _4 = _2 + 4
        end,
        {{_3}, _4}
    end.

enc_remote_connect_get_type_ret(_1) ->
    case _1 of
        {_2} ->
            [enc_remote_nonnull_string(_2)]
    end.

dec_remote_connect_get_type_ret(_1, _2) ->
    begin
        {_3, _4} = dec_remote_nonnull_string(_1, _2),
        {{_3}, _4}
    end.

enc_remote_connect_get_version_ret(_1) ->
    case _1 of
        {_2} ->
            [<<_2:64>>]
    end.

dec_remote_connect_get_version_ret(_1, _2) ->
    begin
        begin
            <<_:_2/binary,_3:64/unsigned,_/binary>> = _1,
            _4 = _2 + 8
        end,
        {{_3}, _4}
    end.

enc_remote_connect_get_lib_version_ret(_1) ->
    case _1 of
        {_2} ->
            [<<_2:64>>]
    end.

dec_remote_connect_get_lib_version_ret(_1, _2) ->
    begin
        begin
            <<_:_2/binary,_3:64/unsigned,_/binary>> = _1,
            _4 = _2 + 8
        end,
        {{_3}, _4}
    end.

enc_remote_connect_get_hostname_ret(_1) ->
    case _1 of
        {_2} ->
            [enc_remote_nonnull_string(_2)]
    end.

dec_remote_connect_get_hostname_ret(_1, _2) ->
    begin
        {_3, _4} = dec_remote_nonnull_string(_1, _2),
        {{_3}, _4}
    end.

enc_remote_connect_get_sysinfo_args(_1) ->
    case _1 of
        {_2} ->
            [<<_2:32>>]
    end.

dec_remote_connect_get_sysinfo_args(_1, _2) ->
    begin
        begin
            <<_:_2/binary,_3:32/unsigned,_/binary>> = _1,
            _4 = _2 + 4
        end,
        {{_3}, _4}
    end.

enc_remote_connect_get_sysinfo_ret(_1) ->
    case _1 of
        {_2} ->
            [enc_remote_nonnull_string(_2)]
    end.

dec_remote_connect_get_sysinfo_ret(_1, _2) ->
    begin
        {_3, _4} = dec_remote_nonnull_string(_1, _2),
        {{_3}, _4}
    end.

enc_remote_connect_get_uri_ret(_1) ->
    case _1 of
        {_2} ->
            [enc_remote_nonnull_string(_2)]
    end.

dec_remote_connect_get_uri_ret(_1, _2) ->
    begin
        {_3, _4} = dec_remote_nonnull_string(_1, _2),
        {{_3}, _4}
    end.

enc_remote_connect_get_max_vcpus_args(_1) ->
    case _1 of
        {_2} ->
            [enc_remote_string(_2)]
    end.

dec_remote_connect_get_max_vcpus_args(_1, _2) ->
    begin
        {_3, _4} = dec_remote_string(_1, _2),
        {{_3}, _4}
    end.

enc_remote_connect_get_max_vcpus_ret(_1) ->
    case _1 of
        {_2} ->
            [<<_2:32>>]
    end.

dec_remote_connect_get_max_vcpus_ret(_1, _2) ->
    begin
        begin
            <<_:_2/binary,_3:32/signed,_/binary>> = _1,
            _4 = _2 + 4
        end,
        {{_3}, _4}
    end.

enc_remote_node_get_info_ret(_1) ->
    case _1 of
        {_9, _8, _7, _6, _5, _4, _3, _2} ->
            [if
                 length(_9) == 32 ->
                     lists:map(fun(_10) ->
                                      <<_10:32>>
                               end,
                               _9)
             end,
             <<_8:64>>,
             <<_7:32>>,
             <<_6:32>>,
             <<_5:32>>,
             <<_4:32>>,
             <<_3:32>>,
             <<_2:32>>]
    end.

dec_remote_node_get_info_ret(_1, _2) ->
    begin
        {_3, _4} =
            map_elem(fun(_5, _6) ->
                            begin
                                <<_:_6/binary,_7:32/signed,_/binary>> =
                                    _5,
                                {_7, _6 + 4}
                            end
                     end,
                     _1, _2, infinity, 32),
        begin
            <<_:_4/binary,_8:64/unsigned,_/binary>> = _1,
            _9 = _4 + 8
        end,
        begin
            <<_:_9/binary,_10:32/signed,_/binary>> = _1,
            _11 = _9 + 4
        end,
        begin
            <<_:_11/binary,_12:32/signed,_/binary>> = _1,
            _13 = _11 + 4
        end,
        begin
            <<_:_13/binary,_14:32/signed,_/binary>> = _1,
            _15 = _13 + 4
        end,
        begin
            <<_:_15/binary,_16:32/signed,_/binary>> = _1,
            _17 = _15 + 4
        end,
        begin
            <<_:_17/binary,_18:32/signed,_/binary>> = _1,
            _19 = _17 + 4
        end,
        begin
            <<_:_19/binary,_20:32/signed,_/binary>> = _1,
            _21 = _19 + 4
        end,
        {{_3, _8, _10, _12, _14, _16, _18, _20}, _21}
    end.

enc_remote_connect_get_capabilities_ret(_1) ->
    case _1 of
        {_2} ->
            [enc_remote_nonnull_string(_2)]
    end.

dec_remote_connect_get_capabilities_ret(_1, _2) ->
    begin
        {_3, _4} = dec_remote_nonnull_string(_1, _2),
        {{_3}, _4}
    end.

enc_remote_connect_get_domain_capabilities_args(_1) ->
    case _1 of
        {_6, _5, _4, _3, _2} ->
            [enc_remote_string(_6),
             enc_remote_string(_5),
             enc_remote_string(_4),
             enc_remote_string(_3),
             <<_2:32>>]
    end.

dec_remote_connect_get_domain_capabilities_args(_1, _2) ->
    begin
        {_3, _4} = dec_remote_string(_1, _2),
        {_5, _6} = dec_remote_string(_1, _4),
        {_7, _8} = dec_remote_string(_1, _6),
        {_9, _10} = dec_remote_string(_1, _8),
        begin
            <<_:_10/binary,_11:32/unsigned,_/binary>> = _1,
            _12 = _10 + 4
        end,
        {{_3, _5, _7, _9, _11}, _12}
    end.

enc_remote_connect_get_domain_capabilities_ret(_1) ->
    case _1 of
        {_2} ->
            [enc_remote_nonnull_string(_2)]
    end.

dec_remote_connect_get_domain_capabilities_ret(_1, _2) ->
    begin
        {_3, _4} = dec_remote_nonnull_string(_1, _2),
        {{_3}, _4}
    end.

enc_remote_node_get_cpu_stats_args(_1) ->
    case _1 of
        {_4, _3, _2} ->
            [<<_4:32>>, <<_3:32>>, <<_2:32>>]
    end.

dec_remote_node_get_cpu_stats_args(_1, _2) ->
    begin
        begin
            <<_:_2/binary,_3:32/signed,_/binary>> = _1,
            _4 = _2 + 4
        end,
        begin
            <<_:_4/binary,_5:32/signed,_/binary>> = _1,
            _6 = _4 + 4
        end,
        begin
            <<_:_6/binary,_7:32/unsigned,_/binary>> = _1,
            _8 = _6 + 4
        end,
        {{_3, _5, _7}, _8}
    end.

enc_remote_node_get_cpu_stats_ret(_1) ->
    case _1 of
        {_3, _2} ->
            [begin
                 _5 = length(_3),
                 if
                     _5 =< 16 ->
                         [<<_5:32/unsigned>>,
                          lists:map(fun(_4) ->
                                           enc_remote_node_get_cpu_stats(_4)
                                    end,
                                    _3)];
                     true ->
                         exit({xdr, limit})
                 end
             end,
             <<_2:32>>]
    end.

dec_remote_node_get_cpu_stats_ret(_1, _2) ->
    begin
        {_3, _4} =
            begin
                <<_:_2/binary,_5:32/unsigned,_/binary>> = _1,
                map_elem(fun(_6, _7) ->
                                dec_remote_node_get_cpu_stats(_6, _7)
                         end,
                         _1,
                         _2 + 4,
                         16, _5)
            end,
        begin
            <<_:_4/binary,_8:32/signed,_/binary>> = _1,
            _9 = _4 + 4
        end,
        {{_3, _8}, _9}
    end.

enc_remote_node_get_memory_stats_args(_1) ->
    case _1 of
        {_4, _3, _2} ->
            [<<_4:32>>, <<_3:32>>, <<_2:32>>]
    end.

dec_remote_node_get_memory_stats_args(_1, _2) ->
    begin
        begin
            <<_:_2/binary,_3:32/signed,_/binary>> = _1,
            _4 = _2 + 4
        end,
        begin
            <<_:_4/binary,_5:32/signed,_/binary>> = _1,
            _6 = _4 + 4
        end,
        begin
            <<_:_6/binary,_7:32/unsigned,_/binary>> = _1,
            _8 = _6 + 4
        end,
        {{_3, _5, _7}, _8}
    end.

enc_remote_node_get_memory_stats_ret(_1) ->
    case _1 of
        {_3, _2} ->
            [begin
                 _5 = length(_3),
                 if
                     _5 =< 16 ->
                         [<<_5:32/unsigned>>,
                          lists:map(fun(_4) ->
                                           enc_remote_node_get_memory_stats(_4)
                                    end,
                                    _3)];
                     true ->
                         exit({xdr, limit})
                 end
             end,
             <<_2:32>>]
    end.

dec_remote_node_get_memory_stats_ret(_1, _2) ->
    begin
        {_3, _4} =
            begin
                <<_:_2/binary,_5:32/unsigned,_/binary>> = _1,
                map_elem(fun(_6, _7) ->
                                dec_remote_node_get_memory_stats(_6, _7)
                         end,
                         _1,
                         _2 + 4,
                         16, _5)
            end,
        begin
            <<_:_4/binary,_8:32/signed,_/binary>> = _1,
            _9 = _4 + 4
        end,
        {{_3, _8}, _9}
    end.

enc_remote_node_get_cells_free_memory_args(_1) ->
    case _1 of
        {_3, _2} ->
            [<<_3:32>>, <<_2:32>>]
    end.

dec_remote_node_get_cells_free_memory_args(_1, _2) ->
    begin
        begin
            <<_:_2/binary,_3:32/signed,_/binary>> = _1,
            _4 = _2 + 4
        end,
        begin
            <<_:_4/binary,_5:32/signed,_/binary>> = _1,
            _6 = _4 + 4
        end,
        {{_3, _5}, _6}
    end.

enc_remote_node_get_cells_free_memory_ret(_1) ->
    case _1 of
        {_2} ->
            [begin
                 _4 = length(_2),
                 if
                     _4 =< 1024 ->
                         [<<_4:32/unsigned>>,
                          lists:map(fun(_3) ->
                                           <<_3:64>>
                                    end,
                                    _2)];
                     true ->
                         exit({xdr, limit})
                 end
             end]
    end.

dec_remote_node_get_cells_free_memory_ret(_1, _2) ->
    begin
        {_3, _4} =
            begin
                <<_:_2/binary,_5:32/unsigned,_/binary>> = _1,
                map_elem(fun(_6, _7) ->
                                begin
                                    <<_:_7/binary,
                                      _8:64/unsigned,
                                      _/binary>> =
                                        _6,
                                    {_8, _7 + 8}
                                end
                         end,
                         _1,
                         _2 + 4,
                         1024, _5)
            end,
        {{_3}, _4}
    end.

enc_remote_node_get_free_memory_ret(_1) ->
    case _1 of
        {_2} ->
            [<<_2:64>>]
    end.

dec_remote_node_get_free_memory_ret(_1, _2) ->
    begin
        begin
            <<_:_2/binary,_3:64/unsigned,_/binary>> = _1,
            _4 = _2 + 8
        end,
        {{_3}, _4}
    end.

enc_remote_domain_get_scheduler_type_args(_1) ->
    case _1 of
        {_2} ->
            [enc_remote_nonnull_domain(_2)]
    end.

dec_remote_domain_get_scheduler_type_args(_1, _2) ->
    begin
        {_3, _4} = dec_remote_nonnull_domain(_1, _2),
        {{_3}, _4}
    end.

enc_remote_domain_get_scheduler_type_ret(_1) ->
    case _1 of
        {_3, _2} ->
            [enc_remote_nonnull_string(_3), <<_2:32>>]
    end.

dec_remote_domain_get_scheduler_type_ret(_1, _2) ->
    begin
        {_3, _4} = dec_remote_nonnull_string(_1, _2),
        begin
            <<_:_4/binary,_5:32/signed,_/binary>> = _1,
            _6 = _4 + 4
        end,
        {{_3, _5}, _6}
    end.

enc_remote_domain_get_scheduler_parameters_args(_1) ->
    case _1 of
        {_3, _2} ->
            [enc_remote_nonnull_domain(_3), <<_2:32>>]
    end.

dec_remote_domain_get_scheduler_parameters_args(_1, _2) ->
    begin
        {_3, _4} = dec_remote_nonnull_domain(_1, _2),
        begin
            <<_:_4/binary,_5:32/signed,_/binary>> = _1,
            _6 = _4 + 4
        end,
        {{_3, _5}, _6}
    end.

enc_remote_domain_get_scheduler_parameters_ret(_1) ->
    case _1 of
        {_2} ->
            [begin
                 _4 = length(_2),
                 if
                     _4 =< 16 ->
                         [<<_4:32/unsigned>>,
                          lists:map(fun(_3) ->
                                           enc_remote_typed_param(_3)
                                    end,
                                    _2)];
                     true ->
                         exit({xdr, limit})
                 end
             end]
    end.

dec_remote_domain_get_scheduler_parameters_ret(_1, _2) ->
    begin
        {_3, _4} =
            begin
                <<_:_2/binary,_5:32/unsigned,_/binary>> = _1,
                map_elem(fun(_6, _7) ->
                                dec_remote_typed_param(_6, _7)
                         end,
                         _1,
                         _2 + 4,
                         16, _5)
            end,
        {{_3}, _4}
    end.

enc_remote_domain_get_scheduler_parameters_flags_args(_1) ->
    case _1 of
        {_4, _3, _2} ->
            [enc_remote_nonnull_domain(_4), <<_3:32>>, <<_2:32>>]
    end.

dec_remote_domain_get_scheduler_parameters_flags_args(_1, _2) ->
    begin
        {_3, _4} = dec_remote_nonnull_domain(_1, _2),
        begin
            <<_:_4/binary,_5:32/signed,_/binary>> = _1,
            _6 = _4 + 4
        end,
        begin
            <<_:_6/binary,_7:32/unsigned,_/binary>> = _1,
            _8 = _6 + 4
        end,
        {{_3, _5, _7}, _8}
    end.

enc_remote_domain_get_scheduler_parameters_flags_ret(_1) ->
    case _1 of
        {_2} ->
            [begin
                 _4 = length(_2),
                 if
                     _4 =< 16 ->
                         [<<_4:32/unsigned>>,
                          lists:map(fun(_3) ->
                                           enc_remote_typed_param(_3)
                                    end,
                                    _2)];
                     true ->
                         exit({xdr, limit})
                 end
             end]
    end.

dec_remote_domain_get_scheduler_parameters_flags_ret(_1, _2) ->
    begin
        {_3, _4} =
            begin
                <<_:_2/binary,_5:32/unsigned,_/binary>> = _1,
                map_elem(fun(_6, _7) ->
                                dec_remote_typed_param(_6, _7)
                         end,
                         _1,
                         _2 + 4,
                         16, _5)
            end,
        {{_3}, _4}
    end.

enc_remote_domain_set_scheduler_parameters_args(_1) ->
    case _1 of
        {_5, _2} ->
            [enc_remote_nonnull_domain(_5),
             begin
                 _4 = length(_2),
                 if
                     _4 =< 16 ->
                         [<<_4:32/unsigned>>,
                          lists:map(fun(_3) ->
                                           enc_remote_typed_param(_3)
                                    end,
                                    _2)];
                     true ->
                         exit({xdr, limit})
                 end
             end]
    end.

dec_remote_domain_set_scheduler_parameters_args(_1, _2) ->
    begin
        {_3, _4} = dec_remote_nonnull_domain(_1, _2),
        {_5, _6} =
            begin
                <<_:_4/binary,_7:32/unsigned,_/binary>> = _1,
                map_elem(fun(_8, _9) ->
                                dec_remote_typed_param(_8, _9)
                         end,
                         _1,
                         _4 + 4,
                         16, _7)
            end,
        {{_3, _5}, _6}
    end.

enc_remote_domain_set_scheduler_parameters_flags_args(_1) ->
    case _1 of
        {_6, _3, _2} ->
            [enc_remote_nonnull_domain(_6),
             begin
                 _5 = length(_3),
                 if
                     _5 =< 16 ->
                         [<<_5:32/unsigned>>,
                          lists:map(fun(_4) ->
                                           enc_remote_typed_param(_4)
                                    end,
                                    _3)];
                     true ->
                         exit({xdr, limit})
                 end
             end,
             <<_2:32>>]
    end.

dec_remote_domain_set_scheduler_parameters_flags_args(_1, _2) ->
    begin
        {_3, _4} = dec_remote_nonnull_domain(_1, _2),
        {_5, _6} =
            begin
                <<_:_4/binary,_7:32/unsigned,_/binary>> = _1,
                map_elem(fun(_8, _9) ->
                                dec_remote_typed_param(_8, _9)
                         end,
                         _1,
                         _4 + 4,
                         16, _7)
            end,
        begin
            <<_:_6/binary,_10:32/unsigned,_/binary>> = _1,
            _11 = _6 + 4
        end,
        {{_3, _5, _10}, _11}
    end.

enc_remote_domain_set_blkio_parameters_args(_1) ->
    case _1 of
        {_6, _3, _2} ->
            [enc_remote_nonnull_domain(_6),
             begin
                 _5 = length(_3),
                 if
                     _5 =< 16 ->
                         [<<_5:32/unsigned>>,
                          lists:map(fun(_4) ->
                                           enc_remote_typed_param(_4)
                                    end,
                                    _3)];
                     true ->
                         exit({xdr, limit})
                 end
             end,
             <<_2:32>>]
    end.

dec_remote_domain_set_blkio_parameters_args(_1, _2) ->
    begin
        {_3, _4} = dec_remote_nonnull_domain(_1, _2),
        {_5, _6} =
            begin
                <<_:_4/binary,_7:32/unsigned,_/binary>> = _1,
                map_elem(fun(_8, _9) ->
                                dec_remote_typed_param(_8, _9)
                         end,
                         _1,
                         _4 + 4,
                         16, _7)
            end,
        begin
            <<_:_6/binary,_10:32/unsigned,_/binary>> = _1,
            _11 = _6 + 4
        end,
        {{_3, _5, _10}, _11}
    end.

enc_remote_domain_get_blkio_parameters_args(_1) ->
    case _1 of
        {_4, _3, _2} ->
            [enc_remote_nonnull_domain(_4), <<_3:32>>, <<_2:32>>]
    end.

dec_remote_domain_get_blkio_parameters_args(_1, _2) ->
    begin
        {_3, _4} = dec_remote_nonnull_domain(_1, _2),
        begin
            <<_:_4/binary,_5:32/signed,_/binary>> = _1,
            _6 = _4 + 4
        end,
        begin
            <<_:_6/binary,_7:32/unsigned,_/binary>> = _1,
            _8 = _6 + 4
        end,
        {{_3, _5, _7}, _8}
    end.

enc_remote_domain_get_blkio_parameters_ret(_1) ->
    case _1 of
        {_3, _2} ->
            [begin
                 _5 = length(_3),
                 if
                     _5 =< 16 ->
                         [<<_5:32/unsigned>>,
                          lists:map(fun(_4) ->
                                           enc_remote_typed_param(_4)
                                    end,
                                    _3)];
                     true ->
                         exit({xdr, limit})
                 end
             end,
             <<_2:32>>]
    end.

dec_remote_domain_get_blkio_parameters_ret(_1, _2) ->
    begin
        {_3, _4} =
            begin
                <<_:_2/binary,_5:32/unsigned,_/binary>> = _1,
                map_elem(fun(_6, _7) ->
                                dec_remote_typed_param(_6, _7)
                         end,
                         _1,
                         _2 + 4,
                         16, _5)
            end,
        begin
            <<_:_4/binary,_8:32/signed,_/binary>> = _1,
            _9 = _4 + 4
        end,
        {{_3, _8}, _9}
    end.

enc_remote_domain_set_memory_parameters_args(_1) ->
    case _1 of
        {_6, _3, _2} ->
            [enc_remote_nonnull_domain(_6),
             begin
                 _5 = length(_3),
                 if
                     _5 =< 16 ->
                         [<<_5:32/unsigned>>,
                          lists:map(fun(_4) ->
                                           enc_remote_typed_param(_4)
                                    end,
                                    _3)];
                     true ->
                         exit({xdr, limit})
                 end
             end,
             <<_2:32>>]
    end.

dec_remote_domain_set_memory_parameters_args(_1, _2) ->
    begin
        {_3, _4} = dec_remote_nonnull_domain(_1, _2),
        {_5, _6} =
            begin
                <<_:_4/binary,_7:32/unsigned,_/binary>> = _1,
                map_elem(fun(_8, _9) ->
                                dec_remote_typed_param(_8, _9)
                         end,
                         _1,
                         _4 + 4,
                         16, _7)
            end,
        begin
            <<_:_6/binary,_10:32/unsigned,_/binary>> = _1,
            _11 = _6 + 4
        end,
        {{_3, _5, _10}, _11}
    end.

enc_remote_domain_get_memory_parameters_args(_1) ->
    case _1 of
        {_4, _3, _2} ->
            [enc_remote_nonnull_domain(_4), <<_3:32>>, <<_2:32>>]
    end.

dec_remote_domain_get_memory_parameters_args(_1, _2) ->
    begin
        {_3, _4} = dec_remote_nonnull_domain(_1, _2),
        begin
            <<_:_4/binary,_5:32/signed,_/binary>> = _1,
            _6 = _4 + 4
        end,
        begin
            <<_:_6/binary,_7:32/unsigned,_/binary>> = _1,
            _8 = _6 + 4
        end,
        {{_3, _5, _7}, _8}
    end.

enc_remote_domain_get_memory_parameters_ret(_1) ->
    case _1 of
        {_3, _2} ->
            [begin
                 _5 = length(_3),
                 if
                     _5 =< 16 ->
                         [<<_5:32/unsigned>>,
                          lists:map(fun(_4) ->
                                           enc_remote_typed_param(_4)
                                    end,
                                    _3)];
                     true ->
                         exit({xdr, limit})
                 end
             end,
             <<_2:32>>]
    end.

dec_remote_domain_get_memory_parameters_ret(_1, _2) ->
    begin
        {_3, _4} =
            begin
                <<_:_2/binary,_5:32/unsigned,_/binary>> = _1,
                map_elem(fun(_6, _7) ->
                                dec_remote_typed_param(_6, _7)
                         end,
                         _1,
                         _2 + 4,
                         16, _5)
            end,
        begin
            <<_:_4/binary,_8:32/signed,_/binary>> = _1,
            _9 = _4 + 4
        end,
        {{_3, _8}, _9}
    end.

enc_remote_domain_block_resize_args(_1) ->
    case _1 of
        {_5, _4, _3, _2} ->
            [enc_remote_nonnull_domain(_5),
             enc_remote_nonnull_string(_4),
             <<_3:64>>,
             <<_2:32>>]
    end.

dec_remote_domain_block_resize_args(_1, _2) ->
    begin
        {_3, _4} = dec_remote_nonnull_domain(_1, _2),
        {_5, _6} = dec_remote_nonnull_string(_1, _4),
        begin
            <<_:_6/binary,_7:64/unsigned,_/binary>> = _1,
            _8 = _6 + 8
        end,
        begin
            <<_:_8/binary,_9:32/unsigned,_/binary>> = _1,
            _10 = _8 + 4
        end,
        {{_3, _5, _7, _9}, _10}
    end.

enc_remote_domain_set_numa_parameters_args(_1) ->
    case _1 of
        {_6, _3, _2} ->
            [enc_remote_nonnull_domain(_6),
             begin
                 _5 = length(_3),
                 if
                     _5 =< 16 ->
                         [<<_5:32/unsigned>>,
                          lists:map(fun(_4) ->
                                           enc_remote_typed_param(_4)
                                    end,
                                    _3)];
                     true ->
                         exit({xdr, limit})
                 end
             end,
             <<_2:32>>]
    end.

dec_remote_domain_set_numa_parameters_args(_1, _2) ->
    begin
        {_3, _4} = dec_remote_nonnull_domain(_1, _2),
        {_5, _6} =
            begin
                <<_:_4/binary,_7:32/unsigned,_/binary>> = _1,
                map_elem(fun(_8, _9) ->
                                dec_remote_typed_param(_8, _9)
                         end,
                         _1,
                         _4 + 4,
                         16, _7)
            end,
        begin
            <<_:_6/binary,_10:32/unsigned,_/binary>> = _1,
            _11 = _6 + 4
        end,
        {{_3, _5, _10}, _11}
    end.

enc_remote_domain_get_numa_parameters_args(_1) ->
    case _1 of
        {_4, _3, _2} ->
            [enc_remote_nonnull_domain(_4), <<_3:32>>, <<_2:32>>]
    end.

dec_remote_domain_get_numa_parameters_args(_1, _2) ->
    begin
        {_3, _4} = dec_remote_nonnull_domain(_1, _2),
        begin
            <<_:_4/binary,_5:32/signed,_/binary>> = _1,
            _6 = _4 + 4
        end,
        begin
            <<_:_6/binary,_7:32/unsigned,_/binary>> = _1,
            _8 = _6 + 4
        end,
        {{_3, _5, _7}, _8}
    end.

enc_remote_domain_get_numa_parameters_ret(_1) ->
    case _1 of
        {_3, _2} ->
            [begin
                 _5 = length(_3),
                 if
                     _5 =< 16 ->
                         [<<_5:32/unsigned>>,
                          lists:map(fun(_4) ->
                                           enc_remote_typed_param(_4)
                                    end,
                                    _3)];
                     true ->
                         exit({xdr, limit})
                 end
             end,
             <<_2:32>>]
    end.

dec_remote_domain_get_numa_parameters_ret(_1, _2) ->
    begin
        {_3, _4} =
            begin
                <<_:_2/binary,_5:32/unsigned,_/binary>> = _1,
                map_elem(fun(_6, _7) ->
                                dec_remote_typed_param(_6, _7)
                         end,
                         _1,
                         _2 + 4,
                         16, _5)
            end,
        begin
            <<_:_4/binary,_8:32/signed,_/binary>> = _1,
            _9 = _4 + 4
        end,
        {{_3, _8}, _9}
    end.

enc_remote_domain_set_perf_events_args(_1) ->
    case _1 of
        {_6, _3, _2} ->
            [enc_remote_nonnull_domain(_6),
             begin
                 _5 = length(_3),
                 if
                     _5 =< 64 ->
                         [<<_5:32/unsigned>>,
                          lists:map(fun(_4) ->
                                           enc_remote_typed_param(_4)
                                    end,
                                    _3)];
                     true ->
                         exit({xdr, limit})
                 end
             end,
             <<_2:32>>]
    end.

dec_remote_domain_set_perf_events_args(_1, _2) ->
    begin
        {_3, _4} = dec_remote_nonnull_domain(_1, _2),
        {_5, _6} =
            begin
                <<_:_4/binary,_7:32/unsigned,_/binary>> = _1,
                map_elem(fun(_8, _9) ->
                                dec_remote_typed_param(_8, _9)
                         end,
                         _1,
                         _4 + 4,
                         64, _7)
            end,
        begin
            <<_:_6/binary,_10:32/unsigned,_/binary>> = _1,
            _11 = _6 + 4
        end,
        {{_3, _5, _10}, _11}
    end.

enc_remote_domain_get_perf_events_args(_1) ->
    case _1 of
        {_3, _2} ->
            [enc_remote_nonnull_domain(_3), <<_2:32>>]
    end.

dec_remote_domain_get_perf_events_args(_1, _2) ->
    begin
        {_3, _4} = dec_remote_nonnull_domain(_1, _2),
        begin
            <<_:_4/binary,_5:32/unsigned,_/binary>> = _1,
            _6 = _4 + 4
        end,
        {{_3, _5}, _6}
    end.

enc_remote_domain_get_perf_events_ret(_1) ->
    case _1 of
        {_2} ->
            [begin
                 _4 = length(_2),
                 if
                     _4 =< 64 ->
                         [<<_4:32/unsigned>>,
                          lists:map(fun(_3) ->
                                           enc_remote_typed_param(_3)
                                    end,
                                    _2)];
                     true ->
                         exit({xdr, limit})
                 end
             end]
    end.

dec_remote_domain_get_perf_events_ret(_1, _2) ->
    begin
        {_3, _4} =
            begin
                <<_:_2/binary,_5:32/unsigned,_/binary>> = _1,
                map_elem(fun(_6, _7) ->
                                dec_remote_typed_param(_6, _7)
                         end,
                         _1,
                         _2 + 4,
                         64, _5)
            end,
        {{_3}, _4}
    end.

enc_remote_domain_block_stats_args(_1) ->
    case _1 of
        {_3, _2} ->
            [enc_remote_nonnull_domain(_3),
             enc_remote_nonnull_string(_2)]
    end.

dec_remote_domain_block_stats_args(_1, _2) ->
    begin
        {_3, _4} = dec_remote_nonnull_domain(_1, _2),
        {_5, _6} = dec_remote_nonnull_string(_1, _4),
        {{_3, _5}, _6}
    end.

enc_remote_domain_block_stats_ret(_1) ->
    case _1 of
        {_6, _5, _4, _3, _2} ->
            [<<_6:64>>, <<_5:64>>, <<_4:64>>, <<_3:64>>, <<_2:64>>]
    end.

dec_remote_domain_block_stats_ret(_1, _2) ->
    begin
        begin
            <<_:_2/binary,_3:64/signed,_/binary>> = _1,
            _4 = _2 + 8
        end,
        begin
            <<_:_4/binary,_5:64/signed,_/binary>> = _1,
            _6 = _4 + 8
        end,
        begin
            <<_:_6/binary,_7:64/signed,_/binary>> = _1,
            _8 = _6 + 8
        end,
        begin
            <<_:_8/binary,_9:64/signed,_/binary>> = _1,
            _10 = _8 + 8
        end,
        begin
            <<_:_10/binary,_11:64/signed,_/binary>> = _1,
            _12 = _10 + 8
        end,
        {{_3, _5, _7, _9, _11}, _12}
    end.

enc_remote_domain_block_stats_flags_args(_1) ->
    case _1 of
        {_5, _4, _3, _2} ->
            [enc_remote_nonnull_domain(_5),
             enc_remote_nonnull_string(_4),
             <<_3:32>>,
             <<_2:32>>]
    end.

dec_remote_domain_block_stats_flags_args(_1, _2) ->
    begin
        {_3, _4} = dec_remote_nonnull_domain(_1, _2),
        {_5, _6} = dec_remote_nonnull_string(_1, _4),
        begin
            <<_:_6/binary,_7:32/signed,_/binary>> = _1,
            _8 = _6 + 4
        end,
        begin
            <<_:_8/binary,_9:32/unsigned,_/binary>> = _1,
            _10 = _8 + 4
        end,
        {{_3, _5, _7, _9}, _10}
    end.

enc_remote_domain_block_stats_flags_ret(_1) ->
    case _1 of
        {_3, _2} ->
            [begin
                 _5 = length(_3),
                 if
                     _5 =< 16 ->
                         [<<_5:32/unsigned>>,
                          lists:map(fun(_4) ->
                                           enc_remote_typed_param(_4)
                                    end,
                                    _3)];
                     true ->
                         exit({xdr, limit})
                 end
             end,
             <<_2:32>>]
    end.

dec_remote_domain_block_stats_flags_ret(_1, _2) ->
    begin
        {_3, _4} =
            begin
                <<_:_2/binary,_5:32/unsigned,_/binary>> = _1,
                map_elem(fun(_6, _7) ->
                                dec_remote_typed_param(_6, _7)
                         end,
                         _1,
                         _2 + 4,
                         16, _5)
            end,
        begin
            <<_:_4/binary,_8:32/signed,_/binary>> = _1,
            _9 = _4 + 4
        end,
        {{_3, _8}, _9}
    end.

enc_remote_domain_interface_stats_args(_1) ->
    case _1 of
        {_3, _2} ->
            [enc_remote_nonnull_domain(_3),
             enc_remote_nonnull_string(_2)]
    end.

dec_remote_domain_interface_stats_args(_1, _2) ->
    begin
        {_3, _4} = dec_remote_nonnull_domain(_1, _2),
        {_5, _6} = dec_remote_nonnull_string(_1, _4),
        {{_3, _5}, _6}
    end.

enc_remote_domain_interface_stats_ret(_1) ->
    case _1 of
        {_9, _8, _7, _6, _5, _4, _3, _2} ->
            [<<_9:64>>,
             <<_8:64>>,
             <<_7:64>>,
             <<_6:64>>,
             <<_5:64>>,
             <<_4:64>>,
             <<_3:64>>,
             <<_2:64>>]
    end.

dec_remote_domain_interface_stats_ret(_1, _2) ->
    begin
        begin
            <<_:_2/binary,_3:64/signed,_/binary>> = _1,
            _4 = _2 + 8
        end,
        begin
            <<_:_4/binary,_5:64/signed,_/binary>> = _1,
            _6 = _4 + 8
        end,
        begin
            <<_:_6/binary,_7:64/signed,_/binary>> = _1,
            _8 = _6 + 8
        end,
        begin
            <<_:_8/binary,_9:64/signed,_/binary>> = _1,
            _10 = _8 + 8
        end,
        begin
            <<_:_10/binary,_11:64/signed,_/binary>> = _1,
            _12 = _10 + 8
        end,
        begin
            <<_:_12/binary,_13:64/signed,_/binary>> = _1,
            _14 = _12 + 8
        end,
        begin
            <<_:_14/binary,_15:64/signed,_/binary>> = _1,
            _16 = _14 + 8
        end,
        begin
            <<_:_16/binary,_17:64/signed,_/binary>> = _1,
            _18 = _16 + 8
        end,
        {{_3, _5, _7, _9, _11, _13, _15, _17}, _18}
    end.

enc_remote_domain_set_interface_parameters_args(_1) ->
    case _1 of
        {_7, _6, _3, _2} ->
            [enc_remote_nonnull_domain(_7),
             enc_remote_nonnull_string(_6),
             begin
                 _5 = length(_3),
                 if
                     _5 =< 16 ->
                         [<<_5:32/unsigned>>,
                          lists:map(fun(_4) ->
                                           enc_remote_typed_param(_4)
                                    end,
                                    _3)];
                     true ->
                         exit({xdr, limit})
                 end
             end,
             <<_2:32>>]
    end.

dec_remote_domain_set_interface_parameters_args(_1, _2) ->
    begin
        {_3, _4} = dec_remote_nonnull_domain(_1, _2),
        {_5, _6} = dec_remote_nonnull_string(_1, _4),
        {_7, _8} =
            begin
                <<_:_6/binary,_9:32/unsigned,_/binary>> = _1,
                map_elem(fun(_10, _11) ->
                                dec_remote_typed_param(_10, _11)
                         end,
                         _1,
                         _6 + 4,
                         16, _9)
            end,
        begin
            <<_:_8/binary,_12:32/unsigned,_/binary>> = _1,
            _13 = _8 + 4
        end,
        {{_3, _5, _7, _12}, _13}
    end.

enc_remote_domain_get_interface_parameters_args(_1) ->
    case _1 of
        {_5, _4, _3, _2} ->
            [enc_remote_nonnull_domain(_5),
             enc_remote_nonnull_string(_4),
             <<_3:32>>,
             <<_2:32>>]
    end.

dec_remote_domain_get_interface_parameters_args(_1, _2) ->
    begin
        {_3, _4} = dec_remote_nonnull_domain(_1, _2),
        {_5, _6} = dec_remote_nonnull_string(_1, _4),
        begin
            <<_:_6/binary,_7:32/signed,_/binary>> = _1,
            _8 = _6 + 4
        end,
        begin
            <<_:_8/binary,_9:32/unsigned,_/binary>> = _1,
            _10 = _8 + 4
        end,
        {{_3, _5, _7, _9}, _10}
    end.

enc_remote_domain_get_interface_parameters_ret(_1) ->
    case _1 of
        {_3, _2} ->
            [begin
                 _5 = length(_3),
                 if
                     _5 =< 16 ->
                         [<<_5:32/unsigned>>,
                          lists:map(fun(_4) ->
                                           enc_remote_typed_param(_4)
                                    end,
                                    _3)];
                     true ->
                         exit({xdr, limit})
                 end
             end,
             <<_2:32>>]
    end.

dec_remote_domain_get_interface_parameters_ret(_1, _2) ->
    begin
        {_3, _4} =
            begin
                <<_:_2/binary,_5:32/unsigned,_/binary>> = _1,
                map_elem(fun(_6, _7) ->
                                dec_remote_typed_param(_6, _7)
                         end,
                         _1,
                         _2 + 4,
                         16, _5)
            end,
        begin
            <<_:_4/binary,_8:32/signed,_/binary>> = _1,
            _9 = _4 + 4
        end,
        {{_3, _8}, _9}
    end.

enc_remote_domain_memory_stats_args(_1) ->
    case _1 of
        {_4, _3, _2} ->
            [enc_remote_nonnull_domain(_4), <<_3:32>>, <<_2:32>>]
    end.

dec_remote_domain_memory_stats_args(_1, _2) ->
    begin
        {_3, _4} = dec_remote_nonnull_domain(_1, _2),
        begin
            <<_:_4/binary,_5:32/unsigned,_/binary>> = _1,
            _6 = _4 + 4
        end,
        begin
            <<_:_6/binary,_7:32/unsigned,_/binary>> = _1,
            _8 = _6 + 4
        end,
        {{_3, _5, _7}, _8}
    end.

enc_remote_domain_memory_stat(_1) ->
    case _1 of
        {_3, _2} ->
            [<<_3:32>>, <<_2:64>>]
    end.

dec_remote_domain_memory_stat(_1, _2) ->
    begin
        begin
            <<_:_2/binary,_3:32/signed,_/binary>> = _1,
            _4 = _2 + 4
        end,
        begin
            <<_:_4/binary,_5:64/unsigned,_/binary>> = _1,
            _6 = _4 + 8
        end,
        {{_3, _5}, _6}
    end.

enc_remote_domain_memory_stats_ret(_1) ->
    case _1 of
        {_2} ->
            [begin
                 _4 = length(_2),
                 if
                     _4 =< 1024 ->
                         [<<_4:32/unsigned>>,
                          lists:map(fun(_3) ->
                                           enc_remote_domain_memory_stat(_3)
                                    end,
                                    _2)];
                     true ->
                         exit({xdr, limit})
                 end
             end]
    end.

dec_remote_domain_memory_stats_ret(_1, _2) ->
    begin
        {_3, _4} =
            begin
                <<_:_2/binary,_5:32/unsigned,_/binary>> = _1,
                map_elem(fun(_6, _7) ->
                                dec_remote_domain_memory_stat(_6, _7)
                         end,
                         _1,
                         _2 + 4,
                         1024, _5)
            end,
        {{_3}, _4}
    end.

enc_remote_domain_block_peek_args(_1) ->
    case _1 of
        {_6, _5, _4, _3, _2} ->
            [enc_remote_nonnull_domain(_6),
             enc_remote_nonnull_string(_5),
             <<_4:64>>,
             <<_3:32>>,
             <<_2:32>>]
    end.

dec_remote_domain_block_peek_args(_1, _2) ->
    begin
        {_3, _4} = dec_remote_nonnull_domain(_1, _2),
        {_5, _6} = dec_remote_nonnull_string(_1, _4),
        begin
            <<_:_6/binary,_7:64/unsigned,_/binary>> = _1,
            _8 = _6 + 8
        end,
        begin
            <<_:_8/binary,_9:32/unsigned,_/binary>> = _1,
            _10 = _8 + 4
        end,
        begin
            <<_:_10/binary,_11:32/unsigned,_/binary>> = _1,
            _12 = _10 + 4
        end,
        {{_3, _5, _7, _9, _11}, _12}
    end.

enc_remote_domain_block_peek_ret(_1) ->
    case _1 of
        {_2} ->
            [begin
                 _3 = io_list_len(_2),
                 if
                     _3 =< 4194304 ->
                         [<<_3:32/unsigned>>, _2, enc_align(_3)];
                     true ->
                         exit({xdr, limit})
                 end
             end]
    end.

dec_remote_domain_block_peek_ret(_1, _2) ->
    begin
        {_3, _4} =
            begin
                <<_:_2/binary,_5:32/unsigned,_/binary>> = _1,
                if
                    _5 > 4194304 ->
                        exit({xdr, limit});
                    true ->
                        _6 = _2 + 4,
                        <<_:_6/binary,_7:_5/binary,_/binary>> = _1,
                        {_7, _6 + align(_5)}
                end
            end,
        {{_3}, _4}
    end.

enc_remote_domain_memory_peek_args(_1) ->
    case _1 of
        {_5, _4, _3, _2} ->
            [enc_remote_nonnull_domain(_5),
             <<_4:64>>,
             <<_3:32>>,
             <<_2:32>>]
    end.

dec_remote_domain_memory_peek_args(_1, _2) ->
    begin
        {_3, _4} = dec_remote_nonnull_domain(_1, _2),
        begin
            <<_:_4/binary,_5:64/unsigned,_/binary>> = _1,
            _6 = _4 + 8
        end,
        begin
            <<_:_6/binary,_7:32/unsigned,_/binary>> = _1,
            _8 = _6 + 4
        end,
        begin
            <<_:_8/binary,_9:32/unsigned,_/binary>> = _1,
            _10 = _8 + 4
        end,
        {{_3, _5, _7, _9}, _10}
    end.

enc_remote_domain_memory_peek_ret(_1) ->
    case _1 of
        {_2} ->
            [begin
                 _3 = io_list_len(_2),
                 if
                     _3 =< 4194304 ->
                         [<<_3:32/unsigned>>, _2, enc_align(_3)];
                     true ->
                         exit({xdr, limit})
                 end
             end]
    end.

dec_remote_domain_memory_peek_ret(_1, _2) ->
    begin
        {_3, _4} =
            begin
                <<_:_2/binary,_5:32/unsigned,_/binary>> = _1,
                if
                    _5 > 4194304 ->
                        exit({xdr, limit});
                    true ->
                        _6 = _2 + 4,
                        <<_:_6/binary,_7:_5/binary,_/binary>> = _1,
                        {_7, _6 + align(_5)}
                end
            end,
        {{_3}, _4}
    end.

enc_remote_domain_get_block_info_args(_1) ->
    case _1 of
        {_4, _3, _2} ->
            [enc_remote_nonnull_domain(_4),
             enc_remote_nonnull_string(_3),
             <<_2:32>>]
    end.

dec_remote_domain_get_block_info_args(_1, _2) ->
    begin
        {_3, _4} = dec_remote_nonnull_domain(_1, _2),
        {_5, _6} = dec_remote_nonnull_string(_1, _4),
        begin
            <<_:_6/binary,_7:32/unsigned,_/binary>> = _1,
            _8 = _6 + 4
        end,
        {{_3, _5, _7}, _8}
    end.

enc_remote_domain_get_block_info_ret(_1) ->
    case _1 of
        {_4, _3, _2} ->
            [<<_4:64>>, <<_3:64>>, <<_2:64>>]
    end.

dec_remote_domain_get_block_info_ret(_1, _2) ->
    begin
        begin
            <<_:_2/binary,_3:64/unsigned,_/binary>> = _1,
            _4 = _2 + 8
        end,
        begin
            <<_:_4/binary,_5:64/unsigned,_/binary>> = _1,
            _6 = _4 + 8
        end,
        begin
            <<_:_6/binary,_7:64/unsigned,_/binary>> = _1,
            _8 = _6 + 8
        end,
        {{_3, _5, _7}, _8}
    end.

enc_remote_connect_list_domains_args(_1) ->
    case _1 of
        {_2} ->
            [<<_2:32>>]
    end.

dec_remote_connect_list_domains_args(_1, _2) ->
    begin
        begin
            <<_:_2/binary,_3:32/signed,_/binary>> = _1,
            _4 = _2 + 4
        end,
        {{_3}, _4}
    end.

enc_remote_connect_list_domains_ret(_1) ->
    case _1 of
        {_2} ->
            [begin
                 _4 = length(_2),
                 if
                     _4 =< 16384 ->
                         [<<_4:32/unsigned>>,
                          lists:map(fun(_3) ->
                                           <<_3:32>>
                                    end,
                                    _2)];
                     true ->
                         exit({xdr, limit})
                 end
             end]
    end.

dec_remote_connect_list_domains_ret(_1, _2) ->
    begin
        {_3, _4} =
            begin
                <<_:_2/binary,_5:32/unsigned,_/binary>> = _1,
                map_elem(fun(_6, _7) ->
                                begin
                                    <<_:_7/binary,_8:32/signed,_/binary>> =
                                        _6,
                                    {_8, _7 + 4}
                                end
                         end,
                         _1,
                         _2 + 4,
                         16384, _5)
            end,
        {{_3}, _4}
    end.

enc_remote_connect_num_of_domains_ret(_1) ->
    case _1 of
        {_2} ->
            [<<_2:32>>]
    end.

dec_remote_connect_num_of_domains_ret(_1, _2) ->
    begin
        begin
            <<_:_2/binary,_3:32/signed,_/binary>> = _1,
            _4 = _2 + 4
        end,
        {{_3}, _4}
    end.

enc_remote_domain_create_xml_args(_1) ->
    case _1 of
        {_3, _2} ->
            [enc_remote_nonnull_string(_3), <<_2:32>>]
    end.

dec_remote_domain_create_xml_args(_1, _2) ->
    begin
        {_3, _4} = dec_remote_nonnull_string(_1, _2),
        begin
            <<_:_4/binary,_5:32/unsigned,_/binary>> = _1,
            _6 = _4 + 4
        end,
        {{_3, _5}, _6}
    end.

enc_remote_domain_create_xml_ret(_1) ->
    case _1 of
        {_2} ->
            [enc_remote_nonnull_domain(_2)]
    end.

dec_remote_domain_create_xml_ret(_1, _2) ->
    begin
        {_3, _4} = dec_remote_nonnull_domain(_1, _2),
        {{_3}, _4}
    end.

enc_remote_domain_create_xml_with_files_args(_1) ->
    case _1 of
        {_3, _2} ->
            [enc_remote_nonnull_string(_3), <<_2:32>>]
    end.

dec_remote_domain_create_xml_with_files_args(_1, _2) ->
    begin
        {_3, _4} = dec_remote_nonnull_string(_1, _2),
        begin
            <<_:_4/binary,_5:32/unsigned,_/binary>> = _1,
            _6 = _4 + 4
        end,
        {{_3, _5}, _6}
    end.

enc_remote_domain_create_xml_with_files_ret(_1) ->
    case _1 of
        {_2} ->
            [enc_remote_nonnull_domain(_2)]
    end.

dec_remote_domain_create_xml_with_files_ret(_1, _2) ->
    begin
        {_3, _4} = dec_remote_nonnull_domain(_1, _2),
        {{_3}, _4}
    end.

enc_remote_domain_lookup_by_id_args(_1) ->
    case _1 of
        {_2} ->
            [<<_2:32>>]
    end.

dec_remote_domain_lookup_by_id_args(_1, _2) ->
    begin
        begin
            <<_:_2/binary,_3:32/signed,_/binary>> = _1,
            _4 = _2 + 4
        end,
        {{_3}, _4}
    end.

enc_remote_domain_lookup_by_id_ret(_1) ->
    case _1 of
        {_2} ->
            [enc_remote_nonnull_domain(_2)]
    end.

dec_remote_domain_lookup_by_id_ret(_1, _2) ->
    begin
        {_3, _4} = dec_remote_nonnull_domain(_1, _2),
        {{_3}, _4}
    end.

enc_remote_domain_lookup_by_uuid_args(_1) ->
    case _1 of
        {_2} ->
            [enc_remote_uuid(_2)]
    end.

dec_remote_domain_lookup_by_uuid_args(_1, _2) ->
    begin
        {_3, _4} = dec_remote_uuid(_1, _2),
        {{_3}, _4}
    end.

enc_remote_domain_lookup_by_uuid_ret(_1) ->
    case _1 of
        {_2} ->
            [enc_remote_nonnull_domain(_2)]
    end.

dec_remote_domain_lookup_by_uuid_ret(_1, _2) ->
    begin
        {_3, _4} = dec_remote_nonnull_domain(_1, _2),
        {{_3}, _4}
    end.

enc_remote_domain_lookup_by_name_args(_1) ->
    case _1 of
        {_2} ->
            [enc_remote_nonnull_string(_2)]
    end.

dec_remote_domain_lookup_by_name_args(_1, _2) ->
    begin
        {_3, _4} = dec_remote_nonnull_string(_1, _2),
        {{_3}, _4}
    end.

enc_remote_domain_lookup_by_name_ret(_1) ->
    case _1 of
        {_2} ->
            [enc_remote_nonnull_domain(_2)]
    end.

dec_remote_domain_lookup_by_name_ret(_1, _2) ->
    begin
        {_3, _4} = dec_remote_nonnull_domain(_1, _2),
        {{_3}, _4}
    end.

enc_remote_domain_suspend_args(_1) ->
    case _1 of
        {_2} ->
            [enc_remote_nonnull_domain(_2)]
    end.

dec_remote_domain_suspend_args(_1, _2) ->
    begin
        {_3, _4} = dec_remote_nonnull_domain(_1, _2),
        {{_3}, _4}
    end.

enc_remote_domain_resume_args(_1) ->
    case _1 of
        {_2} ->
            [enc_remote_nonnull_domain(_2)]
    end.

dec_remote_domain_resume_args(_1, _2) ->
    begin
        {_3, _4} = dec_remote_nonnull_domain(_1, _2),
        {{_3}, _4}
    end.

enc_remote_domain_pm_suspend_for_duration_args(_1) ->
    case _1 of
        {_5, _4, _3, _2} ->
            [enc_remote_nonnull_domain(_5),
             <<_4:32>>,
             <<_3:64>>,
             <<_2:32>>]
    end.

dec_remote_domain_pm_suspend_for_duration_args(_1, _2) ->
    begin
        {_3, _4} = dec_remote_nonnull_domain(_1, _2),
        begin
            <<_:_4/binary,_5:32/unsigned,_/binary>> = _1,
            _6 = _4 + 4
        end,
        begin
            <<_:_6/binary,_7:64/unsigned,_/binary>> = _1,
            _8 = _6 + 8
        end,
        begin
            <<_:_8/binary,_9:32/unsigned,_/binary>> = _1,
            _10 = _8 + 4
        end,
        {{_3, _5, _7, _9}, _10}
    end.

enc_remote_domain_pm_wakeup_args(_1) ->
    case _1 of
        {_3, _2} ->
            [enc_remote_nonnull_domain(_3), <<_2:32>>]
    end.

dec_remote_domain_pm_wakeup_args(_1, _2) ->
    begin
        {_3, _4} = dec_remote_nonnull_domain(_1, _2),
        begin
            <<_:_4/binary,_5:32/unsigned,_/binary>> = _1,
            _6 = _4 + 4
        end,
        {{_3, _5}, _6}
    end.

enc_remote_domain_shutdown_args(_1) ->
    case _1 of
        {_2} ->
            [enc_remote_nonnull_domain(_2)]
    end.

dec_remote_domain_shutdown_args(_1, _2) ->
    begin
        {_3, _4} = dec_remote_nonnull_domain(_1, _2),
        {{_3}, _4}
    end.

enc_remote_domain_reboot_args(_1) ->
    case _1 of
        {_3, _2} ->
            [enc_remote_nonnull_domain(_3), <<_2:32>>]
    end.

dec_remote_domain_reboot_args(_1, _2) ->
    begin
        {_3, _4} = dec_remote_nonnull_domain(_1, _2),
        begin
            <<_:_4/binary,_5:32/unsigned,_/binary>> = _1,
            _6 = _4 + 4
        end,
        {{_3, _5}, _6}
    end.

enc_remote_domain_reset_args(_1) ->
    case _1 of
        {_3, _2} ->
            [enc_remote_nonnull_domain(_3), <<_2:32>>]
    end.

dec_remote_domain_reset_args(_1, _2) ->
    begin
        {_3, _4} = dec_remote_nonnull_domain(_1, _2),
        begin
            <<_:_4/binary,_5:32/unsigned,_/binary>> = _1,
            _6 = _4 + 4
        end,
        {{_3, _5}, _6}
    end.

enc_remote_domain_destroy_args(_1) ->
    case _1 of
        {_2} ->
            [enc_remote_nonnull_domain(_2)]
    end.

dec_remote_domain_destroy_args(_1, _2) ->
    begin
        {_3, _4} = dec_remote_nonnull_domain(_1, _2),
        {{_3}, _4}
    end.

enc_remote_domain_destroy_flags_args(_1) ->
    case _1 of
        {_3, _2} ->
            [enc_remote_nonnull_domain(_3), <<_2:32>>]
    end.

dec_remote_domain_destroy_flags_args(_1, _2) ->
    begin
        {_3, _4} = dec_remote_nonnull_domain(_1, _2),
        begin
            <<_:_4/binary,_5:32/unsigned,_/binary>> = _1,
            _6 = _4 + 4
        end,
        {{_3, _5}, _6}
    end.

enc_remote_domain_get_os_type_args(_1) ->
    case _1 of
        {_2} ->
            [enc_remote_nonnull_domain(_2)]
    end.

dec_remote_domain_get_os_type_args(_1, _2) ->
    begin
        {_3, _4} = dec_remote_nonnull_domain(_1, _2),
        {{_3}, _4}
    end.

enc_remote_domain_get_os_type_ret(_1) ->
    case _1 of
        {_2} ->
            [enc_remote_nonnull_string(_2)]
    end.

dec_remote_domain_get_os_type_ret(_1, _2) ->
    begin
        {_3, _4} = dec_remote_nonnull_string(_1, _2),
        {{_3}, _4}
    end.

enc_remote_domain_get_max_memory_args(_1) ->
    case _1 of
        {_2} ->
            [enc_remote_nonnull_domain(_2)]
    end.

dec_remote_domain_get_max_memory_args(_1, _2) ->
    begin
        {_3, _4} = dec_remote_nonnull_domain(_1, _2),
        {{_3}, _4}
    end.

enc_remote_domain_get_max_memory_ret(_1) ->
    case _1 of
        {_2} ->
            [<<_2:64>>]
    end.

dec_remote_domain_get_max_memory_ret(_1, _2) ->
    begin
        begin
            <<_:_2/binary,_3:64/unsigned,_/binary>> = _1,
            _4 = _2 + 8
        end,
        {{_3}, _4}
    end.

enc_remote_domain_set_max_memory_args(_1) ->
    case _1 of
        {_3, _2} ->
            [enc_remote_nonnull_domain(_3), <<_2:64>>]
    end.

dec_remote_domain_set_max_memory_args(_1, _2) ->
    begin
        {_3, _4} = dec_remote_nonnull_domain(_1, _2),
        begin
            <<_:_4/binary,_5:64/unsigned,_/binary>> = _1,
            _6 = _4 + 8
        end,
        {{_3, _5}, _6}
    end.

enc_remote_domain_set_memory_args(_1) ->
    case _1 of
        {_3, _2} ->
            [enc_remote_nonnull_domain(_3), <<_2:64>>]
    end.

dec_remote_domain_set_memory_args(_1, _2) ->
    begin
        {_3, _4} = dec_remote_nonnull_domain(_1, _2),
        begin
            <<_:_4/binary,_5:64/unsigned,_/binary>> = _1,
            _6 = _4 + 8
        end,
        {{_3, _5}, _6}
    end.

enc_remote_domain_set_memory_flags_args(_1) ->
    case _1 of
        {_4, _3, _2} ->
            [enc_remote_nonnull_domain(_4), <<_3:64>>, <<_2:32>>]
    end.

dec_remote_domain_set_memory_flags_args(_1, _2) ->
    begin
        {_3, _4} = dec_remote_nonnull_domain(_1, _2),
        begin
            <<_:_4/binary,_5:64/unsigned,_/binary>> = _1,
            _6 = _4 + 8
        end,
        begin
            <<_:_6/binary,_7:32/unsigned,_/binary>> = _1,
            _8 = _6 + 4
        end,
        {{_3, _5, _7}, _8}
    end.

enc_remote_domain_set_memory_stats_period_args(_1) ->
    case _1 of
        {_4, _3, _2} ->
            [enc_remote_nonnull_domain(_4), <<_3:32>>, <<_2:32>>]
    end.

dec_remote_domain_set_memory_stats_period_args(_1, _2) ->
    begin
        {_3, _4} = dec_remote_nonnull_domain(_1, _2),
        begin
            <<_:_4/binary,_5:32/signed,_/binary>> = _1,
            _6 = _4 + 4
        end,
        begin
            <<_:_6/binary,_7:32/unsigned,_/binary>> = _1,
            _8 = _6 + 4
        end,
        {{_3, _5, _7}, _8}
    end.

enc_remote_domain_get_info_args(_1) ->
    case _1 of
        {_2} ->
            [enc_remote_nonnull_domain(_2)]
    end.

dec_remote_domain_get_info_args(_1, _2) ->
    begin
        {_3, _4} = dec_remote_nonnull_domain(_1, _2),
        {{_3}, _4}
    end.

enc_remote_domain_get_info_ret(_1) ->
    case _1 of
        {_6, _5, _4, _3, _2} ->
            [<<_6:32>>, <<_5:64>>, <<_4:64>>, <<_3:32>>, <<_2:64>>]
    end.

dec_remote_domain_get_info_ret(_1, _2) ->
    begin
        begin
            <<_:_2/binary,_3:32/unsigned,_/binary>> = _1,
            _4 = _2 + 4
        end,
        begin
            <<_:_4/binary,_5:64/unsigned,_/binary>> = _1,
            _6 = _4 + 8
        end,
        begin
            <<_:_6/binary,_7:64/unsigned,_/binary>> = _1,
            _8 = _6 + 8
        end,
        begin
            <<_:_8/binary,_9:32/unsigned,_/binary>> = _1,
            _10 = _8 + 4
        end,
        begin
            <<_:_10/binary,_11:64/unsigned,_/binary>> = _1,
            _12 = _10 + 8
        end,
        {{_3, _5, _7, _9, _11}, _12}
    end.

enc_remote_domain_save_args(_1) ->
    case _1 of
        {_3, _2} ->
            [enc_remote_nonnull_domain(_3),
             enc_remote_nonnull_string(_2)]
    end.

dec_remote_domain_save_args(_1, _2) ->
    begin
        {_3, _4} = dec_remote_nonnull_domain(_1, _2),
        {_5, _6} = dec_remote_nonnull_string(_1, _4),
        {{_3, _5}, _6}
    end.

enc_remote_domain_save_flags_args(_1) ->
    case _1 of
        {_5, _4, _3, _2} ->
            [enc_remote_nonnull_domain(_5),
             enc_remote_nonnull_string(_4),
             enc_remote_string(_3),
             <<_2:32>>]
    end.

dec_remote_domain_save_flags_args(_1, _2) ->
    begin
        {_3, _4} = dec_remote_nonnull_domain(_1, _2),
        {_5, _6} = dec_remote_nonnull_string(_1, _4),
        {_7, _8} = dec_remote_string(_1, _6),
        begin
            <<_:_8/binary,_9:32/unsigned,_/binary>> = _1,
            _10 = _8 + 4
        end,
        {{_3, _5, _7, _9}, _10}
    end.

enc_remote_domain_restore_args(_1) ->
    case _1 of
        {_2} ->
            [enc_remote_nonnull_string(_2)]
    end.

dec_remote_domain_restore_args(_1, _2) ->
    begin
        {_3, _4} = dec_remote_nonnull_string(_1, _2),
        {{_3}, _4}
    end.

enc_remote_domain_restore_flags_args(_1) ->
    case _1 of
        {_4, _3, _2} ->
            [enc_remote_nonnull_string(_4),
             enc_remote_string(_3),
             <<_2:32>>]
    end.

dec_remote_domain_restore_flags_args(_1, _2) ->
    begin
        {_3, _4} = dec_remote_nonnull_string(_1, _2),
        {_5, _6} = dec_remote_string(_1, _4),
        begin
            <<_:_6/binary,_7:32/unsigned,_/binary>> = _1,
            _8 = _6 + 4
        end,
        {{_3, _5, _7}, _8}
    end.

enc_remote_domain_save_image_get_xml_desc_args(_1) ->
    case _1 of
        {_3, _2} ->
            [enc_remote_nonnull_string(_3), <<_2:32>>]
    end.

dec_remote_domain_save_image_get_xml_desc_args(_1, _2) ->
    begin
        {_3, _4} = dec_remote_nonnull_string(_1, _2),
        begin
            <<_:_4/binary,_5:32/unsigned,_/binary>> = _1,
            _6 = _4 + 4
        end,
        {{_3, _5}, _6}
    end.

enc_remote_domain_save_image_get_xml_desc_ret(_1) ->
    case _1 of
        {_2} ->
            [enc_remote_nonnull_string(_2)]
    end.

dec_remote_domain_save_image_get_xml_desc_ret(_1, _2) ->
    begin
        {_3, _4} = dec_remote_nonnull_string(_1, _2),
        {{_3}, _4}
    end.

enc_remote_domain_save_image_define_xml_args(_1) ->
    case _1 of
        {_4, _3, _2} ->
            [enc_remote_nonnull_string(_4),
             enc_remote_nonnull_string(_3),
             <<_2:32>>]
    end.

dec_remote_domain_save_image_define_xml_args(_1, _2) ->
    begin
        {_3, _4} = dec_remote_nonnull_string(_1, _2),
        {_5, _6} = dec_remote_nonnull_string(_1, _4),
        begin
            <<_:_6/binary,_7:32/unsigned,_/binary>> = _1,
            _8 = _6 + 4
        end,
        {{_3, _5, _7}, _8}
    end.

enc_remote_domain_core_dump_args(_1) ->
    case _1 of
        {_4, _3, _2} ->
            [enc_remote_nonnull_domain(_4),
             enc_remote_nonnull_string(_3),
             <<_2:32>>]
    end.

dec_remote_domain_core_dump_args(_1, _2) ->
    begin
        {_3, _4} = dec_remote_nonnull_domain(_1, _2),
        {_5, _6} = dec_remote_nonnull_string(_1, _4),
        begin
            <<_:_6/binary,_7:32/unsigned,_/binary>> = _1,
            _8 = _6 + 4
        end,
        {{_3, _5, _7}, _8}
    end.

enc_remote_domain_core_dump_with_format_args(_1) ->
    case _1 of
        {_5, _4, _3, _2} ->
            [enc_remote_nonnull_domain(_5),
             enc_remote_nonnull_string(_4),
             <<_3:32>>,
             <<_2:32>>]
    end.

dec_remote_domain_core_dump_with_format_args(_1, _2) ->
    begin
        {_3, _4} = dec_remote_nonnull_domain(_1, _2),
        {_5, _6} = dec_remote_nonnull_string(_1, _4),
        begin
            <<_:_6/binary,_7:32/unsigned,_/binary>> = _1,
            _8 = _6 + 4
        end,
        begin
            <<_:_8/binary,_9:32/unsigned,_/binary>> = _1,
            _10 = _8 + 4
        end,
        {{_3, _5, _7, _9}, _10}
    end.

enc_remote_domain_screenshot_args(_1) ->
    case _1 of
        {_4, _3, _2} ->
            [enc_remote_nonnull_domain(_4), <<_3:32>>, <<_2:32>>]
    end.

dec_remote_domain_screenshot_args(_1, _2) ->
    begin
        {_3, _4} = dec_remote_nonnull_domain(_1, _2),
        begin
            <<_:_4/binary,_5:32/unsigned,_/binary>> = _1,
            _6 = _4 + 4
        end,
        begin
            <<_:_6/binary,_7:32/unsigned,_/binary>> = _1,
            _8 = _6 + 4
        end,
        {{_3, _5, _7}, _8}
    end.

enc_remote_domain_screenshot_ret(_1) ->
    case _1 of
        {_2} ->
            [enc_remote_string(_2)]
    end.

dec_remote_domain_screenshot_ret(_1, _2) ->
    begin
        {_3, _4} = dec_remote_string(_1, _2),
        {{_3}, _4}
    end.

enc_remote_domain_get_xml_desc_args(_1) ->
    case _1 of
        {_3, _2} ->
            [enc_remote_nonnull_domain(_3), <<_2:32>>]
    end.

dec_remote_domain_get_xml_desc_args(_1, _2) ->
    begin
        {_3, _4} = dec_remote_nonnull_domain(_1, _2),
        begin
            <<_:_4/binary,_5:32/unsigned,_/binary>> = _1,
            _6 = _4 + 4
        end,
        {{_3, _5}, _6}
    end.

enc_remote_domain_get_xml_desc_ret(_1) ->
    case _1 of
        {_2} ->
            [enc_remote_nonnull_string(_2)]
    end.

dec_remote_domain_get_xml_desc_ret(_1, _2) ->
    begin
        {_3, _4} = dec_remote_nonnull_string(_1, _2),
        {{_3}, _4}
    end.

enc_remote_domain_migrate_prepare_args(_1) ->
    case _1 of
        {_5, _4, _3, _2} ->
            [enc_remote_string(_5),
             <<_4:64>>,
             enc_remote_string(_3),
             <<_2:64>>]
    end.

dec_remote_domain_migrate_prepare_args(_1, _2) ->
    begin
        {_3, _4} = dec_remote_string(_1, _2),
        begin
            <<_:_4/binary,_5:64/unsigned,_/binary>> = _1,
            _6 = _4 + 8
        end,
        {_7, _8} = dec_remote_string(_1, _6),
        begin
            <<_:_8/binary,_9:64/unsigned,_/binary>> = _1,
            _10 = _8 + 8
        end,
        {{_3, _5, _7, _9}, _10}
    end.

enc_remote_domain_migrate_prepare_ret(_1) ->
    case _1 of
        {_3, _2} ->
            [begin
                 _4 = io_list_len(_3),
                 if
                     _4 =< 4194304 ->
                         [<<_4:32/unsigned>>, _3, enc_align(_4)];
                     true ->
                         exit({xdr, limit})
                 end
             end,
             enc_remote_string(_2)]
    end.

dec_remote_domain_migrate_prepare_ret(_1, _2) ->
    begin
        {_3, _4} =
            begin
                <<_:_2/binary,_5:32/unsigned,_/binary>> = _1,
                if
                    _5 > 4194304 ->
                        exit({xdr, limit});
                    true ->
                        _6 = _2 + 4,
                        <<_:_6/binary,_7:_5/binary,_/binary>> = _1,
                        {_7, _6 + align(_5)}
                end
            end,
        {_8, _9} = dec_remote_string(_1, _4),
        {{_3, _8}, _9}
    end.

enc_remote_domain_migrate_perform_args(_1) ->
    case _1 of
        {_8, _6, _5, _4, _3, _2} ->
            [enc_remote_nonnull_domain(_8),
             begin
                 _7 = io_list_len(_6),
                 if
                     _7 =< 4194304 ->
                         [<<_7:32/unsigned>>, _6, enc_align(_7)];
                     true ->
                         exit({xdr, limit})
                 end
             end,
             enc_remote_nonnull_string(_5),
             <<_4:64>>,
             enc_remote_string(_3),
             <<_2:64>>]
    end.

dec_remote_domain_migrate_perform_args(_1, _2) ->
    begin
        {_3, _4} = dec_remote_nonnull_domain(_1, _2),
        {_5, _6} =
            begin
                <<_:_4/binary,_7:32/unsigned,_/binary>> = _1,
                if
                    _7 > 4194304 ->
                        exit({xdr, limit});
                    true ->
                        _8 = _4 + 4,
                        <<_:_8/binary,_9:_7/binary,_/binary>> = _1,
                        {_9, _8 + align(_7)}
                end
            end,
        {_10, _11} = dec_remote_nonnull_string(_1, _6),
        begin
            <<_:_11/binary,_12:64/unsigned,_/binary>> = _1,
            _13 = _11 + 8
        end,
        {_14, _15} = dec_remote_string(_1, _13),
        begin
            <<_:_15/binary,_16:64/unsigned,_/binary>> = _1,
            _17 = _15 + 8
        end,
        {{_3, _5, _10, _12, _14, _16}, _17}
    end.

enc_remote_domain_migrate_finish_args(_1) ->
    case _1 of
        {_6, _4, _3, _2} ->
            [enc_remote_nonnull_string(_6),
             begin
                 _5 = io_list_len(_4),
                 if
                     _5 =< 4194304 ->
                         [<<_5:32/unsigned>>, _4, enc_align(_5)];
                     true ->
                         exit({xdr, limit})
                 end
             end,
             enc_remote_nonnull_string(_3),
             <<_2:64>>]
    end.

dec_remote_domain_migrate_finish_args(_1, _2) ->
    begin
        {_3, _4} = dec_remote_nonnull_string(_1, _2),
        {_5, _6} =
            begin
                <<_:_4/binary,_7:32/unsigned,_/binary>> = _1,
                if
                    _7 > 4194304 ->
                        exit({xdr, limit});
                    true ->
                        _8 = _4 + 4,
                        <<_:_8/binary,_9:_7/binary,_/binary>> = _1,
                        {_9, _8 + align(_7)}
                end
            end,
        {_10, _11} = dec_remote_nonnull_string(_1, _6),
        begin
            <<_:_11/binary,_12:64/unsigned,_/binary>> = _1,
            _13 = _11 + 8
        end,
        {{_3, _5, _10, _12}, _13}
    end.

enc_remote_domain_migrate_finish_ret(_1) ->
    case _1 of
        {_2} ->
            [enc_remote_nonnull_domain(_2)]
    end.

dec_remote_domain_migrate_finish_ret(_1, _2) ->
    begin
        {_3, _4} = dec_remote_nonnull_domain(_1, _2),
        {{_3}, _4}
    end.

enc_remote_domain_migrate_prepare2_args(_1) ->
    case _1 of
        {_6, _5, _4, _3, _2} ->
            [enc_remote_string(_6),
             <<_5:64>>,
             enc_remote_string(_4),
             <<_3:64>>,
             enc_remote_nonnull_string(_2)]
    end.

dec_remote_domain_migrate_prepare2_args(_1, _2) ->
    begin
        {_3, _4} = dec_remote_string(_1, _2),
        begin
            <<_:_4/binary,_5:64/unsigned,_/binary>> = _1,
            _6 = _4 + 8
        end,
        {_7, _8} = dec_remote_string(_1, _6),
        begin
            <<_:_8/binary,_9:64/unsigned,_/binary>> = _1,
            _10 = _8 + 8
        end,
        {_11, _12} = dec_remote_nonnull_string(_1, _10),
        {{_3, _5, _7, _9, _11}, _12}
    end.

enc_remote_domain_migrate_prepare2_ret(_1) ->
    case _1 of
        {_3, _2} ->
            [begin
                 _4 = io_list_len(_3),
                 if
                     _4 =< 4194304 ->
                         [<<_4:32/unsigned>>, _3, enc_align(_4)];
                     true ->
                         exit({xdr, limit})
                 end
             end,
             enc_remote_string(_2)]
    end.

dec_remote_domain_migrate_prepare2_ret(_1, _2) ->
    begin
        {_3, _4} =
            begin
                <<_:_2/binary,_5:32/unsigned,_/binary>> = _1,
                if
                    _5 > 4194304 ->
                        exit({xdr, limit});
                    true ->
                        _6 = _2 + 4,
                        <<_:_6/binary,_7:_5/binary,_/binary>> = _1,
                        {_7, _6 + align(_5)}
                end
            end,
        {_8, _9} = dec_remote_string(_1, _4),
        {{_3, _8}, _9}
    end.

enc_remote_domain_migrate_finish2_args(_1) ->
    case _1 of
        {_7, _5, _4, _3, _2} ->
            [enc_remote_nonnull_string(_7),
             begin
                 _6 = io_list_len(_5),
                 if
                     _6 =< 4194304 ->
                         [<<_6:32/unsigned>>, _5, enc_align(_6)];
                     true ->
                         exit({xdr, limit})
                 end
             end,
             enc_remote_nonnull_string(_4),
             <<_3:64>>,
             <<_2:32>>]
    end.

dec_remote_domain_migrate_finish2_args(_1, _2) ->
    begin
        {_3, _4} = dec_remote_nonnull_string(_1, _2),
        {_5, _6} =
            begin
                <<_:_4/binary,_7:32/unsigned,_/binary>> = _1,
                if
                    _7 > 4194304 ->
                        exit({xdr, limit});
                    true ->
                        _8 = _4 + 4,
                        <<_:_8/binary,_9:_7/binary,_/binary>> = _1,
                        {_9, _8 + align(_7)}
                end
            end,
        {_10, _11} = dec_remote_nonnull_string(_1, _6),
        begin
            <<_:_11/binary,_12:64/unsigned,_/binary>> = _1,
            _13 = _11 + 8
        end,
        begin
            <<_:_13/binary,_14:32/signed,_/binary>> = _1,
            _15 = _13 + 4
        end,
        {{_3, _5, _10, _12, _14}, _15}
    end.

enc_remote_domain_migrate_finish2_ret(_1) ->
    case _1 of
        {_2} ->
            [enc_remote_nonnull_domain(_2)]
    end.

dec_remote_domain_migrate_finish2_ret(_1, _2) ->
    begin
        {_3, _4} = dec_remote_nonnull_domain(_1, _2),
        {{_3}, _4}
    end.

enc_remote_connect_list_defined_domains_args(_1) ->
    case _1 of
        {_2} ->
            [<<_2:32>>]
    end.

dec_remote_connect_list_defined_domains_args(_1, _2) ->
    begin
        begin
            <<_:_2/binary,_3:32/signed,_/binary>> = _1,
            _4 = _2 + 4
        end,
        {{_3}, _4}
    end.

enc_remote_connect_list_defined_domains_ret(_1) ->
    case _1 of
        {_2} ->
            [begin
                 _4 = length(_2),
                 if
                     _4 =< 16384 ->
                         [<<_4:32/unsigned>>,
                          lists:map(fun(_3) ->
                                           enc_remote_nonnull_string(_3)
                                    end,
                                    _2)];
                     true ->
                         exit({xdr, limit})
                 end
             end]
    end.

dec_remote_connect_list_defined_domains_ret(_1, _2) ->
    begin
        {_3, _4} =
            begin
                <<_:_2/binary,_5:32/unsigned,_/binary>> = _1,
                map_elem(fun(_6, _7) ->
                                dec_remote_nonnull_string(_6, _7)
                         end,
                         _1,
                         _2 + 4,
                         16384, _5)
            end,
        {{_3}, _4}
    end.

enc_remote_connect_num_of_defined_domains_ret(_1) ->
    case _1 of
        {_2} ->
            [<<_2:32>>]
    end.

dec_remote_connect_num_of_defined_domains_ret(_1, _2) ->
    begin
        begin
            <<_:_2/binary,_3:32/signed,_/binary>> = _1,
            _4 = _2 + 4
        end,
        {{_3}, _4}
    end.

enc_remote_domain_create_args(_1) ->
    case _1 of
        {_2} ->
            [enc_remote_nonnull_domain(_2)]
    end.

dec_remote_domain_create_args(_1, _2) ->
    begin
        {_3, _4} = dec_remote_nonnull_domain(_1, _2),
        {{_3}, _4}
    end.

enc_remote_domain_create_with_flags_args(_1) ->
    case _1 of
        {_3, _2} ->
            [enc_remote_nonnull_domain(_3), <<_2:32>>]
    end.

dec_remote_domain_create_with_flags_args(_1, _2) ->
    begin
        {_3, _4} = dec_remote_nonnull_domain(_1, _2),
        begin
            <<_:_4/binary,_5:32/unsigned,_/binary>> = _1,
            _6 = _4 + 4
        end,
        {{_3, _5}, _6}
    end.

enc_remote_domain_create_with_flags_ret(_1) ->
    case _1 of
        {_2} ->
            [enc_remote_nonnull_domain(_2)]
    end.

dec_remote_domain_create_with_flags_ret(_1, _2) ->
    begin
        {_3, _4} = dec_remote_nonnull_domain(_1, _2),
        {{_3}, _4}
    end.

enc_remote_domain_create_with_files_args(_1) ->
    case _1 of
        {_3, _2} ->
            [enc_remote_nonnull_domain(_3), <<_2:32>>]
    end.

dec_remote_domain_create_with_files_args(_1, _2) ->
    begin
        {_3, _4} = dec_remote_nonnull_domain(_1, _2),
        begin
            <<_:_4/binary,_5:32/unsigned,_/binary>> = _1,
            _6 = _4 + 4
        end,
        {{_3, _5}, _6}
    end.

enc_remote_domain_create_with_files_ret(_1) ->
    case _1 of
        {_2} ->
            [enc_remote_nonnull_domain(_2)]
    end.

dec_remote_domain_create_with_files_ret(_1, _2) ->
    begin
        {_3, _4} = dec_remote_nonnull_domain(_1, _2),
        {{_3}, _4}
    end.

enc_remote_domain_define_xml_args(_1) ->
    case _1 of
        {_2} ->
            [enc_remote_nonnull_string(_2)]
    end.

dec_remote_domain_define_xml_args(_1, _2) ->
    begin
        {_3, _4} = dec_remote_nonnull_string(_1, _2),
        {{_3}, _4}
    end.

enc_remote_domain_define_xml_ret(_1) ->
    case _1 of
        {_2} ->
            [enc_remote_nonnull_domain(_2)]
    end.

dec_remote_domain_define_xml_ret(_1, _2) ->
    begin
        {_3, _4} = dec_remote_nonnull_domain(_1, _2),
        {{_3}, _4}
    end.

enc_remote_domain_define_xml_flags_args(_1) ->
    case _1 of
        {_3, _2} ->
            [enc_remote_nonnull_string(_3), <<_2:32>>]
    end.

dec_remote_domain_define_xml_flags_args(_1, _2) ->
    begin
        {_3, _4} = dec_remote_nonnull_string(_1, _2),
        begin
            <<_:_4/binary,_5:32/unsigned,_/binary>> = _1,
            _6 = _4 + 4
        end,
        {{_3, _5}, _6}
    end.

enc_remote_domain_define_xml_flags_ret(_1) ->
    case _1 of
        {_2} ->
            [enc_remote_nonnull_domain(_2)]
    end.

dec_remote_domain_define_xml_flags_ret(_1, _2) ->
    begin
        {_3, _4} = dec_remote_nonnull_domain(_1, _2),
        {{_3}, _4}
    end.

enc_remote_domain_undefine_args(_1) ->
    case _1 of
        {_2} ->
            [enc_remote_nonnull_domain(_2)]
    end.

dec_remote_domain_undefine_args(_1, _2) ->
    begin
        {_3, _4} = dec_remote_nonnull_domain(_1, _2),
        {{_3}, _4}
    end.

enc_remote_domain_undefine_flags_args(_1) ->
    case _1 of
        {_3, _2} ->
            [enc_remote_nonnull_domain(_3), <<_2:32>>]
    end.

dec_remote_domain_undefine_flags_args(_1, _2) ->
    begin
        {_3, _4} = dec_remote_nonnull_domain(_1, _2),
        begin
            <<_:_4/binary,_5:32/unsigned,_/binary>> = _1,
            _6 = _4 + 4
        end,
        {{_3, _5}, _6}
    end.

enc_remote_domain_inject_nmi_args(_1) ->
    case _1 of
        {_3, _2} ->
            [enc_remote_nonnull_domain(_3), <<_2:32>>]
    end.

dec_remote_domain_inject_nmi_args(_1, _2) ->
    begin
        {_3, _4} = dec_remote_nonnull_domain(_1, _2),
        begin
            <<_:_4/binary,_5:32/unsigned,_/binary>> = _1,
            _6 = _4 + 4
        end,
        {{_3, _5}, _6}
    end.

enc_remote_domain_send_key_args(_1) ->
    case _1 of
        {_8, _7, _6, _3, _2} ->
            [enc_remote_nonnull_domain(_8),
             <<_7:32>>,
             <<_6:32>>,
             begin
                 _5 = length(_3),
                 if
                     _5 =< 16 ->
                         [<<_5:32/unsigned>>,
                          lists:map(fun(_4) ->
                                           <<_4:32>>
                                    end,
                                    _3)];
                     true ->
                         exit({xdr, limit})
                 end
             end,
             <<_2:32>>]
    end.

dec_remote_domain_send_key_args(_1, _2) ->
    begin
        {_3, _4} = dec_remote_nonnull_domain(_1, _2),
        begin
            <<_:_4/binary,_5:32/unsigned,_/binary>> = _1,
            _6 = _4 + 4
        end,
        begin
            <<_:_6/binary,_7:32/unsigned,_/binary>> = _1,
            _8 = _6 + 4
        end,
        {_9, _10} =
            begin
                <<_:_8/binary,_11:32/unsigned,_/binary>> = _1,
                map_elem(fun(_12, _13) ->
                                begin
                                    <<_:_13/binary,
                                      _14:32/unsigned,
                                      _/binary>> =
                                        _12,
                                    {_14, _13 + 4}
                                end
                         end,
                         _1,
                         _8 + 4,
                         16, _11)
            end,
        begin
            <<_:_10/binary,_15:32/unsigned,_/binary>> = _1,
            _16 = _10 + 4
        end,
        {{_3, _5, _7, _9, _15}, _16}
    end.

enc_remote_domain_send_process_signal_args(_1) ->
    case _1 of
        {_5, _4, _3, _2} ->
            [enc_remote_nonnull_domain(_5),
             <<_4:64>>,
             <<_3:32>>,
             <<_2:32>>]
    end.

dec_remote_domain_send_process_signal_args(_1, _2) ->
    begin
        {_3, _4} = dec_remote_nonnull_domain(_1, _2),
        begin
            <<_:_4/binary,_5:64/signed,_/binary>> = _1,
            _6 = _4 + 8
        end,
        begin
            <<_:_6/binary,_7:32/unsigned,_/binary>> = _1,
            _8 = _6 + 4
        end,
        begin
            <<_:_8/binary,_9:32/unsigned,_/binary>> = _1,
            _10 = _8 + 4
        end,
        {{_3, _5, _7, _9}, _10}
    end.

enc_remote_domain_set_vcpus_args(_1) ->
    case _1 of
        {_3, _2} ->
            [enc_remote_nonnull_domain(_3), <<_2:32>>]
    end.

dec_remote_domain_set_vcpus_args(_1, _2) ->
    begin
        {_3, _4} = dec_remote_nonnull_domain(_1, _2),
        begin
            <<_:_4/binary,_5:32/unsigned,_/binary>> = _1,
            _6 = _4 + 4
        end,
        {{_3, _5}, _6}
    end.

enc_remote_domain_set_vcpus_flags_args(_1) ->
    case _1 of
        {_4, _3, _2} ->
            [enc_remote_nonnull_domain(_4), <<_3:32>>, <<_2:32>>]
    end.

dec_remote_domain_set_vcpus_flags_args(_1, _2) ->
    begin
        {_3, _4} = dec_remote_nonnull_domain(_1, _2),
        begin
            <<_:_4/binary,_5:32/unsigned,_/binary>> = _1,
            _6 = _4 + 4
        end,
        begin
            <<_:_6/binary,_7:32/unsigned,_/binary>> = _1,
            _8 = _6 + 4
        end,
        {{_3, _5, _7}, _8}
    end.

enc_remote_domain_get_vcpus_flags_args(_1) ->
    case _1 of
        {_3, _2} ->
            [enc_remote_nonnull_domain(_3), <<_2:32>>]
    end.

dec_remote_domain_get_vcpus_flags_args(_1, _2) ->
    begin
        {_3, _4} = dec_remote_nonnull_domain(_1, _2),
        begin
            <<_:_4/binary,_5:32/unsigned,_/binary>> = _1,
            _6 = _4 + 4
        end,
        {{_3, _5}, _6}
    end.

enc_remote_domain_get_vcpus_flags_ret(_1) ->
    case _1 of
        {_2} ->
            [<<_2:32>>]
    end.

dec_remote_domain_get_vcpus_flags_ret(_1, _2) ->
    begin
        begin
            <<_:_2/binary,_3:32/signed,_/binary>> = _1,
            _4 = _2 + 4
        end,
        {{_3}, _4}
    end.

enc_remote_domain_pin_vcpu_args(_1) ->
    case _1 of
        {_5, _4, _2} ->
            [enc_remote_nonnull_domain(_5),
             <<_4:32>>,
             begin
                 _3 = io_list_len(_2),
                 if
                     _3 =< 2048 ->
                         [<<_3:32/unsigned>>, _2, enc_align(_3)];
                     true ->
                         exit({xdr, limit})
                 end
             end]
    end.

dec_remote_domain_pin_vcpu_args(_1, _2) ->
    begin
        {_3, _4} = dec_remote_nonnull_domain(_1, _2),
        begin
            <<_:_4/binary,_5:32/unsigned,_/binary>> = _1,
            _6 = _4 + 4
        end,
        {_7, _8} =
            begin
                <<_:_6/binary,_9:32/unsigned,_/binary>> = _1,
                if
                    _9 > 2048 ->
                        exit({xdr, limit});
                    true ->
                        _10 = _6 + 4,
                        <<_:_10/binary,_11:_9/binary,_/binary>> = _1,
                        {_11, _10 + align(_9)}
                end
            end,
        {{_3, _5, _7}, _8}
    end.

enc_remote_domain_pin_vcpu_flags_args(_1) ->
    case _1 of
        {_6, _5, _3, _2} ->
            [enc_remote_nonnull_domain(_6),
             <<_5:32>>,
             begin
                 _4 = io_list_len(_3),
                 if
                     _4 =< 2048 ->
                         [<<_4:32/unsigned>>, _3, enc_align(_4)];
                     true ->
                         exit({xdr, limit})
                 end
             end,
             <<_2:32>>]
    end.

dec_remote_domain_pin_vcpu_flags_args(_1, _2) ->
    begin
        {_3, _4} = dec_remote_nonnull_domain(_1, _2),
        begin
            <<_:_4/binary,_5:32/unsigned,_/binary>> = _1,
            _6 = _4 + 4
        end,
        {_7, _8} =
            begin
                <<_:_6/binary,_9:32/unsigned,_/binary>> = _1,
                if
                    _9 > 2048 ->
                        exit({xdr, limit});
                    true ->
                        _10 = _6 + 4,
                        <<_:_10/binary,_11:_9/binary,_/binary>> = _1,
                        {_11, _10 + align(_9)}
                end
            end,
        begin
            <<_:_8/binary,_12:32/unsigned,_/binary>> = _1,
            _13 = _8 + 4
        end,
        {{_3, _5, _7, _12}, _13}
    end.

enc_remote_domain_get_vcpu_pin_info_args(_1) ->
    case _1 of
        {_5, _4, _3, _2} ->
            [enc_remote_nonnull_domain(_5),
             <<_4:32>>,
             <<_3:32>>,
             <<_2:32>>]
    end.

dec_remote_domain_get_vcpu_pin_info_args(_1, _2) ->
    begin
        {_3, _4} = dec_remote_nonnull_domain(_1, _2),
        begin
            <<_:_4/binary,_5:32/signed,_/binary>> = _1,
            _6 = _4 + 4
        end,
        begin
            <<_:_6/binary,_7:32/signed,_/binary>> = _1,
            _8 = _6 + 4
        end,
        begin
            <<_:_8/binary,_9:32/unsigned,_/binary>> = _1,
            _10 = _8 + 4
        end,
        {{_3, _5, _7, _9}, _10}
    end.

enc_remote_domain_get_vcpu_pin_info_ret(_1) ->
    case _1 of
        {_3, _2} ->
            [begin
                 _4 = io_list_len(_3),
                 if
                     _4 =< 8388608 ->
                         [<<_4:32/unsigned>>, _3, enc_align(_4)];
                     true ->
                         exit({xdr, limit})
                 end
             end,
             <<_2:32>>]
    end.

dec_remote_domain_get_vcpu_pin_info_ret(_1, _2) ->
    begin
        {_3, _4} =
            begin
                <<_:_2/binary,_5:32/unsigned,_/binary>> = _1,
                if
                    _5 > 8388608 ->
                        exit({xdr, limit});
                    true ->
                        _6 = _2 + 4,
                        <<_:_6/binary,_7:_5/binary,_/binary>> = _1,
                        {_7, _6 + align(_5)}
                end
            end,
        begin
            <<_:_4/binary,_8:32/signed,_/binary>> = _1,
            _9 = _4 + 4
        end,
        {{_3, _8}, _9}
    end.

enc_remote_domain_pin_emulator_args(_1) ->
    case _1 of
        {_5, _3, _2} ->
            [enc_remote_nonnull_domain(_5),
             begin
                 _4 = io_list_len(_3),
                 if
                     _4 =< 2048 ->
                         [<<_4:32/unsigned>>, _3, enc_align(_4)];
                     true ->
                         exit({xdr, limit})
                 end
             end,
             <<_2:32>>]
    end.

dec_remote_domain_pin_emulator_args(_1, _2) ->
    begin
        {_3, _4} = dec_remote_nonnull_domain(_1, _2),
        {_5, _6} =
            begin
                <<_:_4/binary,_7:32/unsigned,_/binary>> = _1,
                if
                    _7 > 2048 ->
                        exit({xdr, limit});
                    true ->
                        _8 = _4 + 4,
                        <<_:_8/binary,_9:_7/binary,_/binary>> = _1,
                        {_9, _8 + align(_7)}
                end
            end,
        begin
            <<_:_6/binary,_10:32/unsigned,_/binary>> = _1,
            _11 = _6 + 4
        end,
        {{_3, _5, _10}, _11}
    end.

enc_remote_domain_get_emulator_pin_info_args(_1) ->
    case _1 of
        {_4, _3, _2} ->
            [enc_remote_nonnull_domain(_4), <<_3:32>>, <<_2:32>>]
    end.

dec_remote_domain_get_emulator_pin_info_args(_1, _2) ->
    begin
        {_3, _4} = dec_remote_nonnull_domain(_1, _2),
        begin
            <<_:_4/binary,_5:32/signed,_/binary>> = _1,
            _6 = _4 + 4
        end,
        begin
            <<_:_6/binary,_7:32/unsigned,_/binary>> = _1,
            _8 = _6 + 4
        end,
        {{_3, _5, _7}, _8}
    end.

enc_remote_domain_get_emulator_pin_info_ret(_1) ->
    case _1 of
        {_3, _2} ->
            [begin
                 _4 = io_list_len(_3),
                 if
                     _4 =< 8388608 ->
                         [<<_4:32/unsigned>>, _3, enc_align(_4)];
                     true ->
                         exit({xdr, limit})
                 end
             end,
             <<_2:32>>]
    end.

dec_remote_domain_get_emulator_pin_info_ret(_1, _2) ->
    begin
        {_3, _4} =
            begin
                <<_:_2/binary,_5:32/unsigned,_/binary>> = _1,
                if
                    _5 > 8388608 ->
                        exit({xdr, limit});
                    true ->
                        _6 = _2 + 4,
                        <<_:_6/binary,_7:_5/binary,_/binary>> = _1,
                        {_7, _6 + align(_5)}
                end
            end,
        begin
            <<_:_4/binary,_8:32/signed,_/binary>> = _1,
            _9 = _4 + 4
        end,
        {{_3, _8}, _9}
    end.

enc_remote_domain_get_vcpus_args(_1) ->
    case _1 of
        {_4, _3, _2} ->
            [enc_remote_nonnull_domain(_4), <<_3:32>>, <<_2:32>>]
    end.

dec_remote_domain_get_vcpus_args(_1, _2) ->
    begin
        {_3, _4} = dec_remote_nonnull_domain(_1, _2),
        begin
            <<_:_4/binary,_5:32/signed,_/binary>> = _1,
            _6 = _4 + 4
        end,
        begin
            <<_:_6/binary,_7:32/signed,_/binary>> = _1,
            _8 = _6 + 4
        end,
        {{_3, _5, _7}, _8}
    end.

enc_remote_domain_get_vcpus_ret(_1) ->
    case _1 of
        {_4, _2} ->
            [begin
                 _6 = length(_4),
                 if
                     _6 =< 16384 ->
                         [<<_6:32/unsigned>>,
                          lists:map(fun(_5) ->
                                           enc_remote_vcpu_info(_5)
                                    end,
                                    _4)];
                     true ->
                         exit({xdr, limit})
                 end
             end,
             begin
                 _3 = io_list_len(_2),
                 if
                     _3 =< 8388608 ->
                         [<<_3:32/unsigned>>, _2, enc_align(_3)];
                     true ->
                         exit({xdr, limit})
                 end
             end]
    end.

dec_remote_domain_get_vcpus_ret(_1, _2) ->
    begin
        {_3, _4} =
            begin
                <<_:_2/binary,_5:32/unsigned,_/binary>> = _1,
                map_elem(fun(_6, _7) ->
                                dec_remote_vcpu_info(_6, _7)
                         end,
                         _1,
                         _2 + 4,
                         16384, _5)
            end,
        {_8, _9} =
            begin
                <<_:_4/binary,_10:32/unsigned,_/binary>> = _1,
                if
                    _10 > 8388608 ->
                        exit({xdr, limit});
                    true ->
                        _11 = _4 + 4,
                        <<_:_11/binary,_12:_10/binary,_/binary>> = _1,
                        {_12, _11 + align(_10)}
                end
            end,
        {{_3, _8}, _9}
    end.

enc_remote_domain_get_max_vcpus_args(_1) ->
    case _1 of
        {_2} ->
            [enc_remote_nonnull_domain(_2)]
    end.

dec_remote_domain_get_max_vcpus_args(_1, _2) ->
    begin
        {_3, _4} = dec_remote_nonnull_domain(_1, _2),
        {{_3}, _4}
    end.

enc_remote_domain_get_max_vcpus_ret(_1) ->
    case _1 of
        {_2} ->
            [<<_2:32>>]
    end.

dec_remote_domain_get_max_vcpus_ret(_1, _2) ->
    begin
        begin
            <<_:_2/binary,_3:32/signed,_/binary>> = _1,
            _4 = _2 + 4
        end,
        {{_3}, _4}
    end.

enc_remote_domain_iothread_info(_1) ->
    case _1 of
        {_4, _2} ->
            [<<_4:32>>,
             begin
                 _3 = io_list_len(_2),
                 if
                     _3 =< 2048 ->
                         [<<_3:32/unsigned>>, _2, enc_align(_3)];
                     true ->
                         exit({xdr, limit})
                 end
             end]
    end.

dec_remote_domain_iothread_info(_1, _2) ->
    begin
        begin
            <<_:_2/binary,_3:32/unsigned,_/binary>> = _1,
            _4 = _2 + 4
        end,
        {_5, _6} =
            begin
                <<_:_4/binary,_7:32/unsigned,_/binary>> = _1,
                if
                    _7 > 2048 ->
                        exit({xdr, limit});
                    true ->
                        _8 = _4 + 4,
                        <<_:_8/binary,_9:_7/binary,_/binary>> = _1,
                        {_9, _8 + align(_7)}
                end
            end,
        {{_3, _5}, _6}
    end.

enc_remote_domain_get_iothread_info_args(_1) ->
    case _1 of
        {_3, _2} ->
            [enc_remote_nonnull_domain(_3), <<_2:32>>]
    end.

dec_remote_domain_get_iothread_info_args(_1, _2) ->
    begin
        {_3, _4} = dec_remote_nonnull_domain(_1, _2),
        begin
            <<_:_4/binary,_5:32/unsigned,_/binary>> = _1,
            _6 = _4 + 4
        end,
        {{_3, _5}, _6}
    end.

enc_remote_domain_get_iothread_info_ret(_1) ->
    case _1 of
        {_3, _2} ->
            [begin
                 _5 = length(_3),
                 if
                     _5 =< 16384 ->
                         [<<_5:32/unsigned>>,
                          lists:map(fun(_4) ->
                                           enc_remote_domain_iothread_info(_4)
                                    end,
                                    _3)];
                     true ->
                         exit({xdr, limit})
                 end
             end,
             <<_2:32>>]
    end.

dec_remote_domain_get_iothread_info_ret(_1, _2) ->
    begin
        {_3, _4} =
            begin
                <<_:_2/binary,_5:32/unsigned,_/binary>> = _1,
                map_elem(fun(_6, _7) ->
                                dec_remote_domain_iothread_info(_6, _7)
                         end,
                         _1,
                         _2 + 4,
                         16384, _5)
            end,
        begin
            <<_:_4/binary,_8:32/unsigned,_/binary>> = _1,
            _9 = _4 + 4
        end,
        {{_3, _8}, _9}
    end.

enc_remote_domain_pin_iothread_args(_1) ->
    case _1 of
        {_6, _5, _3, _2} ->
            [enc_remote_nonnull_domain(_6),
             <<_5:32>>,
             begin
                 _4 = io_list_len(_3),
                 if
                     _4 =< 2048 ->
                         [<<_4:32/unsigned>>, _3, enc_align(_4)];
                     true ->
                         exit({xdr, limit})
                 end
             end,
             <<_2:32>>]
    end.

dec_remote_domain_pin_iothread_args(_1, _2) ->
    begin
        {_3, _4} = dec_remote_nonnull_domain(_1, _2),
        begin
            <<_:_4/binary,_5:32/unsigned,_/binary>> = _1,
            _6 = _4 + 4
        end,
        {_7, _8} =
            begin
                <<_:_6/binary,_9:32/unsigned,_/binary>> = _1,
                if
                    _9 > 2048 ->
                        exit({xdr, limit});
                    true ->
                        _10 = _6 + 4,
                        <<_:_10/binary,_11:_9/binary,_/binary>> = _1,
                        {_11, _10 + align(_9)}
                end
            end,
        begin
            <<_:_8/binary,_12:32/unsigned,_/binary>> = _1,
            _13 = _8 + 4
        end,
        {{_3, _5, _7, _12}, _13}
    end.

enc_remote_domain_add_iothread_args(_1) ->
    case _1 of
        {_4, _3, _2} ->
            [enc_remote_nonnull_domain(_4), <<_3:32>>, <<_2:32>>]
    end.

dec_remote_domain_add_iothread_args(_1, _2) ->
    begin
        {_3, _4} = dec_remote_nonnull_domain(_1, _2),
        begin
            <<_:_4/binary,_5:32/unsigned,_/binary>> = _1,
            _6 = _4 + 4
        end,
        begin
            <<_:_6/binary,_7:32/unsigned,_/binary>> = _1,
            _8 = _6 + 4
        end,
        {{_3, _5, _7}, _8}
    end.

enc_remote_domain_del_iothread_args(_1) ->
    case _1 of
        {_4, _3, _2} ->
            [enc_remote_nonnull_domain(_4), <<_3:32>>, <<_2:32>>]
    end.

dec_remote_domain_del_iothread_args(_1, _2) ->
    begin
        {_3, _4} = dec_remote_nonnull_domain(_1, _2),
        begin
            <<_:_4/binary,_5:32/unsigned,_/binary>> = _1,
            _6 = _4 + 4
        end,
        begin
            <<_:_6/binary,_7:32/unsigned,_/binary>> = _1,
            _8 = _6 + 4
        end,
        {{_3, _5, _7}, _8}
    end.

enc_remote_domain_set_iothread_params_args(_1) ->
    case _1 of
        {_7, _6, _3, _2} ->
            [enc_remote_nonnull_domain(_7),
             <<_6:32>>,
             begin
                 _5 = length(_3),
                 if
                     _5 =< 64 ->
                         [<<_5:32/unsigned>>,
                          lists:map(fun(_4) ->
                                           enc_remote_typed_param(_4)
                                    end,
                                    _3)];
                     true ->
                         exit({xdr, limit})
                 end
             end,
             <<_2:32>>]
    end.

dec_remote_domain_set_iothread_params_args(_1, _2) ->
    begin
        {_3, _4} = dec_remote_nonnull_domain(_1, _2),
        begin
            <<_:_4/binary,_5:32/unsigned,_/binary>> = _1,
            _6 = _4 + 4
        end,
        {_7, _8} =
            begin
                <<_:_6/binary,_9:32/unsigned,_/binary>> = _1,
                map_elem(fun(_10, _11) ->
                                dec_remote_typed_param(_10, _11)
                         end,
                         _1,
                         _6 + 4,
                         64, _9)
            end,
        begin
            <<_:_8/binary,_12:32/unsigned,_/binary>> = _1,
            _13 = _8 + 4
        end,
        {{_3, _5, _7, _12}, _13}
    end.

enc_remote_domain_get_security_label_args(_1) ->
    case _1 of
        {_2} ->
            [enc_remote_nonnull_domain(_2)]
    end.

dec_remote_domain_get_security_label_args(_1, _2) ->
    begin
        {_3, _4} = dec_remote_nonnull_domain(_1, _2),
        {{_3}, _4}
    end.

enc_remote_domain_get_security_label_ret(_1) ->
    case _1 of
        {_3, _2} ->
            [begin
                 _5 = length(_3),
                 if
                     _5 =< 4097 ->
                         [<<_5:32/unsigned>>,
                          lists:map(fun(_4) ->
                                           <<_4:32>>
                                    end,
                                    _3)];
                     true ->
                         exit({xdr, limit})
                 end
             end,
             <<_2:32>>]
    end.

dec_remote_domain_get_security_label_ret(_1, _2) ->
    begin
        {_3, _4} =
            begin
                <<_:_2/binary,_5:32/unsigned,_/binary>> = _1,
                map_elem(fun(_6, _7) ->
                                begin
                                    <<_:_7/binary,_8:32/signed,_/binary>> =
                                        _6,
                                    {_8, _7 + 4}
                                end
                         end,
                         _1,
                         _2 + 4,
                         4097, _5)
            end,
        begin
            <<_:_4/binary,_9:32/signed,_/binary>> = _1,
            _10 = _4 + 4
        end,
        {{_3, _9}, _10}
    end.

enc_remote_domain_get_security_label_list_args(_1) ->
    case _1 of
        {_2} ->
            [enc_remote_nonnull_domain(_2)]
    end.

dec_remote_domain_get_security_label_list_args(_1, _2) ->
    begin
        {_3, _4} = dec_remote_nonnull_domain(_1, _2),
        {{_3}, _4}
    end.

enc_remote_domain_get_security_label_list_ret(_1) ->
    case _1 of
        {_3, _2} ->
            [begin
                 _5 = length(_3),
                 if
                     _5 =< 64 ->
                         [<<_5:32/unsigned>>,
                          lists:map(fun(_4) ->
                                           enc_remote_domain_get_security_label_ret(_4)
                                    end,
                                    _3)];
                     true ->
                         exit({xdr, limit})
                 end
             end,
             <<_2:32>>]
    end.

dec_remote_domain_get_security_label_list_ret(_1, _2) ->
    begin
        {_3, _4} =
            begin
                <<_:_2/binary,_5:32/unsigned,_/binary>> = _1,
                map_elem(fun(_6, _7) ->
                                dec_remote_domain_get_security_label_ret(_6,
                                                                         _7)
                         end,
                         _1,
                         _2 + 4,
                         64, _5)
            end,
        begin
            <<_:_4/binary,_8:32/signed,_/binary>> = _1,
            _9 = _4 + 4
        end,
        {{_3, _8}, _9}
    end.

enc_remote_node_get_security_model_ret(_1) ->
    case _1 of
        {_5, _2} ->
            [begin
                 _7 = length(_5),
                 if
                     _7 =< 257 ->
                         [<<_7:32/unsigned>>,
                          lists:map(fun(_6) ->
                                           <<_6:32>>
                                    end,
                                    _5)];
                     true ->
                         exit({xdr, limit})
                 end
             end,
             begin
                 _4 = length(_2),
                 if
                     _4 =< 257 ->
                         [<<_4:32/unsigned>>,
                          lists:map(fun(_3) ->
                                           <<_3:32>>
                                    end,
                                    _2)];
                     true ->
                         exit({xdr, limit})
                 end
             end]
    end.

dec_remote_node_get_security_model_ret(_1, _2) ->
    begin
        {_3, _4} =
            begin
                <<_:_2/binary,_5:32/unsigned,_/binary>> = _1,
                map_elem(fun(_6, _7) ->
                                begin
                                    <<_:_7/binary,_8:32/signed,_/binary>> =
                                        _6,
                                    {_8, _7 + 4}
                                end
                         end,
                         _1,
                         _2 + 4,
                         257, _5)
            end,
        {_9, _10} =
            begin
                <<_:_4/binary,_11:32/unsigned,_/binary>> = _1,
                map_elem(fun(_12, _13) ->
                                begin
                                    <<_:_13/binary,
                                      _14:32/signed,
                                      _/binary>> =
                                        _12,
                                    {_14, _13 + 4}
                                end
                         end,
                         _1,
                         _4 + 4,
                         257, _11)
            end,
        {{_3, _9}, _10}
    end.

enc_remote_domain_attach_device_args(_1) ->
    case _1 of
        {_3, _2} ->
            [enc_remote_nonnull_domain(_3),
             enc_remote_nonnull_string(_2)]
    end.

dec_remote_domain_attach_device_args(_1, _2) ->
    begin
        {_3, _4} = dec_remote_nonnull_domain(_1, _2),
        {_5, _6} = dec_remote_nonnull_string(_1, _4),
        {{_3, _5}, _6}
    end.

enc_remote_domain_attach_device_flags_args(_1) ->
    case _1 of
        {_4, _3, _2} ->
            [enc_remote_nonnull_domain(_4),
             enc_remote_nonnull_string(_3),
             <<_2:32>>]
    end.

dec_remote_domain_attach_device_flags_args(_1, _2) ->
    begin
        {_3, _4} = dec_remote_nonnull_domain(_1, _2),
        {_5, _6} = dec_remote_nonnull_string(_1, _4),
        begin
            <<_:_6/binary,_7:32/unsigned,_/binary>> = _1,
            _8 = _6 + 4
        end,
        {{_3, _5, _7}, _8}
    end.

enc_remote_domain_detach_device_args(_1) ->
    case _1 of
        {_3, _2} ->
            [enc_remote_nonnull_domain(_3),
             enc_remote_nonnull_string(_2)]
    end.

dec_remote_domain_detach_device_args(_1, _2) ->
    begin
        {_3, _4} = dec_remote_nonnull_domain(_1, _2),
        {_5, _6} = dec_remote_nonnull_string(_1, _4),
        {{_3, _5}, _6}
    end.

enc_remote_domain_detach_device_flags_args(_1) ->
    case _1 of
        {_4, _3, _2} ->
            [enc_remote_nonnull_domain(_4),
             enc_remote_nonnull_string(_3),
             <<_2:32>>]
    end.

dec_remote_domain_detach_device_flags_args(_1, _2) ->
    begin
        {_3, _4} = dec_remote_nonnull_domain(_1, _2),
        {_5, _6} = dec_remote_nonnull_string(_1, _4),
        begin
            <<_:_6/binary,_7:32/unsigned,_/binary>> = _1,
            _8 = _6 + 4
        end,
        {{_3, _5, _7}, _8}
    end.

enc_remote_domain_update_device_flags_args(_1) ->
    case _1 of
        {_4, _3, _2} ->
            [enc_remote_nonnull_domain(_4),
             enc_remote_nonnull_string(_3),
             <<_2:32>>]
    end.

dec_remote_domain_update_device_flags_args(_1, _2) ->
    begin
        {_3, _4} = dec_remote_nonnull_domain(_1, _2),
        {_5, _6} = dec_remote_nonnull_string(_1, _4),
        begin
            <<_:_6/binary,_7:32/unsigned,_/binary>> = _1,
            _8 = _6 + 4
        end,
        {{_3, _5, _7}, _8}
    end.

enc_remote_domain_detach_device_alias_args(_1) ->
    case _1 of
        {_4, _3, _2} ->
            [enc_remote_nonnull_domain(_4),
             enc_remote_nonnull_string(_3),
             <<_2:32>>]
    end.

dec_remote_domain_detach_device_alias_args(_1, _2) ->
    begin
        {_3, _4} = dec_remote_nonnull_domain(_1, _2),
        {_5, _6} = dec_remote_nonnull_string(_1, _4),
        begin
            <<_:_6/binary,_7:32/unsigned,_/binary>> = _1,
            _8 = _6 + 4
        end,
        {{_3, _5, _7}, _8}
    end.

enc_remote_domain_get_autostart_args(_1) ->
    case _1 of
        {_2} ->
            [enc_remote_nonnull_domain(_2)]
    end.

dec_remote_domain_get_autostart_args(_1, _2) ->
    begin
        {_3, _4} = dec_remote_nonnull_domain(_1, _2),
        {{_3}, _4}
    end.

enc_remote_domain_get_autostart_ret(_1) ->
    case _1 of
        {_2} ->
            [<<_2:32>>]
    end.

dec_remote_domain_get_autostart_ret(_1, _2) ->
    begin
        begin
            <<_:_2/binary,_3:32/signed,_/binary>> = _1,
            _4 = _2 + 4
        end,
        {{_3}, _4}
    end.

enc_remote_domain_set_autostart_args(_1) ->
    case _1 of
        {_3, _2} ->
            [enc_remote_nonnull_domain(_3), <<_2:32>>]
    end.

dec_remote_domain_set_autostart_args(_1, _2) ->
    begin
        {_3, _4} = dec_remote_nonnull_domain(_1, _2),
        begin
            <<_:_4/binary,_5:32/signed,_/binary>> = _1,
            _6 = _4 + 4
        end,
        {{_3, _5}, _6}
    end.

enc_remote_domain_set_metadata_args(_1) ->
    case _1 of
        {_7, _6, _5, _4, _3, _2} ->
            [enc_remote_nonnull_domain(_7),
             <<_6:32>>,
             enc_remote_string(_5),
             enc_remote_string(_4),
             enc_remote_string(_3),
             <<_2:32>>]
    end.

dec_remote_domain_set_metadata_args(_1, _2) ->
    begin
        {_3, _4} = dec_remote_nonnull_domain(_1, _2),
        begin
            <<_:_4/binary,_5:32/signed,_/binary>> = _1,
            _6 = _4 + 4
        end,
        {_7, _8} = dec_remote_string(_1, _6),
        {_9, _10} = dec_remote_string(_1, _8),
        {_11, _12} = dec_remote_string(_1, _10),
        begin
            <<_:_12/binary,_13:32/unsigned,_/binary>> = _1,
            _14 = _12 + 4
        end,
        {{_3, _5, _7, _9, _11, _13}, _14}
    end.

enc_remote_domain_get_metadata_args(_1) ->
    case _1 of
        {_5, _4, _3, _2} ->
            [enc_remote_nonnull_domain(_5),
             <<_4:32>>,
             enc_remote_string(_3),
             <<_2:32>>]
    end.

dec_remote_domain_get_metadata_args(_1, _2) ->
    begin
        {_3, _4} = dec_remote_nonnull_domain(_1, _2),
        begin
            <<_:_4/binary,_5:32/signed,_/binary>> = _1,
            _6 = _4 + 4
        end,
        {_7, _8} = dec_remote_string(_1, _6),
        begin
            <<_:_8/binary,_9:32/unsigned,_/binary>> = _1,
            _10 = _8 + 4
        end,
        {{_3, _5, _7, _9}, _10}
    end.

enc_remote_domain_get_metadata_ret(_1) ->
    case _1 of
        {_2} ->
            [enc_remote_nonnull_string(_2)]
    end.

dec_remote_domain_get_metadata_ret(_1, _2) ->
    begin
        {_3, _4} = dec_remote_nonnull_string(_1, _2),
        {{_3}, _4}
    end.

enc_remote_domain_block_job_abort_args(_1) ->
    case _1 of
        {_4, _3, _2} ->
            [enc_remote_nonnull_domain(_4),
             enc_remote_nonnull_string(_3),
             <<_2:32>>]
    end.

dec_remote_domain_block_job_abort_args(_1, _2) ->
    begin
        {_3, _4} = dec_remote_nonnull_domain(_1, _2),
        {_5, _6} = dec_remote_nonnull_string(_1, _4),
        begin
            <<_:_6/binary,_7:32/unsigned,_/binary>> = _1,
            _8 = _6 + 4
        end,
        {{_3, _5, _7}, _8}
    end.

enc_remote_domain_get_block_job_info_args(_1) ->
    case _1 of
        {_4, _3, _2} ->
            [enc_remote_nonnull_domain(_4),
             enc_remote_nonnull_string(_3),
             <<_2:32>>]
    end.

dec_remote_domain_get_block_job_info_args(_1, _2) ->
    begin
        {_3, _4} = dec_remote_nonnull_domain(_1, _2),
        {_5, _6} = dec_remote_nonnull_string(_1, _4),
        begin
            <<_:_6/binary,_7:32/unsigned,_/binary>> = _1,
            _8 = _6 + 4
        end,
        {{_3, _5, _7}, _8}
    end.

enc_remote_domain_get_block_job_info_ret(_1) ->
    case _1 of
        {_6, _5, _4, _3, _2} ->
            [<<_6:32>>, <<_5:32>>, <<_4:64>>, <<_3:64>>, <<_2:64>>]
    end.

dec_remote_domain_get_block_job_info_ret(_1, _2) ->
    begin
        begin
            <<_:_2/binary,_3:32/signed,_/binary>> = _1,
            _4 = _2 + 4
        end,
        begin
            <<_:_4/binary,_5:32/signed,_/binary>> = _1,
            _6 = _4 + 4
        end,
        begin
            <<_:_6/binary,_7:64/unsigned,_/binary>> = _1,
            _8 = _6 + 8
        end,
        begin
            <<_:_8/binary,_9:64/unsigned,_/binary>> = _1,
            _10 = _8 + 8
        end,
        begin
            <<_:_10/binary,_11:64/unsigned,_/binary>> = _1,
            _12 = _10 + 8
        end,
        {{_3, _5, _7, _9, _11}, _12}
    end.

enc_remote_domain_block_job_set_speed_args(_1) ->
    case _1 of
        {_5, _4, _3, _2} ->
            [enc_remote_nonnull_domain(_5),
             enc_remote_nonnull_string(_4),
             <<_3:64>>,
             <<_2:32>>]
    end.

dec_remote_domain_block_job_set_speed_args(_1, _2) ->
    begin
        {_3, _4} = dec_remote_nonnull_domain(_1, _2),
        {_5, _6} = dec_remote_nonnull_string(_1, _4),
        begin
            <<_:_6/binary,_7:64/unsigned,_/binary>> = _1,
            _8 = _6 + 8
        end,
        begin
            <<_:_8/binary,_9:32/unsigned,_/binary>> = _1,
            _10 = _8 + 4
        end,
        {{_3, _5, _7, _9}, _10}
    end.

enc_remote_domain_block_pull_args(_1) ->
    case _1 of
        {_5, _4, _3, _2} ->
            [enc_remote_nonnull_domain(_5),
             enc_remote_nonnull_string(_4),
             <<_3:64>>,
             <<_2:32>>]
    end.

dec_remote_domain_block_pull_args(_1, _2) ->
    begin
        {_3, _4} = dec_remote_nonnull_domain(_1, _2),
        {_5, _6} = dec_remote_nonnull_string(_1, _4),
        begin
            <<_:_6/binary,_7:64/unsigned,_/binary>> = _1,
            _8 = _6 + 8
        end,
        begin
            <<_:_8/binary,_9:32/unsigned,_/binary>> = _1,
            _10 = _8 + 4
        end,
        {{_3, _5, _7, _9}, _10}
    end.

enc_remote_domain_block_rebase_args(_1) ->
    case _1 of
        {_6, _5, _4, _3, _2} ->
            [enc_remote_nonnull_domain(_6),
             enc_remote_nonnull_string(_5),
             enc_remote_string(_4),
             <<_3:64>>,
             <<_2:32>>]
    end.

dec_remote_domain_block_rebase_args(_1, _2) ->
    begin
        {_3, _4} = dec_remote_nonnull_domain(_1, _2),
        {_5, _6} = dec_remote_nonnull_string(_1, _4),
        {_7, _8} = dec_remote_string(_1, _6),
        begin
            <<_:_8/binary,_9:64/unsigned,_/binary>> = _1,
            _10 = _8 + 8
        end,
        begin
            <<_:_10/binary,_11:32/unsigned,_/binary>> = _1,
            _12 = _10 + 4
        end,
        {{_3, _5, _7, _9, _11}, _12}
    end.

enc_remote_domain_block_copy_args(_1) ->
    case _1 of
        {_8, _7, _6, _3, _2} ->
            [enc_remote_nonnull_domain(_8),
             enc_remote_nonnull_string(_7),
             enc_remote_nonnull_string(_6),
             begin
                 _5 = length(_3),
                 if
                     _5 =< 16 ->
                         [<<_5:32/unsigned>>,
                          lists:map(fun(_4) ->
                                           enc_remote_typed_param(_4)
                                    end,
                                    _3)];
                     true ->
                         exit({xdr, limit})
                 end
             end,
             <<_2:32>>]
    end.

dec_remote_domain_block_copy_args(_1, _2) ->
    begin
        {_3, _4} = dec_remote_nonnull_domain(_1, _2),
        {_5, _6} = dec_remote_nonnull_string(_1, _4),
        {_7, _8} = dec_remote_nonnull_string(_1, _6),
        {_9, _10} =
            begin
                <<_:_8/binary,_11:32/unsigned,_/binary>> = _1,
                map_elem(fun(_12, _13) ->
                                dec_remote_typed_param(_12, _13)
                         end,
                         _1,
                         _8 + 4,
                         16, _11)
            end,
        begin
            <<_:_10/binary,_14:32/unsigned,_/binary>> = _1,
            _15 = _10 + 4
        end,
        {{_3, _5, _7, _9, _14}, _15}
    end.

enc_remote_domain_block_commit_args(_1) ->
    case _1 of
        {_7, _6, _5, _4, _3, _2} ->
            [enc_remote_nonnull_domain(_7),
             enc_remote_nonnull_string(_6),
             enc_remote_string(_5),
             enc_remote_string(_4),
             <<_3:64>>,
             <<_2:32>>]
    end.

dec_remote_domain_block_commit_args(_1, _2) ->
    begin
        {_3, _4} = dec_remote_nonnull_domain(_1, _2),
        {_5, _6} = dec_remote_nonnull_string(_1, _4),
        {_7, _8} = dec_remote_string(_1, _6),
        {_9, _10} = dec_remote_string(_1, _8),
        begin
            <<_:_10/binary,_11:64/unsigned,_/binary>> = _1,
            _12 = _10 + 8
        end,
        begin
            <<_:_12/binary,_13:32/unsigned,_/binary>> = _1,
            _14 = _12 + 4
        end,
        {{_3, _5, _7, _9, _11, _13}, _14}
    end.

enc_remote_domain_set_block_io_tune_args(_1) ->
    case _1 of
        {_7, _6, _3, _2} ->
            [enc_remote_nonnull_domain(_7),
             enc_remote_nonnull_string(_6),
             begin
                 _5 = length(_3),
                 if
                     _5 =< 32 ->
                         [<<_5:32/unsigned>>,
                          lists:map(fun(_4) ->
                                           enc_remote_typed_param(_4)
                                    end,
                                    _3)];
                     true ->
                         exit({xdr, limit})
                 end
             end,
             <<_2:32>>]
    end.

dec_remote_domain_set_block_io_tune_args(_1, _2) ->
    begin
        {_3, _4} = dec_remote_nonnull_domain(_1, _2),
        {_5, _6} = dec_remote_nonnull_string(_1, _4),
        {_7, _8} =
            begin
                <<_:_6/binary,_9:32/unsigned,_/binary>> = _1,
                map_elem(fun(_10, _11) ->
                                dec_remote_typed_param(_10, _11)
                         end,
                         _1,
                         _6 + 4,
                         32, _9)
            end,
        begin
            <<_:_8/binary,_12:32/unsigned,_/binary>> = _1,
            _13 = _8 + 4
        end,
        {{_3, _5, _7, _12}, _13}
    end.

enc_remote_domain_get_block_io_tune_args(_1) ->
    case _1 of
        {_5, _4, _3, _2} ->
            [enc_remote_nonnull_domain(_5),
             enc_remote_string(_4),
             <<_3:32>>,
             <<_2:32>>]
    end.

dec_remote_domain_get_block_io_tune_args(_1, _2) ->
    begin
        {_3, _4} = dec_remote_nonnull_domain(_1, _2),
        {_5, _6} = dec_remote_string(_1, _4),
        begin
            <<_:_6/binary,_7:32/signed,_/binary>> = _1,
            _8 = _6 + 4
        end,
        begin
            <<_:_8/binary,_9:32/unsigned,_/binary>> = _1,
            _10 = _8 + 4
        end,
        {{_3, _5, _7, _9}, _10}
    end.

enc_remote_domain_get_block_io_tune_ret(_1) ->
    case _1 of
        {_3, _2} ->
            [begin
                 _5 = length(_3),
                 if
                     _5 =< 32 ->
                         [<<_5:32/unsigned>>,
                          lists:map(fun(_4) ->
                                           enc_remote_typed_param(_4)
                                    end,
                                    _3)];
                     true ->
                         exit({xdr, limit})
                 end
             end,
             <<_2:32>>]
    end.

dec_remote_domain_get_block_io_tune_ret(_1, _2) ->
    begin
        {_3, _4} =
            begin
                <<_:_2/binary,_5:32/unsigned,_/binary>> = _1,
                map_elem(fun(_6, _7) ->
                                dec_remote_typed_param(_6, _7)
                         end,
                         _1,
                         _2 + 4,
                         32, _5)
            end,
        begin
            <<_:_4/binary,_8:32/signed,_/binary>> = _1,
            _9 = _4 + 4
        end,
        {{_3, _8}, _9}
    end.

enc_remote_domain_get_cpu_stats_args(_1) ->
    case _1 of
        {_6, _5, _4, _3, _2} ->
            [enc_remote_nonnull_domain(_6),
             <<_5:32>>,
             <<_4:32>>,
             <<_3:32>>,
             <<_2:32>>]
    end.

dec_remote_domain_get_cpu_stats_args(_1, _2) ->
    begin
        {_3, _4} = dec_remote_nonnull_domain(_1, _2),
        begin
            <<_:_4/binary,_5:32/unsigned,_/binary>> = _1,
            _6 = _4 + 4
        end,
        begin
            <<_:_6/binary,_7:32/signed,_/binary>> = _1,
            _8 = _6 + 4
        end,
        begin
            <<_:_8/binary,_9:32/unsigned,_/binary>> = _1,
            _10 = _8 + 4
        end,
        begin
            <<_:_10/binary,_11:32/unsigned,_/binary>> = _1,
            _12 = _10 + 4
        end,
        {{_3, _5, _7, _9, _11}, _12}
    end.

enc_remote_domain_get_cpu_stats_ret(_1) ->
    case _1 of
        {_3, _2} ->
            [begin
                 _5 = length(_3),
                 if
                     _5 =< 2048 ->
                         [<<_5:32/unsigned>>,
                          lists:map(fun(_4) ->
                                           enc_remote_typed_param(_4)
                                    end,
                                    _3)];
                     true ->
                         exit({xdr, limit})
                 end
             end,
             <<_2:32>>]
    end.

dec_remote_domain_get_cpu_stats_ret(_1, _2) ->
    begin
        {_3, _4} =
            begin
                <<_:_2/binary,_5:32/unsigned,_/binary>> = _1,
                map_elem(fun(_6, _7) ->
                                dec_remote_typed_param(_6, _7)
                         end,
                         _1,
                         _2 + 4,
                         2048, _5)
            end,
        begin
            <<_:_4/binary,_8:32/signed,_/binary>> = _1,
            _9 = _4 + 4
        end,
        {{_3, _8}, _9}
    end.

enc_remote_domain_get_hostname_args(_1) ->
    case _1 of
        {_3, _2} ->
            [enc_remote_nonnull_domain(_3), <<_2:32>>]
    end.

dec_remote_domain_get_hostname_args(_1, _2) ->
    begin
        {_3, _4} = dec_remote_nonnull_domain(_1, _2),
        begin
            <<_:_4/binary,_5:32/unsigned,_/binary>> = _1,
            _6 = _4 + 4
        end,
        {{_3, _5}, _6}
    end.

enc_remote_domain_get_hostname_ret(_1) ->
    case _1 of
        {_2} ->
            [enc_remote_nonnull_string(_2)]
    end.

dec_remote_domain_get_hostname_ret(_1, _2) ->
    begin
        {_3, _4} = dec_remote_nonnull_string(_1, _2),
        {{_3}, _4}
    end.

enc_remote_connect_num_of_networks_ret(_1) ->
    case _1 of
        {_2} ->
            [<<_2:32>>]
    end.

dec_remote_connect_num_of_networks_ret(_1, _2) ->
    begin
        begin
            <<_:_2/binary,_3:32/signed,_/binary>> = _1,
            _4 = _2 + 4
        end,
        {{_3}, _4}
    end.

enc_remote_connect_list_networks_args(_1) ->
    case _1 of
        {_2} ->
            [<<_2:32>>]
    end.

dec_remote_connect_list_networks_args(_1, _2) ->
    begin
        begin
            <<_:_2/binary,_3:32/signed,_/binary>> = _1,
            _4 = _2 + 4
        end,
        {{_3}, _4}
    end.

enc_remote_connect_list_networks_ret(_1) ->
    case _1 of
        {_2} ->
            [begin
                 _4 = length(_2),
                 if
                     _4 =< 16384 ->
                         [<<_4:32/unsigned>>,
                          lists:map(fun(_3) ->
                                           enc_remote_nonnull_string(_3)
                                    end,
                                    _2)];
                     true ->
                         exit({xdr, limit})
                 end
             end]
    end.

dec_remote_connect_list_networks_ret(_1, _2) ->
    begin
        {_3, _4} =
            begin
                <<_:_2/binary,_5:32/unsigned,_/binary>> = _1,
                map_elem(fun(_6, _7) ->
                                dec_remote_nonnull_string(_6, _7)
                         end,
                         _1,
                         _2 + 4,
                         16384, _5)
            end,
        {{_3}, _4}
    end.

enc_remote_connect_num_of_defined_networks_ret(_1) ->
    case _1 of
        {_2} ->
            [<<_2:32>>]
    end.

dec_remote_connect_num_of_defined_networks_ret(_1, _2) ->
    begin
        begin
            <<_:_2/binary,_3:32/signed,_/binary>> = _1,
            _4 = _2 + 4
        end,
        {{_3}, _4}
    end.

enc_remote_connect_list_defined_networks_args(_1) ->
    case _1 of
        {_2} ->
            [<<_2:32>>]
    end.

dec_remote_connect_list_defined_networks_args(_1, _2) ->
    begin
        begin
            <<_:_2/binary,_3:32/signed,_/binary>> = _1,
            _4 = _2 + 4
        end,
        {{_3}, _4}
    end.

enc_remote_connect_list_defined_networks_ret(_1) ->
    case _1 of
        {_2} ->
            [begin
                 _4 = length(_2),
                 if
                     _4 =< 16384 ->
                         [<<_4:32/unsigned>>,
                          lists:map(fun(_3) ->
                                           enc_remote_nonnull_string(_3)
                                    end,
                                    _2)];
                     true ->
                         exit({xdr, limit})
                 end
             end]
    end.

dec_remote_connect_list_defined_networks_ret(_1, _2) ->
    begin
        {_3, _4} =
            begin
                <<_:_2/binary,_5:32/unsigned,_/binary>> = _1,
                map_elem(fun(_6, _7) ->
                                dec_remote_nonnull_string(_6, _7)
                         end,
                         _1,
                         _2 + 4,
                         16384, _5)
            end,
        {{_3}, _4}
    end.

enc_remote_network_lookup_by_uuid_args(_1) ->
    case _1 of
        {_2} ->
            [enc_remote_uuid(_2)]
    end.

dec_remote_network_lookup_by_uuid_args(_1, _2) ->
    begin
        {_3, _4} = dec_remote_uuid(_1, _2),
        {{_3}, _4}
    end.

enc_remote_network_lookup_by_uuid_ret(_1) ->
    case _1 of
        {_2} ->
            [enc_remote_nonnull_network(_2)]
    end.

dec_remote_network_lookup_by_uuid_ret(_1, _2) ->
    begin
        {_3, _4} = dec_remote_nonnull_network(_1, _2),
        {{_3}, _4}
    end.

enc_remote_network_lookup_by_name_args(_1) ->
    case _1 of
        {_2} ->
            [enc_remote_nonnull_string(_2)]
    end.

dec_remote_network_lookup_by_name_args(_1, _2) ->
    begin
        {_3, _4} = dec_remote_nonnull_string(_1, _2),
        {{_3}, _4}
    end.

enc_remote_network_lookup_by_name_ret(_1) ->
    case _1 of
        {_2} ->
            [enc_remote_nonnull_network(_2)]
    end.

dec_remote_network_lookup_by_name_ret(_1, _2) ->
    begin
        {_3, _4} = dec_remote_nonnull_network(_1, _2),
        {{_3}, _4}
    end.

enc_remote_network_create_xml_args(_1) ->
    case _1 of
        {_2} ->
            [enc_remote_nonnull_string(_2)]
    end.

dec_remote_network_create_xml_args(_1, _2) ->
    begin
        {_3, _4} = dec_remote_nonnull_string(_1, _2),
        {{_3}, _4}
    end.

enc_remote_network_create_xml_ret(_1) ->
    case _1 of
        {_2} ->
            [enc_remote_nonnull_network(_2)]
    end.

dec_remote_network_create_xml_ret(_1, _2) ->
    begin
        {_3, _4} = dec_remote_nonnull_network(_1, _2),
        {{_3}, _4}
    end.

enc_remote_network_define_xml_args(_1) ->
    case _1 of
        {_2} ->
            [enc_remote_nonnull_string(_2)]
    end.

dec_remote_network_define_xml_args(_1, _2) ->
    begin
        {_3, _4} = dec_remote_nonnull_string(_1, _2),
        {{_3}, _4}
    end.

enc_remote_network_define_xml_ret(_1) ->
    case _1 of
        {_2} ->
            [enc_remote_nonnull_network(_2)]
    end.

dec_remote_network_define_xml_ret(_1, _2) ->
    begin
        {_3, _4} = dec_remote_nonnull_network(_1, _2),
        {{_3}, _4}
    end.

enc_remote_network_undefine_args(_1) ->
    case _1 of
        {_2} ->
            [enc_remote_nonnull_network(_2)]
    end.

dec_remote_network_undefine_args(_1, _2) ->
    begin
        {_3, _4} = dec_remote_nonnull_network(_1, _2),
        {{_3}, _4}
    end.

enc_remote_network_update_args(_1) ->
    case _1 of
        {_7, _6, _5, _4, _3, _2} ->
            [enc_remote_nonnull_network(_7),
             <<_6:32>>,
             <<_5:32>>,
             <<_4:32>>,
             enc_remote_nonnull_string(_3),
             <<_2:32>>]
    end.

dec_remote_network_update_args(_1, _2) ->
    begin
        {_3, _4} = dec_remote_nonnull_network(_1, _2),
        begin
            <<_:_4/binary,_5:32/unsigned,_/binary>> = _1,
            _6 = _4 + 4
        end,
        begin
            <<_:_6/binary,_7:32/unsigned,_/binary>> = _1,
            _8 = _6 + 4
        end,
        begin
            <<_:_8/binary,_9:32/signed,_/binary>> = _1,
            _10 = _8 + 4
        end,
        {_11, _12} = dec_remote_nonnull_string(_1, _10),
        begin
            <<_:_12/binary,_13:32/unsigned,_/binary>> = _1,
            _14 = _12 + 4
        end,
        {{_3, _5, _7, _9, _11, _13}, _14}
    end.

enc_remote_network_create_args(_1) ->
    case _1 of
        {_2} ->
            [enc_remote_nonnull_network(_2)]
    end.

dec_remote_network_create_args(_1, _2) ->
    begin
        {_3, _4} = dec_remote_nonnull_network(_1, _2),
        {{_3}, _4}
    end.

enc_remote_network_destroy_args(_1) ->
    case _1 of
        {_2} ->
            [enc_remote_nonnull_network(_2)]
    end.

dec_remote_network_destroy_args(_1, _2) ->
    begin
        {_3, _4} = dec_remote_nonnull_network(_1, _2),
        {{_3}, _4}
    end.

enc_remote_network_get_xml_desc_args(_1) ->
    case _1 of
        {_3, _2} ->
            [enc_remote_nonnull_network(_3), <<_2:32>>]
    end.

dec_remote_network_get_xml_desc_args(_1, _2) ->
    begin
        {_3, _4} = dec_remote_nonnull_network(_1, _2),
        begin
            <<_:_4/binary,_5:32/unsigned,_/binary>> = _1,
            _6 = _4 + 4
        end,
        {{_3, _5}, _6}
    end.

enc_remote_network_get_xml_desc_ret(_1) ->
    case _1 of
        {_2} ->
            [enc_remote_nonnull_string(_2)]
    end.

dec_remote_network_get_xml_desc_ret(_1, _2) ->
    begin
        {_3, _4} = dec_remote_nonnull_string(_1, _2),
        {{_3}, _4}
    end.

enc_remote_network_get_bridge_name_args(_1) ->
    case _1 of
        {_2} ->
            [enc_remote_nonnull_network(_2)]
    end.

dec_remote_network_get_bridge_name_args(_1, _2) ->
    begin
        {_3, _4} = dec_remote_nonnull_network(_1, _2),
        {{_3}, _4}
    end.

enc_remote_network_get_bridge_name_ret(_1) ->
    case _1 of
        {_2} ->
            [enc_remote_nonnull_string(_2)]
    end.

dec_remote_network_get_bridge_name_ret(_1, _2) ->
    begin
        {_3, _4} = dec_remote_nonnull_string(_1, _2),
        {{_3}, _4}
    end.

enc_remote_network_get_autostart_args(_1) ->
    case _1 of
        {_2} ->
            [enc_remote_nonnull_network(_2)]
    end.

dec_remote_network_get_autostart_args(_1, _2) ->
    begin
        {_3, _4} = dec_remote_nonnull_network(_1, _2),
        {{_3}, _4}
    end.

enc_remote_network_get_autostart_ret(_1) ->
    case _1 of
        {_2} ->
            [<<_2:32>>]
    end.

dec_remote_network_get_autostart_ret(_1, _2) ->
    begin
        begin
            <<_:_2/binary,_3:32/signed,_/binary>> = _1,
            _4 = _2 + 4
        end,
        {{_3}, _4}
    end.

enc_remote_network_set_autostart_args(_1) ->
    case _1 of
        {_3, _2} ->
            [enc_remote_nonnull_network(_3), <<_2:32>>]
    end.

dec_remote_network_set_autostart_args(_1, _2) ->
    begin
        {_3, _4} = dec_remote_nonnull_network(_1, _2),
        begin
            <<_:_4/binary,_5:32/signed,_/binary>> = _1,
            _6 = _4 + 4
        end,
        {{_3, _5}, _6}
    end.

enc_remote_connect_num_of_nwfilters_ret(_1) ->
    case _1 of
        {_2} ->
            [<<_2:32>>]
    end.

dec_remote_connect_num_of_nwfilters_ret(_1, _2) ->
    begin
        begin
            <<_:_2/binary,_3:32/signed,_/binary>> = _1,
            _4 = _2 + 4
        end,
        {{_3}, _4}
    end.

enc_remote_connect_list_nwfilters_args(_1) ->
    case _1 of
        {_2} ->
            [<<_2:32>>]
    end.

dec_remote_connect_list_nwfilters_args(_1, _2) ->
    begin
        begin
            <<_:_2/binary,_3:32/signed,_/binary>> = _1,
            _4 = _2 + 4
        end,
        {{_3}, _4}
    end.

enc_remote_connect_list_nwfilters_ret(_1) ->
    case _1 of
        {_2} ->
            [begin
                 _4 = length(_2),
                 if
                     _4 =< 16384 ->
                         [<<_4:32/unsigned>>,
                          lists:map(fun(_3) ->
                                           enc_remote_nonnull_string(_3)
                                    end,
                                    _2)];
                     true ->
                         exit({xdr, limit})
                 end
             end]
    end.

dec_remote_connect_list_nwfilters_ret(_1, _2) ->
    begin
        {_3, _4} =
            begin
                <<_:_2/binary,_5:32/unsigned,_/binary>> = _1,
                map_elem(fun(_6, _7) ->
                                dec_remote_nonnull_string(_6, _7)
                         end,
                         _1,
                         _2 + 4,
                         16384, _5)
            end,
        {{_3}, _4}
    end.

enc_remote_nwfilter_lookup_by_uuid_args(_1) ->
    case _1 of
        {_2} ->
            [enc_remote_uuid(_2)]
    end.

dec_remote_nwfilter_lookup_by_uuid_args(_1, _2) ->
    begin
        {_3, _4} = dec_remote_uuid(_1, _2),
        {{_3}, _4}
    end.

enc_remote_nwfilter_lookup_by_uuid_ret(_1) ->
    case _1 of
        {_2} ->
            [enc_remote_nonnull_nwfilter(_2)]
    end.

dec_remote_nwfilter_lookup_by_uuid_ret(_1, _2) ->
    begin
        {_3, _4} = dec_remote_nonnull_nwfilter(_1, _2),
        {{_3}, _4}
    end.

enc_remote_nwfilter_lookup_by_name_args(_1) ->
    case _1 of
        {_2} ->
            [enc_remote_nonnull_string(_2)]
    end.

dec_remote_nwfilter_lookup_by_name_args(_1, _2) ->
    begin
        {_3, _4} = dec_remote_nonnull_string(_1, _2),
        {{_3}, _4}
    end.

enc_remote_nwfilter_lookup_by_name_ret(_1) ->
    case _1 of
        {_2} ->
            [enc_remote_nonnull_nwfilter(_2)]
    end.

dec_remote_nwfilter_lookup_by_name_ret(_1, _2) ->
    begin
        {_3, _4} = dec_remote_nonnull_nwfilter(_1, _2),
        {{_3}, _4}
    end.

enc_remote_nwfilter_define_xml_args(_1) ->
    case _1 of
        {_2} ->
            [enc_remote_nonnull_string(_2)]
    end.

dec_remote_nwfilter_define_xml_args(_1, _2) ->
    begin
        {_3, _4} = dec_remote_nonnull_string(_1, _2),
        {{_3}, _4}
    end.

enc_remote_nwfilter_define_xml_ret(_1) ->
    case _1 of
        {_2} ->
            [enc_remote_nonnull_nwfilter(_2)]
    end.

dec_remote_nwfilter_define_xml_ret(_1, _2) ->
    begin
        {_3, _4} = dec_remote_nonnull_nwfilter(_1, _2),
        {{_3}, _4}
    end.

enc_remote_nwfilter_undefine_args(_1) ->
    case _1 of
        {_2} ->
            [enc_remote_nonnull_nwfilter(_2)]
    end.

dec_remote_nwfilter_undefine_args(_1, _2) ->
    begin
        {_3, _4} = dec_remote_nonnull_nwfilter(_1, _2),
        {{_3}, _4}
    end.

enc_remote_nwfilter_get_xml_desc_args(_1) ->
    case _1 of
        {_3, _2} ->
            [enc_remote_nonnull_nwfilter(_3), <<_2:32>>]
    end.

dec_remote_nwfilter_get_xml_desc_args(_1, _2) ->
    begin
        {_3, _4} = dec_remote_nonnull_nwfilter(_1, _2),
        begin
            <<_:_4/binary,_5:32/unsigned,_/binary>> = _1,
            _6 = _4 + 4
        end,
        {{_3, _5}, _6}
    end.

enc_remote_nwfilter_get_xml_desc_ret(_1) ->
    case _1 of
        {_2} ->
            [enc_remote_nonnull_string(_2)]
    end.

dec_remote_nwfilter_get_xml_desc_ret(_1, _2) ->
    begin
        {_3, _4} = dec_remote_nonnull_string(_1, _2),
        {{_3}, _4}
    end.

enc_remote_connect_num_of_interfaces_ret(_1) ->
    case _1 of
        {_2} ->
            [<<_2:32>>]
    end.

dec_remote_connect_num_of_interfaces_ret(_1, _2) ->
    begin
        begin
            <<_:_2/binary,_3:32/signed,_/binary>> = _1,
            _4 = _2 + 4
        end,
        {{_3}, _4}
    end.

enc_remote_connect_list_interfaces_args(_1) ->
    case _1 of
        {_2} ->
            [<<_2:32>>]
    end.

dec_remote_connect_list_interfaces_args(_1, _2) ->
    begin
        begin
            <<_:_2/binary,_3:32/signed,_/binary>> = _1,
            _4 = _2 + 4
        end,
        {{_3}, _4}
    end.

enc_remote_connect_list_interfaces_ret(_1) ->
    case _1 of
        {_2} ->
            [begin
                 _4 = length(_2),
                 if
                     _4 =< 16384 ->
                         [<<_4:32/unsigned>>,
                          lists:map(fun(_3) ->
                                           enc_remote_nonnull_string(_3)
                                    end,
                                    _2)];
                     true ->
                         exit({xdr, limit})
                 end
             end]
    end.

dec_remote_connect_list_interfaces_ret(_1, _2) ->
    begin
        {_3, _4} =
            begin
                <<_:_2/binary,_5:32/unsigned,_/binary>> = _1,
                map_elem(fun(_6, _7) ->
                                dec_remote_nonnull_string(_6, _7)
                         end,
                         _1,
                         _2 + 4,
                         16384, _5)
            end,
        {{_3}, _4}
    end.

enc_remote_connect_num_of_defined_interfaces_ret(_1) ->
    case _1 of
        {_2} ->
            [<<_2:32>>]
    end.

dec_remote_connect_num_of_defined_interfaces_ret(_1, _2) ->
    begin
        begin
            <<_:_2/binary,_3:32/signed,_/binary>> = _1,
            _4 = _2 + 4
        end,
        {{_3}, _4}
    end.

enc_remote_connect_list_defined_interfaces_args(_1) ->
    case _1 of
        {_2} ->
            [<<_2:32>>]
    end.

dec_remote_connect_list_defined_interfaces_args(_1, _2) ->
    begin
        begin
            <<_:_2/binary,_3:32/signed,_/binary>> = _1,
            _4 = _2 + 4
        end,
        {{_3}, _4}
    end.

enc_remote_connect_list_defined_interfaces_ret(_1) ->
    case _1 of
        {_2} ->
            [begin
                 _4 = length(_2),
                 if
                     _4 =< 16384 ->
                         [<<_4:32/unsigned>>,
                          lists:map(fun(_3) ->
                                           enc_remote_nonnull_string(_3)
                                    end,
                                    _2)];
                     true ->
                         exit({xdr, limit})
                 end
             end]
    end.

dec_remote_connect_list_defined_interfaces_ret(_1, _2) ->
    begin
        {_3, _4} =
            begin
                <<_:_2/binary,_5:32/unsigned,_/binary>> = _1,
                map_elem(fun(_6, _7) ->
                                dec_remote_nonnull_string(_6, _7)
                         end,
                         _1,
                         _2 + 4,
                         16384, _5)
            end,
        {{_3}, _4}
    end.

enc_remote_interface_lookup_by_name_args(_1) ->
    case _1 of
        {_2} ->
            [enc_remote_nonnull_string(_2)]
    end.

dec_remote_interface_lookup_by_name_args(_1, _2) ->
    begin
        {_3, _4} = dec_remote_nonnull_string(_1, _2),
        {{_3}, _4}
    end.

enc_remote_interface_lookup_by_name_ret(_1) ->
    case _1 of
        {_2} ->
            [enc_remote_nonnull_interface(_2)]
    end.

dec_remote_interface_lookup_by_name_ret(_1, _2) ->
    begin
        {_3, _4} = dec_remote_nonnull_interface(_1, _2),
        {{_3}, _4}
    end.

enc_remote_interface_lookup_by_mac_string_args(_1) ->
    case _1 of
        {_2} ->
            [enc_remote_nonnull_string(_2)]
    end.

dec_remote_interface_lookup_by_mac_string_args(_1, _2) ->
    begin
        {_3, _4} = dec_remote_nonnull_string(_1, _2),
        {{_3}, _4}
    end.

enc_remote_interface_lookup_by_mac_string_ret(_1) ->
    case _1 of
        {_2} ->
            [enc_remote_nonnull_interface(_2)]
    end.

dec_remote_interface_lookup_by_mac_string_ret(_1, _2) ->
    begin
        {_3, _4} = dec_remote_nonnull_interface(_1, _2),
        {{_3}, _4}
    end.

enc_remote_interface_get_xml_desc_args(_1) ->
    case _1 of
        {_3, _2} ->
            [enc_remote_nonnull_interface(_3), <<_2:32>>]
    end.

dec_remote_interface_get_xml_desc_args(_1, _2) ->
    begin
        {_3, _4} = dec_remote_nonnull_interface(_1, _2),
        begin
            <<_:_4/binary,_5:32/unsigned,_/binary>> = _1,
            _6 = _4 + 4
        end,
        {{_3, _5}, _6}
    end.

enc_remote_interface_get_xml_desc_ret(_1) ->
    case _1 of
        {_2} ->
            [enc_remote_nonnull_string(_2)]
    end.

dec_remote_interface_get_xml_desc_ret(_1, _2) ->
    begin
        {_3, _4} = dec_remote_nonnull_string(_1, _2),
        {{_3}, _4}
    end.

enc_remote_interface_define_xml_args(_1) ->
    case _1 of
        {_3, _2} ->
            [enc_remote_nonnull_string(_3), <<_2:32>>]
    end.

dec_remote_interface_define_xml_args(_1, _2) ->
    begin
        {_3, _4} = dec_remote_nonnull_string(_1, _2),
        begin
            <<_:_4/binary,_5:32/unsigned,_/binary>> = _1,
            _6 = _4 + 4
        end,
        {{_3, _5}, _6}
    end.

enc_remote_interface_define_xml_ret(_1) ->
    case _1 of
        {_2} ->
            [enc_remote_nonnull_interface(_2)]
    end.

dec_remote_interface_define_xml_ret(_1, _2) ->
    begin
        {_3, _4} = dec_remote_nonnull_interface(_1, _2),
        {{_3}, _4}
    end.

enc_remote_interface_undefine_args(_1) ->
    case _1 of
        {_2} ->
            [enc_remote_nonnull_interface(_2)]
    end.

dec_remote_interface_undefine_args(_1, _2) ->
    begin
        {_3, _4} = dec_remote_nonnull_interface(_1, _2),
        {{_3}, _4}
    end.

enc_remote_interface_create_args(_1) ->
    case _1 of
        {_3, _2} ->
            [enc_remote_nonnull_interface(_3), <<_2:32>>]
    end.

dec_remote_interface_create_args(_1, _2) ->
    begin
        {_3, _4} = dec_remote_nonnull_interface(_1, _2),
        begin
            <<_:_4/binary,_5:32/unsigned,_/binary>> = _1,
            _6 = _4 + 4
        end,
        {{_3, _5}, _6}
    end.

enc_remote_interface_destroy_args(_1) ->
    case _1 of
        {_3, _2} ->
            [enc_remote_nonnull_interface(_3), <<_2:32>>]
    end.

dec_remote_interface_destroy_args(_1, _2) ->
    begin
        {_3, _4} = dec_remote_nonnull_interface(_1, _2),
        begin
            <<_:_4/binary,_5:32/unsigned,_/binary>> = _1,
            _6 = _4 + 4
        end,
        {{_3, _5}, _6}
    end.

enc_remote_interface_change_begin_args(_1) ->
    case _1 of
        {_2} ->
            [<<_2:32>>]
    end.

dec_remote_interface_change_begin_args(_1, _2) ->
    begin
        begin
            <<_:_2/binary,_3:32/unsigned,_/binary>> = _1,
            _4 = _2 + 4
        end,
        {{_3}, _4}
    end.

enc_remote_interface_change_commit_args(_1) ->
    case _1 of
        {_2} ->
            [<<_2:32>>]
    end.

dec_remote_interface_change_commit_args(_1, _2) ->
    begin
        begin
            <<_:_2/binary,_3:32/unsigned,_/binary>> = _1,
            _4 = _2 + 4
        end,
        {{_3}, _4}
    end.

enc_remote_interface_change_rollback_args(_1) ->
    case _1 of
        {_2} ->
            [<<_2:32>>]
    end.

dec_remote_interface_change_rollback_args(_1, _2) ->
    begin
        begin
            <<_:_2/binary,_3:32/unsigned,_/binary>> = _1,
            _4 = _2 + 4
        end,
        {{_3}, _4}
    end.

enc_remote_auth_list_ret(_1) ->
    case _1 of
        {_2} ->
            [begin
                 _4 = length(_2),
                 if
                     _4 =< 20 ->
                         [<<_4:32/unsigned>>,
                          lists:map(fun(_3) ->
                                           enc_remote_auth_type(_3)
                                    end,
                                    _2)];
                     true ->
                         exit({xdr, limit})
                 end
             end]
    end.

dec_remote_auth_list_ret(_1, _2) ->
    begin
        {_3, _4} =
            begin
                <<_:_2/binary,_5:32/unsigned,_/binary>> = _1,
                map_elem(fun(_6, _7) ->
                                dec_remote_auth_type(_6, _7)
                         end,
                         _1,
                         _2 + 4,
                         20, _5)
            end,
        {{_3}, _4}
    end.

enc_remote_auth_sasl_init_ret(_1) ->
    case _1 of
        {_2} ->
            [enc_remote_nonnull_string(_2)]
    end.

dec_remote_auth_sasl_init_ret(_1, _2) ->
    begin
        {_3, _4} = dec_remote_nonnull_string(_1, _2),
        {{_3}, _4}
    end.

enc_remote_auth_sasl_start_args(_1) ->
    case _1 of
        {_6, _5, _2} ->
            [enc_remote_nonnull_string(_6),
             <<_5:32>>,
             begin
                 _4 = length(_2),
                 if
                     _4 =< 65536 ->
                         [<<_4:32/unsigned>>,
                          lists:map(fun(_3) ->
                                           <<_3:32>>
                                    end,
                                    _2)];
                     true ->
                         exit({xdr, limit})
                 end
             end]
    end.

dec_remote_auth_sasl_start_args(_1, _2) ->
    begin
        {_3, _4} = dec_remote_nonnull_string(_1, _2),
        begin
            <<_:_4/binary,_5:32/signed,_/binary>> = _1,
            _6 = _4 + 4
        end,
        {_7, _8} =
            begin
                <<_:_6/binary,_9:32/unsigned,_/binary>> = _1,
                map_elem(fun(_10, _11) ->
                                begin
                                    <<_:_11/binary,
                                      _12:32/signed,
                                      _/binary>> =
                                        _10,
                                    {_12, _11 + 4}
                                end
                         end,
                         _1,
                         _6 + 4,
                         65536, _9)
            end,
        {{_3, _5, _7}, _8}
    end.

enc_remote_auth_sasl_start_ret(_1) ->
    case _1 of
        {_6, _5, _2} ->
            [<<_6:32>>,
             <<_5:32>>,
             begin
                 _4 = length(_2),
                 if
                     _4 =< 65536 ->
                         [<<_4:32/unsigned>>,
                          lists:map(fun(_3) ->
                                           <<_3:32>>
                                    end,
                                    _2)];
                     true ->
                         exit({xdr, limit})
                 end
             end]
    end.

dec_remote_auth_sasl_start_ret(_1, _2) ->
    begin
        begin
            <<_:_2/binary,_3:32/signed,_/binary>> = _1,
            _4 = _2 + 4
        end,
        begin
            <<_:_4/binary,_5:32/signed,_/binary>> = _1,
            _6 = _4 + 4
        end,
        {_7, _8} =
            begin
                <<_:_6/binary,_9:32/unsigned,_/binary>> = _1,
                map_elem(fun(_10, _11) ->
                                begin
                                    <<_:_11/binary,
                                      _12:32/signed,
                                      _/binary>> =
                                        _10,
                                    {_12, _11 + 4}
                                end
                         end,
                         _1,
                         _6 + 4,
                         65536, _9)
            end,
        {{_3, _5, _7}, _8}
    end.

enc_remote_auth_sasl_step_args(_1) ->
    case _1 of
        {_5, _2} ->
            [<<_5:32>>,
             begin
                 _4 = length(_2),
                 if
                     _4 =< 65536 ->
                         [<<_4:32/unsigned>>,
                          lists:map(fun(_3) ->
                                           <<_3:32>>
                                    end,
                                    _2)];
                     true ->
                         exit({xdr, limit})
                 end
             end]
    end.

dec_remote_auth_sasl_step_args(_1, _2) ->
    begin
        begin
            <<_:_2/binary,_3:32/signed,_/binary>> = _1,
            _4 = _2 + 4
        end,
        {_5, _6} =
            begin
                <<_:_4/binary,_7:32/unsigned,_/binary>> = _1,
                map_elem(fun(_8, _9) ->
                                begin
                                    <<_:_9/binary,_10:32/signed,_/binary>> =
                                        _8,
                                    {_10, _9 + 4}
                                end
                         end,
                         _1,
                         _4 + 4,
                         65536, _7)
            end,
        {{_3, _5}, _6}
    end.

enc_remote_auth_sasl_step_ret(_1) ->
    case _1 of
        {_6, _5, _2} ->
            [<<_6:32>>,
             <<_5:32>>,
             begin
                 _4 = length(_2),
                 if
                     _4 =< 65536 ->
                         [<<_4:32/unsigned>>,
                          lists:map(fun(_3) ->
                                           <<_3:32>>
                                    end,
                                    _2)];
                     true ->
                         exit({xdr, limit})
                 end
             end]
    end.

dec_remote_auth_sasl_step_ret(_1, _2) ->
    begin
        begin
            <<_:_2/binary,_3:32/signed,_/binary>> = _1,
            _4 = _2 + 4
        end,
        begin
            <<_:_4/binary,_5:32/signed,_/binary>> = _1,
            _6 = _4 + 4
        end,
        {_7, _8} =
            begin
                <<_:_6/binary,_9:32/unsigned,_/binary>> = _1,
                map_elem(fun(_10, _11) ->
                                begin
                                    <<_:_11/binary,
                                      _12:32/signed,
                                      _/binary>> =
                                        _10,
                                    {_12, _11 + 4}
                                end
                         end,
                         _1,
                         _6 + 4,
                         65536, _9)
            end,
        {{_3, _5, _7}, _8}
    end.

enc_remote_auth_polkit_ret(_1) ->
    case _1 of
        {_2} ->
            [<<_2:32>>]
    end.

dec_remote_auth_polkit_ret(_1, _2) ->
    begin
        begin
            <<_:_2/binary,_3:32/signed,_/binary>> = _1,
            _4 = _2 + 4
        end,
        {{_3}, _4}
    end.

enc_remote_connect_num_of_storage_pools_ret(_1) ->
    case _1 of
        {_2} ->
            [<<_2:32>>]
    end.

dec_remote_connect_num_of_storage_pools_ret(_1, _2) ->
    begin
        begin
            <<_:_2/binary,_3:32/signed,_/binary>> = _1,
            _4 = _2 + 4
        end,
        {{_3}, _4}
    end.

enc_remote_connect_list_storage_pools_args(_1) ->
    case _1 of
        {_2} ->
            [<<_2:32>>]
    end.

dec_remote_connect_list_storage_pools_args(_1, _2) ->
    begin
        begin
            <<_:_2/binary,_3:32/signed,_/binary>> = _1,
            _4 = _2 + 4
        end,
        {{_3}, _4}
    end.

enc_remote_connect_list_storage_pools_ret(_1) ->
    case _1 of
        {_2} ->
            [begin
                 _4 = length(_2),
                 if
                     _4 =< 16384 ->
                         [<<_4:32/unsigned>>,
                          lists:map(fun(_3) ->
                                           enc_remote_nonnull_string(_3)
                                    end,
                                    _2)];
                     true ->
                         exit({xdr, limit})
                 end
             end]
    end.

dec_remote_connect_list_storage_pools_ret(_1, _2) ->
    begin
        {_3, _4} =
            begin
                <<_:_2/binary,_5:32/unsigned,_/binary>> = _1,
                map_elem(fun(_6, _7) ->
                                dec_remote_nonnull_string(_6, _7)
                         end,
                         _1,
                         _2 + 4,
                         16384, _5)
            end,
        {{_3}, _4}
    end.

enc_remote_connect_num_of_defined_storage_pools_ret(_1) ->
    case _1 of
        {_2} ->
            [<<_2:32>>]
    end.

dec_remote_connect_num_of_defined_storage_pools_ret(_1, _2) ->
    begin
        begin
            <<_:_2/binary,_3:32/signed,_/binary>> = _1,
            _4 = _2 + 4
        end,
        {{_3}, _4}
    end.

enc_remote_connect_list_defined_storage_pools_args(_1) ->
    case _1 of
        {_2} ->
            [<<_2:32>>]
    end.

dec_remote_connect_list_defined_storage_pools_args(_1, _2) ->
    begin
        begin
            <<_:_2/binary,_3:32/signed,_/binary>> = _1,
            _4 = _2 + 4
        end,
        {{_3}, _4}
    end.

enc_remote_connect_list_defined_storage_pools_ret(_1) ->
    case _1 of
        {_2} ->
            [begin
                 _4 = length(_2),
                 if
                     _4 =< 16384 ->
                         [<<_4:32/unsigned>>,
                          lists:map(fun(_3) ->
                                           enc_remote_nonnull_string(_3)
                                    end,
                                    _2)];
                     true ->
                         exit({xdr, limit})
                 end
             end]
    end.

dec_remote_connect_list_defined_storage_pools_ret(_1, _2) ->
    begin
        {_3, _4} =
            begin
                <<_:_2/binary,_5:32/unsigned,_/binary>> = _1,
                map_elem(fun(_6, _7) ->
                                dec_remote_nonnull_string(_6, _7)
                         end,
                         _1,
                         _2 + 4,
                         16384, _5)
            end,
        {{_3}, _4}
    end.

enc_remote_connect_find_storage_pool_sources_args(_1) ->
    case _1 of
        {_4, _3, _2} ->
            [enc_remote_nonnull_string(_4),
             enc_remote_string(_3),
             <<_2:32>>]
    end.

dec_remote_connect_find_storage_pool_sources_args(_1, _2) ->
    begin
        {_3, _4} = dec_remote_nonnull_string(_1, _2),
        {_5, _6} = dec_remote_string(_1, _4),
        begin
            <<_:_6/binary,_7:32/unsigned,_/binary>> = _1,
            _8 = _6 + 4
        end,
        {{_3, _5, _7}, _8}
    end.

enc_remote_connect_find_storage_pool_sources_ret(_1) ->
    case _1 of
        {_2} ->
            [enc_remote_nonnull_string(_2)]
    end.

dec_remote_connect_find_storage_pool_sources_ret(_1, _2) ->
    begin
        {_3, _4} = dec_remote_nonnull_string(_1, _2),
        {{_3}, _4}
    end.

enc_remote_storage_pool_lookup_by_uuid_args(_1) ->
    case _1 of
        {_2} ->
            [enc_remote_uuid(_2)]
    end.

dec_remote_storage_pool_lookup_by_uuid_args(_1, _2) ->
    begin
        {_3, _4} = dec_remote_uuid(_1, _2),
        {{_3}, _4}
    end.

enc_remote_storage_pool_lookup_by_uuid_ret(_1) ->
    case _1 of
        {_2} ->
            [enc_remote_nonnull_storage_pool(_2)]
    end.

dec_remote_storage_pool_lookup_by_uuid_ret(_1, _2) ->
    begin
        {_3, _4} = dec_remote_nonnull_storage_pool(_1, _2),
        {{_3}, _4}
    end.

enc_remote_storage_pool_lookup_by_name_args(_1) ->
    case _1 of
        {_2} ->
            [enc_remote_nonnull_string(_2)]
    end.

dec_remote_storage_pool_lookup_by_name_args(_1, _2) ->
    begin
        {_3, _4} = dec_remote_nonnull_string(_1, _2),
        {{_3}, _4}
    end.

enc_remote_storage_pool_lookup_by_name_ret(_1) ->
    case _1 of
        {_2} ->
            [enc_remote_nonnull_storage_pool(_2)]
    end.

dec_remote_storage_pool_lookup_by_name_ret(_1, _2) ->
    begin
        {_3, _4} = dec_remote_nonnull_storage_pool(_1, _2),
        {{_3}, _4}
    end.

enc_remote_storage_pool_lookup_by_volume_args(_1) ->
    case _1 of
        {_2} ->
            [enc_remote_nonnull_storage_vol(_2)]
    end.

dec_remote_storage_pool_lookup_by_volume_args(_1, _2) ->
    begin
        {_3, _4} = dec_remote_nonnull_storage_vol(_1, _2),
        {{_3}, _4}
    end.

enc_remote_storage_pool_lookup_by_volume_ret(_1) ->
    case _1 of
        {_2} ->
            [enc_remote_nonnull_storage_pool(_2)]
    end.

dec_remote_storage_pool_lookup_by_volume_ret(_1, _2) ->
    begin
        {_3, _4} = dec_remote_nonnull_storage_pool(_1, _2),
        {{_3}, _4}
    end.

enc_remote_storage_pool_lookup_by_target_path_args(_1) ->
    case _1 of
        {_2} ->
            [enc_remote_nonnull_string(_2)]
    end.

dec_remote_storage_pool_lookup_by_target_path_args(_1, _2) ->
    begin
        {_3, _4} = dec_remote_nonnull_string(_1, _2),
        {{_3}, _4}
    end.

enc_remote_storage_pool_lookup_by_target_path_ret(_1) ->
    case _1 of
        {_2} ->
            [enc_remote_nonnull_storage_pool(_2)]
    end.

dec_remote_storage_pool_lookup_by_target_path_ret(_1, _2) ->
    begin
        {_3, _4} = dec_remote_nonnull_storage_pool(_1, _2),
        {{_3}, _4}
    end.

enc_remote_storage_pool_create_xml_args(_1) ->
    case _1 of
        {_3, _2} ->
            [enc_remote_nonnull_string(_3), <<_2:32>>]
    end.

dec_remote_storage_pool_create_xml_args(_1, _2) ->
    begin
        {_3, _4} = dec_remote_nonnull_string(_1, _2),
        begin
            <<_:_4/binary,_5:32/unsigned,_/binary>> = _1,
            _6 = _4 + 4
        end,
        {{_3, _5}, _6}
    end.

enc_remote_storage_pool_create_xml_ret(_1) ->
    case _1 of
        {_2} ->
            [enc_remote_nonnull_storage_pool(_2)]
    end.

dec_remote_storage_pool_create_xml_ret(_1, _2) ->
    begin
        {_3, _4} = dec_remote_nonnull_storage_pool(_1, _2),
        {{_3}, _4}
    end.

enc_remote_storage_pool_define_xml_args(_1) ->
    case _1 of
        {_3, _2} ->
            [enc_remote_nonnull_string(_3), <<_2:32>>]
    end.

dec_remote_storage_pool_define_xml_args(_1, _2) ->
    begin
        {_3, _4} = dec_remote_nonnull_string(_1, _2),
        begin
            <<_:_4/binary,_5:32/unsigned,_/binary>> = _1,
            _6 = _4 + 4
        end,
        {{_3, _5}, _6}
    end.

enc_remote_storage_pool_define_xml_ret(_1) ->
    case _1 of
        {_2} ->
            [enc_remote_nonnull_storage_pool(_2)]
    end.

dec_remote_storage_pool_define_xml_ret(_1, _2) ->
    begin
        {_3, _4} = dec_remote_nonnull_storage_pool(_1, _2),
        {{_3}, _4}
    end.

enc_remote_storage_pool_build_args(_1) ->
    case _1 of
        {_3, _2} ->
            [enc_remote_nonnull_storage_pool(_3), <<_2:32>>]
    end.

dec_remote_storage_pool_build_args(_1, _2) ->
    begin
        {_3, _4} = dec_remote_nonnull_storage_pool(_1, _2),
        begin
            <<_:_4/binary,_5:32/unsigned,_/binary>> = _1,
            _6 = _4 + 4
        end,
        {{_3, _5}, _6}
    end.

enc_remote_storage_pool_undefine_args(_1) ->
    case _1 of
        {_2} ->
            [enc_remote_nonnull_storage_pool(_2)]
    end.

dec_remote_storage_pool_undefine_args(_1, _2) ->
    begin
        {_3, _4} = dec_remote_nonnull_storage_pool(_1, _2),
        {{_3}, _4}
    end.

enc_remote_storage_pool_create_args(_1) ->
    case _1 of
        {_3, _2} ->
            [enc_remote_nonnull_storage_pool(_3), <<_2:32>>]
    end.

dec_remote_storage_pool_create_args(_1, _2) ->
    begin
        {_3, _4} = dec_remote_nonnull_storage_pool(_1, _2),
        begin
            <<_:_4/binary,_5:32/unsigned,_/binary>> = _1,
            _6 = _4 + 4
        end,
        {{_3, _5}, _6}
    end.

enc_remote_storage_pool_destroy_args(_1) ->
    case _1 of
        {_2} ->
            [enc_remote_nonnull_storage_pool(_2)]
    end.

dec_remote_storage_pool_destroy_args(_1, _2) ->
    begin
        {_3, _4} = dec_remote_nonnull_storage_pool(_1, _2),
        {{_3}, _4}
    end.

enc_remote_storage_pool_delete_args(_1) ->
    case _1 of
        {_3, _2} ->
            [enc_remote_nonnull_storage_pool(_3), <<_2:32>>]
    end.

dec_remote_storage_pool_delete_args(_1, _2) ->
    begin
        {_3, _4} = dec_remote_nonnull_storage_pool(_1, _2),
        begin
            <<_:_4/binary,_5:32/unsigned,_/binary>> = _1,
            _6 = _4 + 4
        end,
        {{_3, _5}, _6}
    end.

enc_remote_storage_pool_refresh_args(_1) ->
    case _1 of
        {_3, _2} ->
            [enc_remote_nonnull_storage_pool(_3), <<_2:32>>]
    end.

dec_remote_storage_pool_refresh_args(_1, _2) ->
    begin
        {_3, _4} = dec_remote_nonnull_storage_pool(_1, _2),
        begin
            <<_:_4/binary,_5:32/unsigned,_/binary>> = _1,
            _6 = _4 + 4
        end,
        {{_3, _5}, _6}
    end.

enc_remote_storage_pool_get_xml_desc_args(_1) ->
    case _1 of
        {_3, _2} ->
            [enc_remote_nonnull_storage_pool(_3), <<_2:32>>]
    end.

dec_remote_storage_pool_get_xml_desc_args(_1, _2) ->
    begin
        {_3, _4} = dec_remote_nonnull_storage_pool(_1, _2),
        begin
            <<_:_4/binary,_5:32/unsigned,_/binary>> = _1,
            _6 = _4 + 4
        end,
        {{_3, _5}, _6}
    end.

enc_remote_storage_pool_get_xml_desc_ret(_1) ->
    case _1 of
        {_2} ->
            [enc_remote_nonnull_string(_2)]
    end.

dec_remote_storage_pool_get_xml_desc_ret(_1, _2) ->
    begin
        {_3, _4} = dec_remote_nonnull_string(_1, _2),
        {{_3}, _4}
    end.

enc_remote_storage_pool_get_info_args(_1) ->
    case _1 of
        {_2} ->
            [enc_remote_nonnull_storage_pool(_2)]
    end.

dec_remote_storage_pool_get_info_args(_1, _2) ->
    begin
        {_3, _4} = dec_remote_nonnull_storage_pool(_1, _2),
        {{_3}, _4}
    end.

enc_remote_storage_pool_get_info_ret(_1) ->
    case _1 of
        {_5, _4, _3, _2} ->
            [<<_5:32>>, <<_4:64>>, <<_3:64>>, <<_2:64>>]
    end.

dec_remote_storage_pool_get_info_ret(_1, _2) ->
    begin
        begin
            <<_:_2/binary,_3:32/unsigned,_/binary>> = _1,
            _4 = _2 + 4
        end,
        begin
            <<_:_4/binary,_5:64/unsigned,_/binary>> = _1,
            _6 = _4 + 8
        end,
        begin
            <<_:_6/binary,_7:64/unsigned,_/binary>> = _1,
            _8 = _6 + 8
        end,
        begin
            <<_:_8/binary,_9:64/unsigned,_/binary>> = _1,
            _10 = _8 + 8
        end,
        {{_3, _5, _7, _9}, _10}
    end.

enc_remote_storage_pool_get_autostart_args(_1) ->
    case _1 of
        {_2} ->
            [enc_remote_nonnull_storage_pool(_2)]
    end.

dec_remote_storage_pool_get_autostart_args(_1, _2) ->
    begin
        {_3, _4} = dec_remote_nonnull_storage_pool(_1, _2),
        {{_3}, _4}
    end.

enc_remote_storage_pool_get_autostart_ret(_1) ->
    case _1 of
        {_2} ->
            [<<_2:32>>]
    end.

dec_remote_storage_pool_get_autostart_ret(_1, _2) ->
    begin
        begin
            <<_:_2/binary,_3:32/signed,_/binary>> = _1,
            _4 = _2 + 4
        end,
        {{_3}, _4}
    end.

enc_remote_storage_pool_set_autostart_args(_1) ->
    case _1 of
        {_3, _2} ->
            [enc_remote_nonnull_storage_pool(_3), <<_2:32>>]
    end.

dec_remote_storage_pool_set_autostart_args(_1, _2) ->
    begin
        {_3, _4} = dec_remote_nonnull_storage_pool(_1, _2),
        begin
            <<_:_4/binary,_5:32/signed,_/binary>> = _1,
            _6 = _4 + 4
        end,
        {{_3, _5}, _6}
    end.

enc_remote_storage_pool_num_of_volumes_args(_1) ->
    case _1 of
        {_2} ->
            [enc_remote_nonnull_storage_pool(_2)]
    end.

dec_remote_storage_pool_num_of_volumes_args(_1, _2) ->
    begin
        {_3, _4} = dec_remote_nonnull_storage_pool(_1, _2),
        {{_3}, _4}
    end.

enc_remote_storage_pool_num_of_volumes_ret(_1) ->
    case _1 of
        {_2} ->
            [<<_2:32>>]
    end.

dec_remote_storage_pool_num_of_volumes_ret(_1, _2) ->
    begin
        begin
            <<_:_2/binary,_3:32/signed,_/binary>> = _1,
            _4 = _2 + 4
        end,
        {{_3}, _4}
    end.

enc_remote_storage_pool_list_volumes_args(_1) ->
    case _1 of
        {_3, _2} ->
            [enc_remote_nonnull_storage_pool(_3), <<_2:32>>]
    end.

dec_remote_storage_pool_list_volumes_args(_1, _2) ->
    begin
        {_3, _4} = dec_remote_nonnull_storage_pool(_1, _2),
        begin
            <<_:_4/binary,_5:32/signed,_/binary>> = _1,
            _6 = _4 + 4
        end,
        {{_3, _5}, _6}
    end.

enc_remote_storage_pool_list_volumes_ret(_1) ->
    case _1 of
        {_2} ->
            [begin
                 _4 = length(_2),
                 if
                     _4 =< 16384 ->
                         [<<_4:32/unsigned>>,
                          lists:map(fun(_3) ->
                                           enc_remote_nonnull_string(_3)
                                    end,
                                    _2)];
                     true ->
                         exit({xdr, limit})
                 end
             end]
    end.

dec_remote_storage_pool_list_volumes_ret(_1, _2) ->
    begin
        {_3, _4} =
            begin
                <<_:_2/binary,_5:32/unsigned,_/binary>> = _1,
                map_elem(fun(_6, _7) ->
                                dec_remote_nonnull_string(_6, _7)
                         end,
                         _1,
                         _2 + 4,
                         16384, _5)
            end,
        {{_3}, _4}
    end.

enc_remote_storage_vol_lookup_by_name_args(_1) ->
    case _1 of
        {_3, _2} ->
            [enc_remote_nonnull_storage_pool(_3),
             enc_remote_nonnull_string(_2)]
    end.

dec_remote_storage_vol_lookup_by_name_args(_1, _2) ->
    begin
        {_3, _4} = dec_remote_nonnull_storage_pool(_1, _2),
        {_5, _6} = dec_remote_nonnull_string(_1, _4),
        {{_3, _5}, _6}
    end.

enc_remote_storage_vol_lookup_by_name_ret(_1) ->
    case _1 of
        {_2} ->
            [enc_remote_nonnull_storage_vol(_2)]
    end.

dec_remote_storage_vol_lookup_by_name_ret(_1, _2) ->
    begin
        {_3, _4} = dec_remote_nonnull_storage_vol(_1, _2),
        {{_3}, _4}
    end.

enc_remote_storage_vol_lookup_by_key_args(_1) ->
    case _1 of
        {_2} ->
            [enc_remote_nonnull_string(_2)]
    end.

dec_remote_storage_vol_lookup_by_key_args(_1, _2) ->
    begin
        {_3, _4} = dec_remote_nonnull_string(_1, _2),
        {{_3}, _4}
    end.

enc_remote_storage_vol_lookup_by_key_ret(_1) ->
    case _1 of
        {_2} ->
            [enc_remote_nonnull_storage_vol(_2)]
    end.

dec_remote_storage_vol_lookup_by_key_ret(_1, _2) ->
    begin
        {_3, _4} = dec_remote_nonnull_storage_vol(_1, _2),
        {{_3}, _4}
    end.

enc_remote_storage_vol_lookup_by_path_args(_1) ->
    case _1 of
        {_2} ->
            [enc_remote_nonnull_string(_2)]
    end.

dec_remote_storage_vol_lookup_by_path_args(_1, _2) ->
    begin
        {_3, _4} = dec_remote_nonnull_string(_1, _2),
        {{_3}, _4}
    end.

enc_remote_storage_vol_lookup_by_path_ret(_1) ->
    case _1 of
        {_2} ->
            [enc_remote_nonnull_storage_vol(_2)]
    end.

dec_remote_storage_vol_lookup_by_path_ret(_1, _2) ->
    begin
        {_3, _4} = dec_remote_nonnull_storage_vol(_1, _2),
        {{_3}, _4}
    end.

enc_remote_storage_vol_create_xml_args(_1) ->
    case _1 of
        {_4, _3, _2} ->
            [enc_remote_nonnull_storage_pool(_4),
             enc_remote_nonnull_string(_3),
             <<_2:32>>]
    end.

dec_remote_storage_vol_create_xml_args(_1, _2) ->
    begin
        {_3, _4} = dec_remote_nonnull_storage_pool(_1, _2),
        {_5, _6} = dec_remote_nonnull_string(_1, _4),
        begin
            <<_:_6/binary,_7:32/unsigned,_/binary>> = _1,
            _8 = _6 + 4
        end,
        {{_3, _5, _7}, _8}
    end.

enc_remote_storage_vol_create_xml_ret(_1) ->
    case _1 of
        {_2} ->
            [enc_remote_nonnull_storage_vol(_2)]
    end.

dec_remote_storage_vol_create_xml_ret(_1, _2) ->
    begin
        {_3, _4} = dec_remote_nonnull_storage_vol(_1, _2),
        {{_3}, _4}
    end.

enc_remote_storage_vol_create_xml_from_args(_1) ->
    case _1 of
        {_5, _4, _3, _2} ->
            [enc_remote_nonnull_storage_pool(_5),
             enc_remote_nonnull_string(_4),
             enc_remote_nonnull_storage_vol(_3),
             <<_2:32>>]
    end.

dec_remote_storage_vol_create_xml_from_args(_1, _2) ->
    begin
        {_3, _4} = dec_remote_nonnull_storage_pool(_1, _2),
        {_5, _6} = dec_remote_nonnull_string(_1, _4),
        {_7, _8} = dec_remote_nonnull_storage_vol(_1, _6),
        begin
            <<_:_8/binary,_9:32/unsigned,_/binary>> = _1,
            _10 = _8 + 4
        end,
        {{_3, _5, _7, _9}, _10}
    end.

enc_remote_storage_vol_create_xml_from_ret(_1) ->
    case _1 of
        {_2} ->
            [enc_remote_nonnull_storage_vol(_2)]
    end.

dec_remote_storage_vol_create_xml_from_ret(_1, _2) ->
    begin
        {_3, _4} = dec_remote_nonnull_storage_vol(_1, _2),
        {{_3}, _4}
    end.

enc_remote_storage_vol_delete_args(_1) ->
    case _1 of
        {_3, _2} ->
            [enc_remote_nonnull_storage_vol(_3), <<_2:32>>]
    end.

dec_remote_storage_vol_delete_args(_1, _2) ->
    begin
        {_3, _4} = dec_remote_nonnull_storage_vol(_1, _2),
        begin
            <<_:_4/binary,_5:32/unsigned,_/binary>> = _1,
            _6 = _4 + 4
        end,
        {{_3, _5}, _6}
    end.

enc_remote_storage_vol_wipe_args(_1) ->
    case _1 of
        {_3, _2} ->
            [enc_remote_nonnull_storage_vol(_3), <<_2:32>>]
    end.

dec_remote_storage_vol_wipe_args(_1, _2) ->
    begin
        {_3, _4} = dec_remote_nonnull_storage_vol(_1, _2),
        begin
            <<_:_4/binary,_5:32/unsigned,_/binary>> = _1,
            _6 = _4 + 4
        end,
        {{_3, _5}, _6}
    end.

enc_remote_storage_vol_wipe_pattern_args(_1) ->
    case _1 of
        {_4, _3, _2} ->
            [enc_remote_nonnull_storage_vol(_4), <<_3:32>>, <<_2:32>>]
    end.

dec_remote_storage_vol_wipe_pattern_args(_1, _2) ->
    begin
        {_3, _4} = dec_remote_nonnull_storage_vol(_1, _2),
        begin
            <<_:_4/binary,_5:32/unsigned,_/binary>> = _1,
            _6 = _4 + 4
        end,
        begin
            <<_:_6/binary,_7:32/unsigned,_/binary>> = _1,
            _8 = _6 + 4
        end,
        {{_3, _5, _7}, _8}
    end.

enc_remote_storage_vol_get_xml_desc_args(_1) ->
    case _1 of
        {_3, _2} ->
            [enc_remote_nonnull_storage_vol(_3), <<_2:32>>]
    end.

dec_remote_storage_vol_get_xml_desc_args(_1, _2) ->
    begin
        {_3, _4} = dec_remote_nonnull_storage_vol(_1, _2),
        begin
            <<_:_4/binary,_5:32/unsigned,_/binary>> = _1,
            _6 = _4 + 4
        end,
        {{_3, _5}, _6}
    end.

enc_remote_storage_vol_get_xml_desc_ret(_1) ->
    case _1 of
        {_2} ->
            [enc_remote_nonnull_string(_2)]
    end.

dec_remote_storage_vol_get_xml_desc_ret(_1, _2) ->
    begin
        {_3, _4} = dec_remote_nonnull_string(_1, _2),
        {{_3}, _4}
    end.

enc_remote_storage_vol_get_info_args(_1) ->
    case _1 of
        {_2} ->
            [enc_remote_nonnull_storage_vol(_2)]
    end.

dec_remote_storage_vol_get_info_args(_1, _2) ->
    begin
        {_3, _4} = dec_remote_nonnull_storage_vol(_1, _2),
        {{_3}, _4}
    end.

enc_remote_storage_vol_get_info_ret(_1) ->
    case _1 of
        {_4, _3, _2} ->
            [<<_4:32>>, <<_3:64>>, <<_2:64>>]
    end.

dec_remote_storage_vol_get_info_ret(_1, _2) ->
    begin
        begin
            <<_:_2/binary,_3:32/signed,_/binary>> = _1,
            _4 = _2 + 4
        end,
        begin
            <<_:_4/binary,_5:64/unsigned,_/binary>> = _1,
            _6 = _4 + 8
        end,
        begin
            <<_:_6/binary,_7:64/unsigned,_/binary>> = _1,
            _8 = _6 + 8
        end,
        {{_3, _5, _7}, _8}
    end.

enc_remote_storage_vol_get_info_flags_args(_1) ->
    case _1 of
        {_3, _2} ->
            [enc_remote_nonnull_storage_vol(_3), <<_2:32>>]
    end.

dec_remote_storage_vol_get_info_flags_args(_1, _2) ->
    begin
        {_3, _4} = dec_remote_nonnull_storage_vol(_1, _2),
        begin
            <<_:_4/binary,_5:32/unsigned,_/binary>> = _1,
            _6 = _4 + 4
        end,
        {{_3, _5}, _6}
    end.

enc_remote_storage_vol_get_info_flags_ret(_1) ->
    case _1 of
        {_4, _3, _2} ->
            [<<_4:32>>, <<_3:64>>, <<_2:64>>]
    end.

dec_remote_storage_vol_get_info_flags_ret(_1, _2) ->
    begin
        begin
            <<_:_2/binary,_3:32/signed,_/binary>> = _1,
            _4 = _2 + 4
        end,
        begin
            <<_:_4/binary,_5:64/unsigned,_/binary>> = _1,
            _6 = _4 + 8
        end,
        begin
            <<_:_6/binary,_7:64/unsigned,_/binary>> = _1,
            _8 = _6 + 8
        end,
        {{_3, _5, _7}, _8}
    end.

enc_remote_storage_vol_get_path_args(_1) ->
    case _1 of
        {_2} ->
            [enc_remote_nonnull_storage_vol(_2)]
    end.

dec_remote_storage_vol_get_path_args(_1, _2) ->
    begin
        {_3, _4} = dec_remote_nonnull_storage_vol(_1, _2),
        {{_3}, _4}
    end.

enc_remote_storage_vol_get_path_ret(_1) ->
    case _1 of
        {_2} ->
            [enc_remote_nonnull_string(_2)]
    end.

dec_remote_storage_vol_get_path_ret(_1, _2) ->
    begin
        {_3, _4} = dec_remote_nonnull_string(_1, _2),
        {{_3}, _4}
    end.

enc_remote_storage_vol_resize_args(_1) ->
    case _1 of
        {_4, _3, _2} ->
            [enc_remote_nonnull_storage_vol(_4), <<_3:64>>, <<_2:32>>]
    end.

dec_remote_storage_vol_resize_args(_1, _2) ->
    begin
        {_3, _4} = dec_remote_nonnull_storage_vol(_1, _2),
        begin
            <<_:_4/binary,_5:64/unsigned,_/binary>> = _1,
            _6 = _4 + 8
        end,
        begin
            <<_:_6/binary,_7:32/unsigned,_/binary>> = _1,
            _8 = _6 + 4
        end,
        {{_3, _5, _7}, _8}
    end.

enc_remote_node_num_of_devices_args(_1) ->
    case _1 of
        {_3, _2} ->
            [enc_remote_string(_3), <<_2:32>>]
    end.

dec_remote_node_num_of_devices_args(_1, _2) ->
    begin
        {_3, _4} = dec_remote_string(_1, _2),
        begin
            <<_:_4/binary,_5:32/unsigned,_/binary>> = _1,
            _6 = _4 + 4
        end,
        {{_3, _5}, _6}
    end.

enc_remote_node_num_of_devices_ret(_1) ->
    case _1 of
        {_2} ->
            [<<_2:32>>]
    end.

dec_remote_node_num_of_devices_ret(_1, _2) ->
    begin
        begin
            <<_:_2/binary,_3:32/signed,_/binary>> = _1,
            _4 = _2 + 4
        end,
        {{_3}, _4}
    end.

enc_remote_node_list_devices_args(_1) ->
    case _1 of
        {_4, _3, _2} ->
            [enc_remote_string(_4), <<_3:32>>, <<_2:32>>]
    end.

dec_remote_node_list_devices_args(_1, _2) ->
    begin
        {_3, _4} = dec_remote_string(_1, _2),
        begin
            <<_:_4/binary,_5:32/signed,_/binary>> = _1,
            _6 = _4 + 4
        end,
        begin
            <<_:_6/binary,_7:32/unsigned,_/binary>> = _1,
            _8 = _6 + 4
        end,
        {{_3, _5, _7}, _8}
    end.

enc_remote_node_list_devices_ret(_1) ->
    case _1 of
        {_2} ->
            [begin
                 _4 = length(_2),
                 if
                     _4 =< 65536 ->
                         [<<_4:32/unsigned>>,
                          lists:map(fun(_3) ->
                                           enc_remote_nonnull_string(_3)
                                    end,
                                    _2)];
                     true ->
                         exit({xdr, limit})
                 end
             end]
    end.

dec_remote_node_list_devices_ret(_1, _2) ->
    begin
        {_3, _4} =
            begin
                <<_:_2/binary,_5:32/unsigned,_/binary>> = _1,
                map_elem(fun(_6, _7) ->
                                dec_remote_nonnull_string(_6, _7)
                         end,
                         _1,
                         _2 + 4,
                         65536, _5)
            end,
        {{_3}, _4}
    end.

enc_remote_node_device_lookup_by_name_args(_1) ->
    case _1 of
        {_2} ->
            [enc_remote_nonnull_string(_2)]
    end.

dec_remote_node_device_lookup_by_name_args(_1, _2) ->
    begin
        {_3, _4} = dec_remote_nonnull_string(_1, _2),
        {{_3}, _4}
    end.

enc_remote_node_device_lookup_by_name_ret(_1) ->
    case _1 of
        {_2} ->
            [enc_remote_nonnull_node_device(_2)]
    end.

dec_remote_node_device_lookup_by_name_ret(_1, _2) ->
    begin
        {_3, _4} = dec_remote_nonnull_node_device(_1, _2),
        {{_3}, _4}
    end.

enc_remote_node_device_lookup_scsi_host_by_wwn_args(_1) ->
    case _1 of
        {_4, _3, _2} ->
            [enc_remote_nonnull_string(_4),
             enc_remote_nonnull_string(_3),
             <<_2:32>>]
    end.

dec_remote_node_device_lookup_scsi_host_by_wwn_args(_1, _2) ->
    begin
        {_3, _4} = dec_remote_nonnull_string(_1, _2),
        {_5, _6} = dec_remote_nonnull_string(_1, _4),
        begin
            <<_:_6/binary,_7:32/unsigned,_/binary>> = _1,
            _8 = _6 + 4
        end,
        {{_3, _5, _7}, _8}
    end.

enc_remote_node_device_lookup_scsi_host_by_wwn_ret(_1) ->
    case _1 of
        {_2} ->
            [enc_remote_nonnull_node_device(_2)]
    end.

dec_remote_node_device_lookup_scsi_host_by_wwn_ret(_1, _2) ->
    begin
        {_3, _4} = dec_remote_nonnull_node_device(_1, _2),
        {{_3}, _4}
    end.

enc_remote_node_device_get_xml_desc_args(_1) ->
    case _1 of
        {_3, _2} ->
            [enc_remote_nonnull_string(_3), <<_2:32>>]
    end.

dec_remote_node_device_get_xml_desc_args(_1, _2) ->
    begin
        {_3, _4} = dec_remote_nonnull_string(_1, _2),
        begin
            <<_:_4/binary,_5:32/unsigned,_/binary>> = _1,
            _6 = _4 + 4
        end,
        {{_3, _5}, _6}
    end.

enc_remote_node_device_get_xml_desc_ret(_1) ->
    case _1 of
        {_2} ->
            [enc_remote_nonnull_string(_2)]
    end.

dec_remote_node_device_get_xml_desc_ret(_1, _2) ->
    begin
        {_3, _4} = dec_remote_nonnull_string(_1, _2),
        {{_3}, _4}
    end.

enc_remote_node_device_get_parent_args(_1) ->
    case _1 of
        {_2} ->
            [enc_remote_nonnull_string(_2)]
    end.

dec_remote_node_device_get_parent_args(_1, _2) ->
    begin
        {_3, _4} = dec_remote_nonnull_string(_1, _2),
        {{_3}, _4}
    end.

enc_remote_node_device_get_parent_ret(_1) ->
    case _1 of
        {_2} ->
            [enc_remote_string(_2)]
    end.

dec_remote_node_device_get_parent_ret(_1, _2) ->
    begin
        {_3, _4} = dec_remote_string(_1, _2),
        {{_3}, _4}
    end.

enc_remote_node_device_num_of_caps_args(_1) ->
    case _1 of
        {_2} ->
            [enc_remote_nonnull_string(_2)]
    end.

dec_remote_node_device_num_of_caps_args(_1, _2) ->
    begin
        {_3, _4} = dec_remote_nonnull_string(_1, _2),
        {{_3}, _4}
    end.

enc_remote_node_device_num_of_caps_ret(_1) ->
    case _1 of
        {_2} ->
            [<<_2:32>>]
    end.

dec_remote_node_device_num_of_caps_ret(_1, _2) ->
    begin
        begin
            <<_:_2/binary,_3:32/signed,_/binary>> = _1,
            _4 = _2 + 4
        end,
        {{_3}, _4}
    end.

enc_remote_node_device_list_caps_args(_1) ->
    case _1 of
        {_3, _2} ->
            [enc_remote_nonnull_string(_3), <<_2:32>>]
    end.

dec_remote_node_device_list_caps_args(_1, _2) ->
    begin
        {_3, _4} = dec_remote_nonnull_string(_1, _2),
        begin
            <<_:_4/binary,_5:32/signed,_/binary>> = _1,
            _6 = _4 + 4
        end,
        {{_3, _5}, _6}
    end.

enc_remote_node_device_list_caps_ret(_1) ->
    case _1 of
        {_2} ->
            [begin
                 _4 = length(_2),
                 if
                     _4 =< 65536 ->
                         [<<_4:32/unsigned>>,
                          lists:map(fun(_3) ->
                                           enc_remote_nonnull_string(_3)
                                    end,
                                    _2)];
                     true ->
                         exit({xdr, limit})
                 end
             end]
    end.

dec_remote_node_device_list_caps_ret(_1, _2) ->
    begin
        {_3, _4} =
            begin
                <<_:_2/binary,_5:32/unsigned,_/binary>> = _1,
                map_elem(fun(_6, _7) ->
                                dec_remote_nonnull_string(_6, _7)
                         end,
                         _1,
                         _2 + 4,
                         65536, _5)
            end,
        {{_3}, _4}
    end.

enc_remote_node_device_dettach_args(_1) ->
    case _1 of
        {_2} ->
            [enc_remote_nonnull_string(_2)]
    end.

dec_remote_node_device_dettach_args(_1, _2) ->
    begin
        {_3, _4} = dec_remote_nonnull_string(_1, _2),
        {{_3}, _4}
    end.

enc_remote_node_device_detach_flags_args(_1) ->
    case _1 of
        {_4, _3, _2} ->
            [enc_remote_nonnull_string(_4),
             enc_remote_string(_3),
             <<_2:32>>]
    end.

dec_remote_node_device_detach_flags_args(_1, _2) ->
    begin
        {_3, _4} = dec_remote_nonnull_string(_1, _2),
        {_5, _6} = dec_remote_string(_1, _4),
        begin
            <<_:_6/binary,_7:32/unsigned,_/binary>> = _1,
            _8 = _6 + 4
        end,
        {{_3, _5, _7}, _8}
    end.

enc_remote_node_device_re_attach_args(_1) ->
    case _1 of
        {_2} ->
            [enc_remote_nonnull_string(_2)]
    end.

dec_remote_node_device_re_attach_args(_1, _2) ->
    begin
        {_3, _4} = dec_remote_nonnull_string(_1, _2),
        {{_3}, _4}
    end.

enc_remote_node_device_reset_args(_1) ->
    case _1 of
        {_2} ->
            [enc_remote_nonnull_string(_2)]
    end.

dec_remote_node_device_reset_args(_1, _2) ->
    begin
        {_3, _4} = dec_remote_nonnull_string(_1, _2),
        {{_3}, _4}
    end.

enc_remote_node_device_create_xml_args(_1) ->
    case _1 of
        {_3, _2} ->
            [enc_remote_nonnull_string(_3), <<_2:32>>]
    end.

dec_remote_node_device_create_xml_args(_1, _2) ->
    begin
        {_3, _4} = dec_remote_nonnull_string(_1, _2),
        begin
            <<_:_4/binary,_5:32/unsigned,_/binary>> = _1,
            _6 = _4 + 4
        end,
        {{_3, _5}, _6}
    end.

enc_remote_node_device_create_xml_ret(_1) ->
    case _1 of
        {_2} ->
            [enc_remote_nonnull_node_device(_2)]
    end.

dec_remote_node_device_create_xml_ret(_1, _2) ->
    begin
        {_3, _4} = dec_remote_nonnull_node_device(_1, _2),
        {{_3}, _4}
    end.

enc_remote_node_device_destroy_args(_1) ->
    case _1 of
        {_2} ->
            [enc_remote_nonnull_string(_2)]
    end.

dec_remote_node_device_destroy_args(_1, _2) ->
    begin
        {_3, _4} = dec_remote_nonnull_string(_1, _2),
        {{_3}, _4}
    end.

enc_remote_connect_domain_event_register_ret(_1) ->
    case _1 of
        {_2} ->
            [<<_2:32>>]
    end.

dec_remote_connect_domain_event_register_ret(_1, _2) ->
    begin
        begin
            <<_:_2/binary,_3:32/signed,_/binary>> = _1,
            _4 = _2 + 4
        end,
        {{_3}, _4}
    end.

enc_remote_connect_domain_event_deregister_ret(_1) ->
    case _1 of
        {_2} ->
            [<<_2:32>>]
    end.

dec_remote_connect_domain_event_deregister_ret(_1, _2) ->
    begin
        begin
            <<_:_2/binary,_3:32/signed,_/binary>> = _1,
            _4 = _2 + 4
        end,
        {{_3}, _4}
    end.

enc_remote_domain_event_lifecycle_msg(_1) ->
    case _1 of
        {_4, _3, _2} ->
            [enc_remote_nonnull_domain(_4), <<_3:32>>, <<_2:32>>]
    end.

dec_remote_domain_event_lifecycle_msg(_1, _2) ->
    begin
        {_3, _4} = dec_remote_nonnull_domain(_1, _2),
        begin
            <<_:_4/binary,_5:32/signed,_/binary>> = _1,
            _6 = _4 + 4
        end,
        begin
            <<_:_6/binary,_7:32/signed,_/binary>> = _1,
            _8 = _6 + 4
        end,
        {{_3, _5, _7}, _8}
    end.

enc_remote_domain_event_callback_lifecycle_msg(_1) ->
    case _1 of
        {_3, _2} ->
            [<<_3:32>>, enc_remote_domain_event_lifecycle_msg(_2)]
    end.

dec_remote_domain_event_callback_lifecycle_msg(_1, _2) ->
    begin
        begin
            <<_:_2/binary,_3:32/signed,_/binary>> = _1,
            _4 = _2 + 4
        end,
        {_5, _6} = dec_remote_domain_event_lifecycle_msg(_1, _4),
        {{_3, _5}, _6}
    end.

enc_remote_connect_domain_xml_from_native_args(_1) ->
    case _1 of
        {_4, _3, _2} ->
            [enc_remote_nonnull_string(_4),
             enc_remote_nonnull_string(_3),
             <<_2:32>>]
    end.

dec_remote_connect_domain_xml_from_native_args(_1, _2) ->
    begin
        {_3, _4} = dec_remote_nonnull_string(_1, _2),
        {_5, _6} = dec_remote_nonnull_string(_1, _4),
        begin
            <<_:_6/binary,_7:32/unsigned,_/binary>> = _1,
            _8 = _6 + 4
        end,
        {{_3, _5, _7}, _8}
    end.

enc_remote_connect_domain_xml_from_native_ret(_1) ->
    case _1 of
        {_2} ->
            [enc_remote_nonnull_string(_2)]
    end.

dec_remote_connect_domain_xml_from_native_ret(_1, _2) ->
    begin
        {_3, _4} = dec_remote_nonnull_string(_1, _2),
        {{_3}, _4}
    end.

enc_remote_connect_domain_xml_to_native_args(_1) ->
    case _1 of
        {_4, _3, _2} ->
            [enc_remote_nonnull_string(_4),
             enc_remote_nonnull_string(_3),
             <<_2:32>>]
    end.

dec_remote_connect_domain_xml_to_native_args(_1, _2) ->
    begin
        {_3, _4} = dec_remote_nonnull_string(_1, _2),
        {_5, _6} = dec_remote_nonnull_string(_1, _4),
        begin
            <<_:_6/binary,_7:32/unsigned,_/binary>> = _1,
            _8 = _6 + 4
        end,
        {{_3, _5, _7}, _8}
    end.

enc_remote_connect_domain_xml_to_native_ret(_1) ->
    case _1 of
        {_2} ->
            [enc_remote_nonnull_string(_2)]
    end.

dec_remote_connect_domain_xml_to_native_ret(_1, _2) ->
    begin
        {_3, _4} = dec_remote_nonnull_string(_1, _2),
        {{_3}, _4}
    end.

enc_remote_connect_num_of_secrets_ret(_1) ->
    case _1 of
        {_2} ->
            [<<_2:32>>]
    end.

dec_remote_connect_num_of_secrets_ret(_1, _2) ->
    begin
        begin
            <<_:_2/binary,_3:32/signed,_/binary>> = _1,
            _4 = _2 + 4
        end,
        {{_3}, _4}
    end.

enc_remote_connect_list_secrets_args(_1) ->
    case _1 of
        {_2} ->
            [<<_2:32>>]
    end.

dec_remote_connect_list_secrets_args(_1, _2) ->
    begin
        begin
            <<_:_2/binary,_3:32/signed,_/binary>> = _1,
            _4 = _2 + 4
        end,
        {{_3}, _4}
    end.

enc_remote_connect_list_secrets_ret(_1) ->
    case _1 of
        {_2} ->
            [begin
                 _4 = length(_2),
                 if
                     _4 =< 16384 ->
                         [<<_4:32/unsigned>>,
                          lists:map(fun(_3) ->
                                           enc_remote_nonnull_string(_3)
                                    end,
                                    _2)];
                     true ->
                         exit({xdr, limit})
                 end
             end]
    end.

dec_remote_connect_list_secrets_ret(_1, _2) ->
    begin
        {_3, _4} =
            begin
                <<_:_2/binary,_5:32/unsigned,_/binary>> = _1,
                map_elem(fun(_6, _7) ->
                                dec_remote_nonnull_string(_6, _7)
                         end,
                         _1,
                         _2 + 4,
                         16384, _5)
            end,
        {{_3}, _4}
    end.

enc_remote_secret_lookup_by_uuid_args(_1) ->
    case _1 of
        {_2} ->
            [enc_remote_uuid(_2)]
    end.

dec_remote_secret_lookup_by_uuid_args(_1, _2) ->
    begin
        {_3, _4} = dec_remote_uuid(_1, _2),
        {{_3}, _4}
    end.

enc_remote_secret_lookup_by_uuid_ret(_1) ->
    case _1 of
        {_2} ->
            [enc_remote_nonnull_secret(_2)]
    end.

dec_remote_secret_lookup_by_uuid_ret(_1, _2) ->
    begin
        {_3, _4} = dec_remote_nonnull_secret(_1, _2),
        {{_3}, _4}
    end.

enc_remote_secret_define_xml_args(_1) ->
    case _1 of
        {_3, _2} ->
            [enc_remote_nonnull_string(_3), <<_2:32>>]
    end.

dec_remote_secret_define_xml_args(_1, _2) ->
    begin
        {_3, _4} = dec_remote_nonnull_string(_1, _2),
        begin
            <<_:_4/binary,_5:32/unsigned,_/binary>> = _1,
            _6 = _4 + 4
        end,
        {{_3, _5}, _6}
    end.

enc_remote_secret_define_xml_ret(_1) ->
    case _1 of
        {_2} ->
            [enc_remote_nonnull_secret(_2)]
    end.

dec_remote_secret_define_xml_ret(_1, _2) ->
    begin
        {_3, _4} = dec_remote_nonnull_secret(_1, _2),
        {{_3}, _4}
    end.

enc_remote_secret_get_xml_desc_args(_1) ->
    case _1 of
        {_3, _2} ->
            [enc_remote_nonnull_secret(_3), <<_2:32>>]
    end.

dec_remote_secret_get_xml_desc_args(_1, _2) ->
    begin
        {_3, _4} = dec_remote_nonnull_secret(_1, _2),
        begin
            <<_:_4/binary,_5:32/unsigned,_/binary>> = _1,
            _6 = _4 + 4
        end,
        {{_3, _5}, _6}
    end.

enc_remote_secret_get_xml_desc_ret(_1) ->
    case _1 of
        {_2} ->
            [enc_remote_nonnull_string(_2)]
    end.

dec_remote_secret_get_xml_desc_ret(_1, _2) ->
    begin
        {_3, _4} = dec_remote_nonnull_string(_1, _2),
        {{_3}, _4}
    end.

enc_remote_secret_set_value_args(_1) ->
    case _1 of
        {_5, _3, _2} ->
            [enc_remote_nonnull_secret(_5),
             begin
                 _4 = io_list_len(_3),
                 if
                     _4 =< 65536 ->
                         [<<_4:32/unsigned>>, _3, enc_align(_4)];
                     true ->
                         exit({xdr, limit})
                 end
             end,
             <<_2:32>>]
    end.

dec_remote_secret_set_value_args(_1, _2) ->
    begin
        {_3, _4} = dec_remote_nonnull_secret(_1, _2),
        {_5, _6} =
            begin
                <<_:_4/binary,_7:32/unsigned,_/binary>> = _1,
                if
                    _7 > 65536 ->
                        exit({xdr, limit});
                    true ->
                        _8 = _4 + 4,
                        <<_:_8/binary,_9:_7/binary,_/binary>> = _1,
                        {_9, _8 + align(_7)}
                end
            end,
        begin
            <<_:_6/binary,_10:32/unsigned,_/binary>> = _1,
            _11 = _6 + 4
        end,
        {{_3, _5, _10}, _11}
    end.

enc_remote_secret_get_value_args(_1) ->
    case _1 of
        {_3, _2} ->
            [enc_remote_nonnull_secret(_3), <<_2:32>>]
    end.

dec_remote_secret_get_value_args(_1, _2) ->
    begin
        {_3, _4} = dec_remote_nonnull_secret(_1, _2),
        begin
            <<_:_4/binary,_5:32/unsigned,_/binary>> = _1,
            _6 = _4 + 4
        end,
        {{_3, _5}, _6}
    end.

enc_remote_secret_get_value_ret(_1) ->
    case _1 of
        {_2} ->
            [begin
                 _3 = io_list_len(_2),
                 if
                     _3 =< 65536 ->
                         [<<_3:32/unsigned>>, _2, enc_align(_3)];
                     true ->
                         exit({xdr, limit})
                 end
             end]
    end.

dec_remote_secret_get_value_ret(_1, _2) ->
    begin
        {_3, _4} =
            begin
                <<_:_2/binary,_5:32/unsigned,_/binary>> = _1,
                if
                    _5 > 65536 ->
                        exit({xdr, limit});
                    true ->
                        _6 = _2 + 4,
                        <<_:_6/binary,_7:_5/binary,_/binary>> = _1,
                        {_7, _6 + align(_5)}
                end
            end,
        {{_3}, _4}
    end.

enc_remote_secret_undefine_args(_1) ->
    case _1 of
        {_2} ->
            [enc_remote_nonnull_secret(_2)]
    end.

dec_remote_secret_undefine_args(_1, _2) ->
    begin
        {_3, _4} = dec_remote_nonnull_secret(_1, _2),
        {{_3}, _4}
    end.

enc_remote_secret_lookup_by_usage_args(_1) ->
    case _1 of
        {_3, _2} ->
            [<<_3:32>>, enc_remote_nonnull_string(_2)]
    end.

dec_remote_secret_lookup_by_usage_args(_1, _2) ->
    begin
        begin
            <<_:_2/binary,_3:32/signed,_/binary>> = _1,
            _4 = _2 + 4
        end,
        {_5, _6} = dec_remote_nonnull_string(_1, _4),
        {{_3, _5}, _6}
    end.

enc_remote_secret_lookup_by_usage_ret(_1) ->
    case _1 of
        {_2} ->
            [enc_remote_nonnull_secret(_2)]
    end.

dec_remote_secret_lookup_by_usage_ret(_1, _2) ->
    begin
        {_3, _4} = dec_remote_nonnull_secret(_1, _2),
        {{_3}, _4}
    end.

enc_remote_domain_migrate_prepare_tunnel_args(_1) ->
    case _1 of
        {_5, _4, _3, _2} ->
            [<<_5:64>>,
             enc_remote_string(_4),
             <<_3:64>>,
             enc_remote_nonnull_string(_2)]
    end.

dec_remote_domain_migrate_prepare_tunnel_args(_1, _2) ->
    begin
        begin
            <<_:_2/binary,_3:64/unsigned,_/binary>> = _1,
            _4 = _2 + 8
        end,
        {_5, _6} = dec_remote_string(_1, _4),
        begin
            <<_:_6/binary,_7:64/unsigned,_/binary>> = _1,
            _8 = _6 + 8
        end,
        {_9, _10} = dec_remote_nonnull_string(_1, _8),
        {{_3, _5, _7, _9}, _10}
    end.

enc_remote_connect_is_secure_ret(_1) ->
    case _1 of
        {_2} ->
            [<<_2:32>>]
    end.

dec_remote_connect_is_secure_ret(_1, _2) ->
    begin
        begin
            <<_:_2/binary,_3:32/signed,_/binary>> = _1,
            _4 = _2 + 4
        end,
        {{_3}, _4}
    end.

enc_remote_domain_is_active_args(_1) ->
    case _1 of
        {_2} ->
            [enc_remote_nonnull_domain(_2)]
    end.

dec_remote_domain_is_active_args(_1, _2) ->
    begin
        {_3, _4} = dec_remote_nonnull_domain(_1, _2),
        {{_3}, _4}
    end.

enc_remote_domain_is_active_ret(_1) ->
    case _1 of
        {_2} ->
            [<<_2:32>>]
    end.

dec_remote_domain_is_active_ret(_1, _2) ->
    begin
        begin
            <<_:_2/binary,_3:32/signed,_/binary>> = _1,
            _4 = _2 + 4
        end,
        {{_3}, _4}
    end.

enc_remote_domain_is_persistent_args(_1) ->
    case _1 of
        {_2} ->
            [enc_remote_nonnull_domain(_2)]
    end.

dec_remote_domain_is_persistent_args(_1, _2) ->
    begin
        {_3, _4} = dec_remote_nonnull_domain(_1, _2),
        {{_3}, _4}
    end.

enc_remote_domain_is_persistent_ret(_1) ->
    case _1 of
        {_2} ->
            [<<_2:32>>]
    end.

dec_remote_domain_is_persistent_ret(_1, _2) ->
    begin
        begin
            <<_:_2/binary,_3:32/signed,_/binary>> = _1,
            _4 = _2 + 4
        end,
        {{_3}, _4}
    end.

enc_remote_domain_is_updated_args(_1) ->
    case _1 of
        {_2} ->
            [enc_remote_nonnull_domain(_2)]
    end.

dec_remote_domain_is_updated_args(_1, _2) ->
    begin
        {_3, _4} = dec_remote_nonnull_domain(_1, _2),
        {{_3}, _4}
    end.

enc_remote_domain_is_updated_ret(_1) ->
    case _1 of
        {_2} ->
            [<<_2:32>>]
    end.

dec_remote_domain_is_updated_ret(_1, _2) ->
    begin
        begin
            <<_:_2/binary,_3:32/signed,_/binary>> = _1,
            _4 = _2 + 4
        end,
        {{_3}, _4}
    end.

enc_remote_network_is_active_args(_1) ->
    case _1 of
        {_2} ->
            [enc_remote_nonnull_network(_2)]
    end.

dec_remote_network_is_active_args(_1, _2) ->
    begin
        {_3, _4} = dec_remote_nonnull_network(_1, _2),
        {{_3}, _4}
    end.

enc_remote_network_is_active_ret(_1) ->
    case _1 of
        {_2} ->
            [<<_2:32>>]
    end.

dec_remote_network_is_active_ret(_1, _2) ->
    begin
        begin
            <<_:_2/binary,_3:32/signed,_/binary>> = _1,
            _4 = _2 + 4
        end,
        {{_3}, _4}
    end.

enc_remote_network_is_persistent_args(_1) ->
    case _1 of
        {_2} ->
            [enc_remote_nonnull_network(_2)]
    end.

dec_remote_network_is_persistent_args(_1, _2) ->
    begin
        {_3, _4} = dec_remote_nonnull_network(_1, _2),
        {{_3}, _4}
    end.

enc_remote_network_is_persistent_ret(_1) ->
    case _1 of
        {_2} ->
            [<<_2:32>>]
    end.

dec_remote_network_is_persistent_ret(_1, _2) ->
    begin
        begin
            <<_:_2/binary,_3:32/signed,_/binary>> = _1,
            _4 = _2 + 4
        end,
        {{_3}, _4}
    end.

enc_remote_storage_pool_is_active_args(_1) ->
    case _1 of
        {_2} ->
            [enc_remote_nonnull_storage_pool(_2)]
    end.

dec_remote_storage_pool_is_active_args(_1, _2) ->
    begin
        {_3, _4} = dec_remote_nonnull_storage_pool(_1, _2),
        {{_3}, _4}
    end.

enc_remote_storage_pool_is_active_ret(_1) ->
    case _1 of
        {_2} ->
            [<<_2:32>>]
    end.

dec_remote_storage_pool_is_active_ret(_1, _2) ->
    begin
        begin
            <<_:_2/binary,_3:32/signed,_/binary>> = _1,
            _4 = _2 + 4
        end,
        {{_3}, _4}
    end.

enc_remote_storage_pool_is_persistent_args(_1) ->
    case _1 of
        {_2} ->
            [enc_remote_nonnull_storage_pool(_2)]
    end.

dec_remote_storage_pool_is_persistent_args(_1, _2) ->
    begin
        {_3, _4} = dec_remote_nonnull_storage_pool(_1, _2),
        {{_3}, _4}
    end.

enc_remote_storage_pool_is_persistent_ret(_1) ->
    case _1 of
        {_2} ->
            [<<_2:32>>]
    end.

dec_remote_storage_pool_is_persistent_ret(_1, _2) ->
    begin
        begin
            <<_:_2/binary,_3:32/signed,_/binary>> = _1,
            _4 = _2 + 4
        end,
        {{_3}, _4}
    end.

enc_remote_interface_is_active_args(_1) ->
    case _1 of
        {_2} ->
            [enc_remote_nonnull_interface(_2)]
    end.

dec_remote_interface_is_active_args(_1, _2) ->
    begin
        {_3, _4} = dec_remote_nonnull_interface(_1, _2),
        {{_3}, _4}
    end.

enc_remote_interface_is_active_ret(_1) ->
    case _1 of
        {_2} ->
            [<<_2:32>>]
    end.

dec_remote_interface_is_active_ret(_1, _2) ->
    begin
        begin
            <<_:_2/binary,_3:32/signed,_/binary>> = _1,
            _4 = _2 + 4
        end,
        {{_3}, _4}
    end.

enc_remote_connect_compare_cpu_args(_1) ->
    case _1 of
        {_3, _2} ->
            [enc_remote_nonnull_string(_3), <<_2:32>>]
    end.

dec_remote_connect_compare_cpu_args(_1, _2) ->
    begin
        {_3, _4} = dec_remote_nonnull_string(_1, _2),
        begin
            <<_:_4/binary,_5:32/unsigned,_/binary>> = _1,
            _6 = _4 + 4
        end,
        {{_3, _5}, _6}
    end.

enc_remote_connect_compare_cpu_ret(_1) ->
    case _1 of
        {_2} ->
            [<<_2:32>>]
    end.

dec_remote_connect_compare_cpu_ret(_1, _2) ->
    begin
        begin
            <<_:_2/binary,_3:32/signed,_/binary>> = _1,
            _4 = _2 + 4
        end,
        {{_3}, _4}
    end.

enc_remote_connect_baseline_cpu_args(_1) ->
    case _1 of
        {_3, _2} ->
            [begin
                 _5 = length(_3),
                 if
                     _5 =< 256 ->
                         [<<_5:32/unsigned>>,
                          lists:map(fun(_4) ->
                                           enc_remote_nonnull_string(_4)
                                    end,
                                    _3)];
                     true ->
                         exit({xdr, limit})
                 end
             end,
             <<_2:32>>]
    end.

dec_remote_connect_baseline_cpu_args(_1, _2) ->
    begin
        {_3, _4} =
            begin
                <<_:_2/binary,_5:32/unsigned,_/binary>> = _1,
                map_elem(fun(_6, _7) ->
                                dec_remote_nonnull_string(_6, _7)
                         end,
                         _1,
                         _2 + 4,
                         256, _5)
            end,
        begin
            <<_:_4/binary,_8:32/unsigned,_/binary>> = _1,
            _9 = _4 + 4
        end,
        {{_3, _8}, _9}
    end.

enc_remote_connect_baseline_cpu_ret(_1) ->
    case _1 of
        {_2} ->
            [enc_remote_nonnull_string(_2)]
    end.

dec_remote_connect_baseline_cpu_ret(_1, _2) ->
    begin
        {_3, _4} = dec_remote_nonnull_string(_1, _2),
        {{_3}, _4}
    end.

enc_remote_domain_get_job_info_args(_1) ->
    case _1 of
        {_2} ->
            [enc_remote_nonnull_domain(_2)]
    end.

dec_remote_domain_get_job_info_args(_1, _2) ->
    begin
        {_3, _4} = dec_remote_nonnull_domain(_1, _2),
        {{_3}, _4}
    end.

enc_remote_domain_get_job_info_ret(_1) ->
    case _1 of
        {_13, _12, _11, _10, _9, _8, _7, _6, _5, _4, _3, _2} ->
            [<<_13:32>>,
             <<_12:64>>,
             <<_11:64>>,
             <<_10:64>>,
             <<_9:64>>,
             <<_8:64>>,
             <<_7:64>>,
             <<_6:64>>,
             <<_5:64>>,
             <<_4:64>>,
             <<_3:64>>,
             <<_2:64>>]
    end.

dec_remote_domain_get_job_info_ret(_1, _2) ->
    begin
        begin
            <<_:_2/binary,_3:32/signed,_/binary>> = _1,
            _4 = _2 + 4
        end,
        begin
            <<_:_4/binary,_5:64/unsigned,_/binary>> = _1,
            _6 = _4 + 8
        end,
        begin
            <<_:_6/binary,_7:64/unsigned,_/binary>> = _1,
            _8 = _6 + 8
        end,
        begin
            <<_:_8/binary,_9:64/unsigned,_/binary>> = _1,
            _10 = _8 + 8
        end,
        begin
            <<_:_10/binary,_11:64/unsigned,_/binary>> = _1,
            _12 = _10 + 8
        end,
        begin
            <<_:_12/binary,_13:64/unsigned,_/binary>> = _1,
            _14 = _12 + 8
        end,
        begin
            <<_:_14/binary,_15:64/unsigned,_/binary>> = _1,
            _16 = _14 + 8
        end,
        begin
            <<_:_16/binary,_17:64/unsigned,_/binary>> = _1,
            _18 = _16 + 8
        end,
        begin
            <<_:_18/binary,_19:64/unsigned,_/binary>> = _1,
            _20 = _18 + 8
        end,
        begin
            <<_:_20/binary,_21:64/unsigned,_/binary>> = _1,
            _22 = _20 + 8
        end,
        begin
            <<_:_22/binary,_23:64/unsigned,_/binary>> = _1,
            _24 = _22 + 8
        end,
        begin
            <<_:_24/binary,_25:64/unsigned,_/binary>> = _1,
            _26 = _24 + 8
        end,
        {{_3, _5, _7, _9, _11, _13, _15, _17, _19, _21, _23, _25}, _26}
    end.

enc_remote_domain_get_job_stats_args(_1) ->
    case _1 of
        {_3, _2} ->
            [enc_remote_nonnull_domain(_3), <<_2:32>>]
    end.

dec_remote_domain_get_job_stats_args(_1, _2) ->
    begin
        {_3, _4} = dec_remote_nonnull_domain(_1, _2),
        begin
            <<_:_4/binary,_5:32/unsigned,_/binary>> = _1,
            _6 = _4 + 4
        end,
        {{_3, _5}, _6}
    end.

enc_remote_domain_get_job_stats_ret(_1) ->
    case _1 of
        {_5, _2} ->
            [<<_5:32>>,
             begin
                 _4 = length(_2),
                 if
                     _4 =< 64 ->
                         [<<_4:32/unsigned>>,
                          lists:map(fun(_3) ->
                                           enc_remote_typed_param(_3)
                                    end,
                                    _2)];
                     true ->
                         exit({xdr, limit})
                 end
             end]
    end.

dec_remote_domain_get_job_stats_ret(_1, _2) ->
    begin
        begin
            <<_:_2/binary,_3:32/signed,_/binary>> = _1,
            _4 = _2 + 4
        end,
        {_5, _6} =
            begin
                <<_:_4/binary,_7:32/unsigned,_/binary>> = _1,
                map_elem(fun(_8, _9) ->
                                dec_remote_typed_param(_8, _9)
                         end,
                         _1,
                         _4 + 4,
                         64, _7)
            end,
        {{_3, _5}, _6}
    end.

enc_remote_domain_abort_job_args(_1) ->
    case _1 of
        {_2} ->
            [enc_remote_nonnull_domain(_2)]
    end.

dec_remote_domain_abort_job_args(_1, _2) ->
    begin
        {_3, _4} = dec_remote_nonnull_domain(_1, _2),
        {{_3}, _4}
    end.

enc_remote_domain_migrate_get_max_downtime_args(_1) ->
    case _1 of
        {_3, _2} ->
            [enc_remote_nonnull_domain(_3), <<_2:32>>]
    end.

dec_remote_domain_migrate_get_max_downtime_args(_1, _2) ->
    begin
        {_3, _4} = dec_remote_nonnull_domain(_1, _2),
        begin
            <<_:_4/binary,_5:32/unsigned,_/binary>> = _1,
            _6 = _4 + 4
        end,
        {{_3, _5}, _6}
    end.

enc_remote_domain_migrate_get_max_downtime_ret(_1) ->
    case _1 of
        {_2} ->
            [<<_2:64>>]
    end.

dec_remote_domain_migrate_get_max_downtime_ret(_1, _2) ->
    begin
        begin
            <<_:_2/binary,_3:64/unsigned,_/binary>> = _1,
            _4 = _2 + 8
        end,
        {{_3}, _4}
    end.

enc_remote_domain_migrate_set_max_downtime_args(_1) ->
    case _1 of
        {_4, _3, _2} ->
            [enc_remote_nonnull_domain(_4), <<_3:64>>, <<_2:32>>]
    end.

dec_remote_domain_migrate_set_max_downtime_args(_1, _2) ->
    begin
        {_3, _4} = dec_remote_nonnull_domain(_1, _2),
        begin
            <<_:_4/binary,_5:64/unsigned,_/binary>> = _1,
            _6 = _4 + 8
        end,
        begin
            <<_:_6/binary,_7:32/unsigned,_/binary>> = _1,
            _8 = _6 + 4
        end,
        {{_3, _5, _7}, _8}
    end.

enc_remote_domain_migrate_get_compression_cache_args(_1) ->
    case _1 of
        {_3, _2} ->
            [enc_remote_nonnull_domain(_3), <<_2:32>>]
    end.

dec_remote_domain_migrate_get_compression_cache_args(_1, _2) ->
    begin
        {_3, _4} = dec_remote_nonnull_domain(_1, _2),
        begin
            <<_:_4/binary,_5:32/unsigned,_/binary>> = _1,
            _6 = _4 + 4
        end,
        {{_3, _5}, _6}
    end.

enc_remote_domain_migrate_get_compression_cache_ret(_1) ->
    case _1 of
        {_2} ->
            [<<_2:64>>]
    end.

dec_remote_domain_migrate_get_compression_cache_ret(_1, _2) ->
    begin
        begin
            <<_:_2/binary,_3:64/unsigned,_/binary>> = _1,
            _4 = _2 + 8
        end,
        {{_3}, _4}
    end.

enc_remote_domain_migrate_set_compression_cache_args(_1) ->
    case _1 of
        {_4, _3, _2} ->
            [enc_remote_nonnull_domain(_4), <<_3:64>>, <<_2:32>>]
    end.

dec_remote_domain_migrate_set_compression_cache_args(_1, _2) ->
    begin
        {_3, _4} = dec_remote_nonnull_domain(_1, _2),
        begin
            <<_:_4/binary,_5:64/unsigned,_/binary>> = _1,
            _6 = _4 + 8
        end,
        begin
            <<_:_6/binary,_7:32/unsigned,_/binary>> = _1,
            _8 = _6 + 4
        end,
        {{_3, _5, _7}, _8}
    end.

enc_remote_domain_migrate_set_max_speed_args(_1) ->
    case _1 of
        {_4, _3, _2} ->
            [enc_remote_nonnull_domain(_4), <<_3:64>>, <<_2:32>>]
    end.

dec_remote_domain_migrate_set_max_speed_args(_1, _2) ->
    begin
        {_3, _4} = dec_remote_nonnull_domain(_1, _2),
        begin
            <<_:_4/binary,_5:64/unsigned,_/binary>> = _1,
            _6 = _4 + 8
        end,
        begin
            <<_:_6/binary,_7:32/unsigned,_/binary>> = _1,
            _8 = _6 + 4
        end,
        {{_3, _5, _7}, _8}
    end.

enc_remote_domain_migrate_get_max_speed_args(_1) ->
    case _1 of
        {_3, _2} ->
            [enc_remote_nonnull_domain(_3), <<_2:32>>]
    end.

dec_remote_domain_migrate_get_max_speed_args(_1, _2) ->
    begin
        {_3, _4} = dec_remote_nonnull_domain(_1, _2),
        begin
            <<_:_4/binary,_5:32/unsigned,_/binary>> = _1,
            _6 = _4 + 4
        end,
        {{_3, _5}, _6}
    end.

enc_remote_domain_migrate_get_max_speed_ret(_1) ->
    case _1 of
        {_2} ->
            [<<_2:64>>]
    end.

dec_remote_domain_migrate_get_max_speed_ret(_1, _2) ->
    begin
        begin
            <<_:_2/binary,_3:64/unsigned,_/binary>> = _1,
            _4 = _2 + 8
        end,
        {{_3}, _4}
    end.

enc_remote_connect_domain_event_register_any_args(_1) ->
    case _1 of
        {_2} ->
            [<<_2:32>>]
    end.

dec_remote_connect_domain_event_register_any_args(_1, _2) ->
    begin
        begin
            <<_:_2/binary,_3:32/signed,_/binary>> = _1,
            _4 = _2 + 4
        end,
        {{_3}, _4}
    end.

enc_remote_connect_domain_event_deregister_any_args(_1) ->
    case _1 of
        {_2} ->
            [<<_2:32>>]
    end.

dec_remote_connect_domain_event_deregister_any_args(_1, _2) ->
    begin
        begin
            <<_:_2/binary,_3:32/signed,_/binary>> = _1,
            _4 = _2 + 4
        end,
        {{_3}, _4}
    end.

enc_remote_connect_domain_event_callback_register_any_args(_1) ->
    case _1 of
        {_3, _2} ->
            [<<_3:32>>, enc_remote_domain(_2)]
    end.

dec_remote_connect_domain_event_callback_register_any_args(_1, _2) ->
    begin
        begin
            <<_:_2/binary,_3:32/signed,_/binary>> = _1,
            _4 = _2 + 4
        end,
        {_5, _6} = dec_remote_domain(_1, _4),
        {{_3, _5}, _6}
    end.

enc_remote_connect_domain_event_callback_register_any_ret(_1) ->
    case _1 of
        {_2} ->
            [<<_2:32>>]
    end.

dec_remote_connect_domain_event_callback_register_any_ret(_1, _2) ->
    begin
        begin
            <<_:_2/binary,_3:32/signed,_/binary>> = _1,
            _4 = _2 + 4
        end,
        {{_3}, _4}
    end.

enc_remote_connect_domain_event_callback_deregister_any_args(_1) ->
    case _1 of
        {_2} ->
            [<<_2:32>>]
    end.

dec_remote_connect_domain_event_callback_deregister_any_args(_1, _2) ->
    begin
        begin
            <<_:_2/binary,_3:32/signed,_/binary>> = _1,
            _4 = _2 + 4
        end,
        {{_3}, _4}
    end.

enc_remote_domain_event_reboot_msg(_1) ->
    case _1 of
        {_2} ->
            [enc_remote_nonnull_domain(_2)]
    end.

dec_remote_domain_event_reboot_msg(_1, _2) ->
    begin
        {_3, _4} = dec_remote_nonnull_domain(_1, _2),
        {{_3}, _4}
    end.

enc_remote_domain_event_callback_reboot_msg(_1) ->
    case _1 of
        {_3, _2} ->
            [<<_3:32>>, enc_remote_domain_event_reboot_msg(_2)]
    end.

dec_remote_domain_event_callback_reboot_msg(_1, _2) ->
    begin
        begin
            <<_:_2/binary,_3:32/signed,_/binary>> = _1,
            _4 = _2 + 4
        end,
        {_5, _6} = dec_remote_domain_event_reboot_msg(_1, _4),
        {{_3, _5}, _6}
    end.

enc_remote_domain_event_rtc_change_msg(_1) ->
    case _1 of
        {_3, _2} ->
            [enc_remote_nonnull_domain(_3), <<_2:64>>]
    end.

dec_remote_domain_event_rtc_change_msg(_1, _2) ->
    begin
        {_3, _4} = dec_remote_nonnull_domain(_1, _2),
        begin
            <<_:_4/binary,_5:64/signed,_/binary>> = _1,
            _6 = _4 + 8
        end,
        {{_3, _5}, _6}
    end.

enc_remote_domain_event_callback_rtc_change_msg(_1) ->
    case _1 of
        {_3, _2} ->
            [<<_3:32>>, enc_remote_domain_event_rtc_change_msg(_2)]
    end.

dec_remote_domain_event_callback_rtc_change_msg(_1, _2) ->
    begin
        begin
            <<_:_2/binary,_3:32/signed,_/binary>> = _1,
            _4 = _2 + 4
        end,
        {_5, _6} = dec_remote_domain_event_rtc_change_msg(_1, _4),
        {{_3, _5}, _6}
    end.

enc_remote_domain_event_watchdog_msg(_1) ->
    case _1 of
        {_3, _2} ->
            [enc_remote_nonnull_domain(_3), <<_2:32>>]
    end.

dec_remote_domain_event_watchdog_msg(_1, _2) ->
    begin
        {_3, _4} = dec_remote_nonnull_domain(_1, _2),
        begin
            <<_:_4/binary,_5:32/signed,_/binary>> = _1,
            _6 = _4 + 4
        end,
        {{_3, _5}, _6}
    end.

enc_remote_domain_event_callback_watchdog_msg(_1) ->
    case _1 of
        {_3, _2} ->
            [<<_3:32>>, enc_remote_domain_event_watchdog_msg(_2)]
    end.

dec_remote_domain_event_callback_watchdog_msg(_1, _2) ->
    begin
        begin
            <<_:_2/binary,_3:32/signed,_/binary>> = _1,
            _4 = _2 + 4
        end,
        {_5, _6} = dec_remote_domain_event_watchdog_msg(_1, _4),
        {{_3, _5}, _6}
    end.

enc_remote_domain_event_io_error_msg(_1) ->
    case _1 of
        {_5, _4, _3, _2} ->
            [enc_remote_nonnull_domain(_5),
             enc_remote_nonnull_string(_4),
             enc_remote_nonnull_string(_3),
             <<_2:32>>]
    end.

dec_remote_domain_event_io_error_msg(_1, _2) ->
    begin
        {_3, _4} = dec_remote_nonnull_domain(_1, _2),
        {_5, _6} = dec_remote_nonnull_string(_1, _4),
        {_7, _8} = dec_remote_nonnull_string(_1, _6),
        begin
            <<_:_8/binary,_9:32/signed,_/binary>> = _1,
            _10 = _8 + 4
        end,
        {{_3, _5, _7, _9}, _10}
    end.

enc_remote_domain_event_callback_io_error_msg(_1) ->
    case _1 of
        {_3, _2} ->
            [<<_3:32>>, enc_remote_domain_event_io_error_msg(_2)]
    end.

dec_remote_domain_event_callback_io_error_msg(_1, _2) ->
    begin
        begin
            <<_:_2/binary,_3:32/signed,_/binary>> = _1,
            _4 = _2 + 4
        end,
        {_5, _6} = dec_remote_domain_event_io_error_msg(_1, _4),
        {{_3, _5}, _6}
    end.

enc_remote_domain_event_io_error_reason_msg(_1) ->
    case _1 of
        {_6, _5, _4, _3, _2} ->
            [enc_remote_nonnull_domain(_6),
             enc_remote_nonnull_string(_5),
             enc_remote_nonnull_string(_4),
             <<_3:32>>,
             enc_remote_nonnull_string(_2)]
    end.

dec_remote_domain_event_io_error_reason_msg(_1, _2) ->
    begin
        {_3, _4} = dec_remote_nonnull_domain(_1, _2),
        {_5, _6} = dec_remote_nonnull_string(_1, _4),
        {_7, _8} = dec_remote_nonnull_string(_1, _6),
        begin
            <<_:_8/binary,_9:32/signed,_/binary>> = _1,
            _10 = _8 + 4
        end,
        {_11, _12} = dec_remote_nonnull_string(_1, _10),
        {{_3, _5, _7, _9, _11}, _12}
    end.

enc_remote_domain_event_callback_io_error_reason_msg(_1) ->
    case _1 of
        {_3, _2} ->
            [<<_3:32>>, enc_remote_domain_event_io_error_reason_msg(_2)]
    end.

dec_remote_domain_event_callback_io_error_reason_msg(_1, _2) ->
    begin
        begin
            <<_:_2/binary,_3:32/signed,_/binary>> = _1,
            _4 = _2 + 4
        end,
        {_5, _6} = dec_remote_domain_event_io_error_reason_msg(_1, _4),
        {{_3, _5}, _6}
    end.

enc_remote_domain_event_graphics_address(_1) ->
    case _1 of
        {_4, _3, _2} ->
            [<<_4:32>>,
             enc_remote_nonnull_string(_3),
             enc_remote_nonnull_string(_2)]
    end.

dec_remote_domain_event_graphics_address(_1, _2) ->
    begin
        begin
            <<_:_2/binary,_3:32/signed,_/binary>> = _1,
            _4 = _2 + 4
        end,
        {_5, _6} = dec_remote_nonnull_string(_1, _4),
        {_7, _8} = dec_remote_nonnull_string(_1, _6),
        {{_3, _5, _7}, _8}
    end.

enc_remote_domain_event_graphics_identity(_1) ->
    case _1 of
        {_3, _2} ->
            [enc_remote_nonnull_string(_3),
             enc_remote_nonnull_string(_2)]
    end.

dec_remote_domain_event_graphics_identity(_1, _2) ->
    begin
        {_3, _4} = dec_remote_nonnull_string(_1, _2),
        {_5, _6} = dec_remote_nonnull_string(_1, _4),
        {{_3, _5}, _6}
    end.

enc_remote_domain_event_graphics_msg(_1) ->
    case _1 of
        {_9, _8, _7, _6, _5, _2} ->
            [enc_remote_nonnull_domain(_9),
             <<_8:32>>,
             enc_remote_domain_event_graphics_address(_7),
             enc_remote_domain_event_graphics_address(_6),
             enc_remote_nonnull_string(_5),
             begin
                 _4 = length(_2),
                 if
                     _4 =< 20 ->
                         [<<_4:32/unsigned>>,
                          lists:map(fun(_3) ->
                                           enc_remote_domain_event_graphics_identity(_3)
                                    end,
                                    _2)];
                     true ->
                         exit({xdr, limit})
                 end
             end]
    end.

dec_remote_domain_event_graphics_msg(_1, _2) ->
    begin
        {_3, _4} = dec_remote_nonnull_domain(_1, _2),
        begin
            <<_:_4/binary,_5:32/signed,_/binary>> = _1,
            _6 = _4 + 4
        end,
        {_7, _8} = dec_remote_domain_event_graphics_address(_1, _6),
        {_9, _10} = dec_remote_domain_event_graphics_address(_1, _8),
        {_11, _12} = dec_remote_nonnull_string(_1, _10),
        {_13, _14} =
            begin
                <<_:_12/binary,_15:32/unsigned,_/binary>> = _1,
                map_elem(fun(_16, _17) ->
                                dec_remote_domain_event_graphics_identity(_16,
                                                                          _17)
                         end,
                         _1,
                         _12 + 4,
                         20, _15)
            end,
        {{_3, _5, _7, _9, _11, _13}, _14}
    end.

enc_remote_domain_event_callback_graphics_msg(_1) ->
    case _1 of
        {_3, _2} ->
            [<<_3:32>>, enc_remote_domain_event_graphics_msg(_2)]
    end.

dec_remote_domain_event_callback_graphics_msg(_1, _2) ->
    begin
        begin
            <<_:_2/binary,_3:32/signed,_/binary>> = _1,
            _4 = _2 + 4
        end,
        {_5, _6} = dec_remote_domain_event_graphics_msg(_1, _4),
        {{_3, _5}, _6}
    end.

enc_remote_domain_event_block_job_msg(_1) ->
    case _1 of
        {_5, _4, _3, _2} ->
            [enc_remote_nonnull_domain(_5),
             enc_remote_nonnull_string(_4),
             <<_3:32>>,
             <<_2:32>>]
    end.

dec_remote_domain_event_block_job_msg(_1, _2) ->
    begin
        {_3, _4} = dec_remote_nonnull_domain(_1, _2),
        {_5, _6} = dec_remote_nonnull_string(_1, _4),
        begin
            <<_:_6/binary,_7:32/signed,_/binary>> = _1,
            _8 = _6 + 4
        end,
        begin
            <<_:_8/binary,_9:32/signed,_/binary>> = _1,
            _10 = _8 + 4
        end,
        {{_3, _5, _7, _9}, _10}
    end.

enc_remote_domain_event_callback_block_job_msg(_1) ->
    case _1 of
        {_3, _2} ->
            [<<_3:32>>, enc_remote_domain_event_block_job_msg(_2)]
    end.

dec_remote_domain_event_callback_block_job_msg(_1, _2) ->
    begin
        begin
            <<_:_2/binary,_3:32/signed,_/binary>> = _1,
            _4 = _2 + 4
        end,
        {_5, _6} = dec_remote_domain_event_block_job_msg(_1, _4),
        {{_3, _5}, _6}
    end.

enc_remote_domain_event_disk_change_msg(_1) ->
    case _1 of
        {_6, _5, _4, _3, _2} ->
            [enc_remote_nonnull_domain(_6),
             enc_remote_string(_5),
             enc_remote_string(_4),
             enc_remote_nonnull_string(_3),
             <<_2:32>>]
    end.

dec_remote_domain_event_disk_change_msg(_1, _2) ->
    begin
        {_3, _4} = dec_remote_nonnull_domain(_1, _2),
        {_5, _6} = dec_remote_string(_1, _4),
        {_7, _8} = dec_remote_string(_1, _6),
        {_9, _10} = dec_remote_nonnull_string(_1, _8),
        begin
            <<_:_10/binary,_11:32/signed,_/binary>> = _1,
            _12 = _10 + 4
        end,
        {{_3, _5, _7, _9, _11}, _12}
    end.

enc_remote_domain_event_callback_disk_change_msg(_1) ->
    case _1 of
        {_3, _2} ->
            [<<_3:32>>, enc_remote_domain_event_disk_change_msg(_2)]
    end.

dec_remote_domain_event_callback_disk_change_msg(_1, _2) ->
    begin
        begin
            <<_:_2/binary,_3:32/signed,_/binary>> = _1,
            _4 = _2 + 4
        end,
        {_5, _6} = dec_remote_domain_event_disk_change_msg(_1, _4),
        {{_3, _5}, _6}
    end.

enc_remote_domain_event_tray_change_msg(_1) ->
    case _1 of
        {_4, _3, _2} ->
            [enc_remote_nonnull_domain(_4),
             enc_remote_nonnull_string(_3),
             <<_2:32>>]
    end.

dec_remote_domain_event_tray_change_msg(_1, _2) ->
    begin
        {_3, _4} = dec_remote_nonnull_domain(_1, _2),
        {_5, _6} = dec_remote_nonnull_string(_1, _4),
        begin
            <<_:_6/binary,_7:32/signed,_/binary>> = _1,
            _8 = _6 + 4
        end,
        {{_3, _5, _7}, _8}
    end.

enc_remote_domain_event_callback_tray_change_msg(_1) ->
    case _1 of
        {_3, _2} ->
            [<<_3:32>>, enc_remote_domain_event_tray_change_msg(_2)]
    end.

dec_remote_domain_event_callback_tray_change_msg(_1, _2) ->
    begin
        begin
            <<_:_2/binary,_3:32/signed,_/binary>> = _1,
            _4 = _2 + 4
        end,
        {_5, _6} = dec_remote_domain_event_tray_change_msg(_1, _4),
        {{_3, _5}, _6}
    end.

enc_remote_domain_event_pmwakeup_msg(_1) ->
    case _1 of
        {_2} ->
            [enc_remote_nonnull_domain(_2)]
    end.

dec_remote_domain_event_pmwakeup_msg(_1, _2) ->
    begin
        {_3, _4} = dec_remote_nonnull_domain(_1, _2),
        {{_3}, _4}
    end.

enc_remote_domain_event_callback_pmwakeup_msg(_1) ->
    case _1 of
        {_4, _3, _2} ->
            [<<_4:32>>,
             <<_3:32>>,
             enc_remote_domain_event_pmwakeup_msg(_2)]
    end.

dec_remote_domain_event_callback_pmwakeup_msg(_1, _2) ->
    begin
        begin
            <<_:_2/binary,_3:32/signed,_/binary>> = _1,
            _4 = _2 + 4
        end,
        begin
            <<_:_4/binary,_5:32/signed,_/binary>> = _1,
            _6 = _4 + 4
        end,
        {_7, _8} = dec_remote_domain_event_pmwakeup_msg(_1, _6),
        {{_3, _5, _7}, _8}
    end.

enc_remote_domain_event_pmsuspend_msg(_1) ->
    case _1 of
        {_2} ->
            [enc_remote_nonnull_domain(_2)]
    end.

dec_remote_domain_event_pmsuspend_msg(_1, _2) ->
    begin
        {_3, _4} = dec_remote_nonnull_domain(_1, _2),
        {{_3}, _4}
    end.

enc_remote_domain_event_callback_pmsuspend_msg(_1) ->
    case _1 of
        {_4, _3, _2} ->
            [<<_4:32>>,
             <<_3:32>>,
             enc_remote_domain_event_pmsuspend_msg(_2)]
    end.

dec_remote_domain_event_callback_pmsuspend_msg(_1, _2) ->
    begin
        begin
            <<_:_2/binary,_3:32/signed,_/binary>> = _1,
            _4 = _2 + 4
        end,
        begin
            <<_:_4/binary,_5:32/signed,_/binary>> = _1,
            _6 = _4 + 4
        end,
        {_7, _8} = dec_remote_domain_event_pmsuspend_msg(_1, _6),
        {{_3, _5, _7}, _8}
    end.

enc_remote_domain_event_balloon_change_msg(_1) ->
    case _1 of
        {_3, _2} ->
            [enc_remote_nonnull_domain(_3), <<_2:64>>]
    end.

dec_remote_domain_event_balloon_change_msg(_1, _2) ->
    begin
        {_3, _4} = dec_remote_nonnull_domain(_1, _2),
        begin
            <<_:_4/binary,_5:64/unsigned,_/binary>> = _1,
            _6 = _4 + 8
        end,
        {{_3, _5}, _6}
    end.

enc_remote_domain_event_callback_balloon_change_msg(_1) ->
    case _1 of
        {_3, _2} ->
            [<<_3:32>>, enc_remote_domain_event_balloon_change_msg(_2)]
    end.

dec_remote_domain_event_callback_balloon_change_msg(_1, _2) ->
    begin
        begin
            <<_:_2/binary,_3:32/signed,_/binary>> = _1,
            _4 = _2 + 4
        end,
        {_5, _6} = dec_remote_domain_event_balloon_change_msg(_1, _4),
        {{_3, _5}, _6}
    end.

enc_remote_domain_event_pmsuspend_disk_msg(_1) ->
    case _1 of
        {_2} ->
            [enc_remote_nonnull_domain(_2)]
    end.

dec_remote_domain_event_pmsuspend_disk_msg(_1, _2) ->
    begin
        {_3, _4} = dec_remote_nonnull_domain(_1, _2),
        {{_3}, _4}
    end.

enc_remote_domain_event_callback_pmsuspend_disk_msg(_1) ->
    case _1 of
        {_4, _3, _2} ->
            [<<_4:32>>,
             <<_3:32>>,
             enc_remote_domain_event_pmsuspend_disk_msg(_2)]
    end.

dec_remote_domain_event_callback_pmsuspend_disk_msg(_1, _2) ->
    begin
        begin
            <<_:_2/binary,_3:32/signed,_/binary>> = _1,
            _4 = _2 + 4
        end,
        begin
            <<_:_4/binary,_5:32/signed,_/binary>> = _1,
            _6 = _4 + 4
        end,
        {_7, _8} = dec_remote_domain_event_pmsuspend_disk_msg(_1, _6),
        {{_3, _5, _7}, _8}
    end.

enc_remote_domain_managed_save_args(_1) ->
    case _1 of
        {_3, _2} ->
            [enc_remote_nonnull_domain(_3), <<_2:32>>]
    end.

dec_remote_domain_managed_save_args(_1, _2) ->
    begin
        {_3, _4} = dec_remote_nonnull_domain(_1, _2),
        begin
            <<_:_4/binary,_5:32/unsigned,_/binary>> = _1,
            _6 = _4 + 4
        end,
        {{_3, _5}, _6}
    end.

enc_remote_domain_has_managed_save_image_args(_1) ->
    case _1 of
        {_3, _2} ->
            [enc_remote_nonnull_domain(_3), <<_2:32>>]
    end.

dec_remote_domain_has_managed_save_image_args(_1, _2) ->
    begin
        {_3, _4} = dec_remote_nonnull_domain(_1, _2),
        begin
            <<_:_4/binary,_5:32/unsigned,_/binary>> = _1,
            _6 = _4 + 4
        end,
        {{_3, _5}, _6}
    end.

enc_remote_domain_has_managed_save_image_ret(_1) ->
    case _1 of
        {_2} ->
            [<<_2:32>>]
    end.

dec_remote_domain_has_managed_save_image_ret(_1, _2) ->
    begin
        begin
            <<_:_2/binary,_3:32/signed,_/binary>> = _1,
            _4 = _2 + 4
        end,
        {{_3}, _4}
    end.

enc_remote_domain_managed_save_remove_args(_1) ->
    case _1 of
        {_3, _2} ->
            [enc_remote_nonnull_domain(_3), <<_2:32>>]
    end.

dec_remote_domain_managed_save_remove_args(_1, _2) ->
    begin
        {_3, _4} = dec_remote_nonnull_domain(_1, _2),
        begin
            <<_:_4/binary,_5:32/unsigned,_/binary>> = _1,
            _6 = _4 + 4
        end,
        {{_3, _5}, _6}
    end.

enc_remote_domain_managed_save_get_xml_desc_args(_1) ->
    case _1 of
        {_3, _2} ->
            [enc_remote_nonnull_domain(_3), <<_2:32>>]
    end.

dec_remote_domain_managed_save_get_xml_desc_args(_1, _2) ->
    begin
        {_3, _4} = dec_remote_nonnull_domain(_1, _2),
        begin
            <<_:_4/binary,_5:32/unsigned,_/binary>> = _1,
            _6 = _4 + 4
        end,
        {{_3, _5}, _6}
    end.

enc_remote_domain_managed_save_get_xml_desc_ret(_1) ->
    case _1 of
        {_2} ->
            [enc_remote_nonnull_string(_2)]
    end.

dec_remote_domain_managed_save_get_xml_desc_ret(_1, _2) ->
    begin
        {_3, _4} = dec_remote_nonnull_string(_1, _2),
        {{_3}, _4}
    end.

enc_remote_domain_managed_save_define_xml_args(_1) ->
    case _1 of
        {_4, _3, _2} ->
            [enc_remote_nonnull_domain(_4),
             enc_remote_string(_3),
             <<_2:32>>]
    end.

dec_remote_domain_managed_save_define_xml_args(_1, _2) ->
    begin
        {_3, _4} = dec_remote_nonnull_domain(_1, _2),
        {_5, _6} = dec_remote_string(_1, _4),
        begin
            <<_:_6/binary,_7:32/unsigned,_/binary>> = _1,
            _8 = _6 + 4
        end,
        {{_3, _5, _7}, _8}
    end.

enc_remote_domain_snapshot_create_xml_args(_1) ->
    case _1 of
        {_4, _3, _2} ->
            [enc_remote_nonnull_domain(_4),
             enc_remote_nonnull_string(_3),
             <<_2:32>>]
    end.

dec_remote_domain_snapshot_create_xml_args(_1, _2) ->
    begin
        {_3, _4} = dec_remote_nonnull_domain(_1, _2),
        {_5, _6} = dec_remote_nonnull_string(_1, _4),
        begin
            <<_:_6/binary,_7:32/unsigned,_/binary>> = _1,
            _8 = _6 + 4
        end,
        {{_3, _5, _7}, _8}
    end.

enc_remote_domain_snapshot_create_xml_ret(_1) ->
    case _1 of
        {_2} ->
            [enc_remote_nonnull_domain_snapshot(_2)]
    end.

dec_remote_domain_snapshot_create_xml_ret(_1, _2) ->
    begin
        {_3, _4} = dec_remote_nonnull_domain_snapshot(_1, _2),
        {{_3}, _4}
    end.

enc_remote_domain_snapshot_get_xml_desc_args(_1) ->
    case _1 of
        {_3, _2} ->
            [enc_remote_nonnull_domain_snapshot(_3), <<_2:32>>]
    end.

dec_remote_domain_snapshot_get_xml_desc_args(_1, _2) ->
    begin
        {_3, _4} = dec_remote_nonnull_domain_snapshot(_1, _2),
        begin
            <<_:_4/binary,_5:32/unsigned,_/binary>> = _1,
            _6 = _4 + 4
        end,
        {{_3, _5}, _6}
    end.

enc_remote_domain_snapshot_get_xml_desc_ret(_1) ->
    case _1 of
        {_2} ->
            [enc_remote_nonnull_string(_2)]
    end.

dec_remote_domain_snapshot_get_xml_desc_ret(_1, _2) ->
    begin
        {_3, _4} = dec_remote_nonnull_string(_1, _2),
        {{_3}, _4}
    end.

enc_remote_domain_snapshot_num_args(_1) ->
    case _1 of
        {_3, _2} ->
            [enc_remote_nonnull_domain(_3), <<_2:32>>]
    end.

dec_remote_domain_snapshot_num_args(_1, _2) ->
    begin
        {_3, _4} = dec_remote_nonnull_domain(_1, _2),
        begin
            <<_:_4/binary,_5:32/unsigned,_/binary>> = _1,
            _6 = _4 + 4
        end,
        {{_3, _5}, _6}
    end.

enc_remote_domain_snapshot_num_ret(_1) ->
    case _1 of
        {_2} ->
            [<<_2:32>>]
    end.

dec_remote_domain_snapshot_num_ret(_1, _2) ->
    begin
        begin
            <<_:_2/binary,_3:32/signed,_/binary>> = _1,
            _4 = _2 + 4
        end,
        {{_3}, _4}
    end.

enc_remote_domain_snapshot_list_names_args(_1) ->
    case _1 of
        {_4, _3, _2} ->
            [enc_remote_nonnull_domain(_4), <<_3:32>>, <<_2:32>>]
    end.

dec_remote_domain_snapshot_list_names_args(_1, _2) ->
    begin
        {_3, _4} = dec_remote_nonnull_domain(_1, _2),
        begin
            <<_:_4/binary,_5:32/signed,_/binary>> = _1,
            _6 = _4 + 4
        end,
        begin
            <<_:_6/binary,_7:32/unsigned,_/binary>> = _1,
            _8 = _6 + 4
        end,
        {{_3, _5, _7}, _8}
    end.

enc_remote_domain_snapshot_list_names_ret(_1) ->
    case _1 of
        {_2} ->
            [begin
                 _4 = length(_2),
                 if
                     _4 =< 16384 ->
                         [<<_4:32/unsigned>>,
                          lists:map(fun(_3) ->
                                           enc_remote_nonnull_string(_3)
                                    end,
                                    _2)];
                     true ->
                         exit({xdr, limit})
                 end
             end]
    end.

dec_remote_domain_snapshot_list_names_ret(_1, _2) ->
    begin
        {_3, _4} =
            begin
                <<_:_2/binary,_5:32/unsigned,_/binary>> = _1,
                map_elem(fun(_6, _7) ->
                                dec_remote_nonnull_string(_6, _7)
                         end,
                         _1,
                         _2 + 4,
                         16384, _5)
            end,
        {{_3}, _4}
    end.

enc_remote_domain_list_all_snapshots_args(_1) ->
    case _1 of
        {_4, _3, _2} ->
            [enc_remote_nonnull_domain(_4), <<_3:32>>, <<_2:32>>]
    end.

dec_remote_domain_list_all_snapshots_args(_1, _2) ->
    begin
        {_3, _4} = dec_remote_nonnull_domain(_1, _2),
        begin
            <<_:_4/binary,_5:32/signed,_/binary>> = _1,
            _6 = _4 + 4
        end,
        begin
            <<_:_6/binary,_7:32/unsigned,_/binary>> = _1,
            _8 = _6 + 4
        end,
        {{_3, _5, _7}, _8}
    end.

enc_remote_domain_list_all_snapshots_ret(_1) ->
    case _1 of
        {_3, _2} ->
            [begin
                 _5 = length(_3),
                 if
                     _5 =< 16384 ->
                         [<<_5:32/unsigned>>,
                          lists:map(fun(_4) ->
                                           enc_remote_nonnull_domain_snapshot(_4)
                                    end,
                                    _3)];
                     true ->
                         exit({xdr, limit})
                 end
             end,
             <<_2:32>>]
    end.

dec_remote_domain_list_all_snapshots_ret(_1, _2) ->
    begin
        {_3, _4} =
            begin
                <<_:_2/binary,_5:32/unsigned,_/binary>> = _1,
                map_elem(fun(_6, _7) ->
                                dec_remote_nonnull_domain_snapshot(_6,
                                                                   _7)
                         end,
                         _1,
                         _2 + 4,
                         16384, _5)
            end,
        begin
            <<_:_4/binary,_8:32/signed,_/binary>> = _1,
            _9 = _4 + 4
        end,
        {{_3, _8}, _9}
    end.

enc_remote_domain_snapshot_num_children_args(_1) ->
    case _1 of
        {_3, _2} ->
            [enc_remote_nonnull_domain_snapshot(_3), <<_2:32>>]
    end.

dec_remote_domain_snapshot_num_children_args(_1, _2) ->
    begin
        {_3, _4} = dec_remote_nonnull_domain_snapshot(_1, _2),
        begin
            <<_:_4/binary,_5:32/unsigned,_/binary>> = _1,
            _6 = _4 + 4
        end,
        {{_3, _5}, _6}
    end.

enc_remote_domain_snapshot_num_children_ret(_1) ->
    case _1 of
        {_2} ->
            [<<_2:32>>]
    end.

dec_remote_domain_snapshot_num_children_ret(_1, _2) ->
    begin
        begin
            <<_:_2/binary,_3:32/signed,_/binary>> = _1,
            _4 = _2 + 4
        end,
        {{_3}, _4}
    end.

enc_remote_domain_snapshot_list_children_names_args(_1) ->
    case _1 of
        {_4, _3, _2} ->
            [enc_remote_nonnull_domain_snapshot(_4),
             <<_3:32>>,
             <<_2:32>>]
    end.

dec_remote_domain_snapshot_list_children_names_args(_1, _2) ->
    begin
        {_3, _4} = dec_remote_nonnull_domain_snapshot(_1, _2),
        begin
            <<_:_4/binary,_5:32/signed,_/binary>> = _1,
            _6 = _4 + 4
        end,
        begin
            <<_:_6/binary,_7:32/unsigned,_/binary>> = _1,
            _8 = _6 + 4
        end,
        {{_3, _5, _7}, _8}
    end.

enc_remote_domain_snapshot_list_children_names_ret(_1) ->
    case _1 of
        {_2} ->
            [begin
                 _4 = length(_2),
                 if
                     _4 =< 16384 ->
                         [<<_4:32/unsigned>>,
                          lists:map(fun(_3) ->
                                           enc_remote_nonnull_string(_3)
                                    end,
                                    _2)];
                     true ->
                         exit({xdr, limit})
                 end
             end]
    end.

dec_remote_domain_snapshot_list_children_names_ret(_1, _2) ->
    begin
        {_3, _4} =
            begin
                <<_:_2/binary,_5:32/unsigned,_/binary>> = _1,
                map_elem(fun(_6, _7) ->
                                dec_remote_nonnull_string(_6, _7)
                         end,
                         _1,
                         _2 + 4,
                         16384, _5)
            end,
        {{_3}, _4}
    end.

enc_remote_domain_snapshot_list_all_children_args(_1) ->
    case _1 of
        {_4, _3, _2} ->
            [enc_remote_nonnull_domain_snapshot(_4),
             <<_3:32>>,
             <<_2:32>>]
    end.

dec_remote_domain_snapshot_list_all_children_args(_1, _2) ->
    begin
        {_3, _4} = dec_remote_nonnull_domain_snapshot(_1, _2),
        begin
            <<_:_4/binary,_5:32/signed,_/binary>> = _1,
            _6 = _4 + 4
        end,
        begin
            <<_:_6/binary,_7:32/unsigned,_/binary>> = _1,
            _8 = _6 + 4
        end,
        {{_3, _5, _7}, _8}
    end.

enc_remote_domain_snapshot_list_all_children_ret(_1) ->
    case _1 of
        {_3, _2} ->
            [begin
                 _5 = length(_3),
                 if
                     _5 =< 16384 ->
                         [<<_5:32/unsigned>>,
                          lists:map(fun(_4) ->
                                           enc_remote_nonnull_domain_snapshot(_4)
                                    end,
                                    _3)];
                     true ->
                         exit({xdr, limit})
                 end
             end,
             <<_2:32>>]
    end.

dec_remote_domain_snapshot_list_all_children_ret(_1, _2) ->
    begin
        {_3, _4} =
            begin
                <<_:_2/binary,_5:32/unsigned,_/binary>> = _1,
                map_elem(fun(_6, _7) ->
                                dec_remote_nonnull_domain_snapshot(_6,
                                                                   _7)
                         end,
                         _1,
                         _2 + 4,
                         16384, _5)
            end,
        begin
            <<_:_4/binary,_8:32/signed,_/binary>> = _1,
            _9 = _4 + 4
        end,
        {{_3, _8}, _9}
    end.

enc_remote_domain_snapshot_lookup_by_name_args(_1) ->
    case _1 of
        {_4, _3, _2} ->
            [enc_remote_nonnull_domain(_4),
             enc_remote_nonnull_string(_3),
             <<_2:32>>]
    end.

dec_remote_domain_snapshot_lookup_by_name_args(_1, _2) ->
    begin
        {_3, _4} = dec_remote_nonnull_domain(_1, _2),
        {_5, _6} = dec_remote_nonnull_string(_1, _4),
        begin
            <<_:_6/binary,_7:32/unsigned,_/binary>> = _1,
            _8 = _6 + 4
        end,
        {{_3, _5, _7}, _8}
    end.

enc_remote_domain_snapshot_lookup_by_name_ret(_1) ->
    case _1 of
        {_2} ->
            [enc_remote_nonnull_domain_snapshot(_2)]
    end.

dec_remote_domain_snapshot_lookup_by_name_ret(_1, _2) ->
    begin
        {_3, _4} = dec_remote_nonnull_domain_snapshot(_1, _2),
        {{_3}, _4}
    end.

enc_remote_domain_has_current_snapshot_args(_1) ->
    case _1 of
        {_3, _2} ->
            [enc_remote_nonnull_domain(_3), <<_2:32>>]
    end.

dec_remote_domain_has_current_snapshot_args(_1, _2) ->
    begin
        {_3, _4} = dec_remote_nonnull_domain(_1, _2),
        begin
            <<_:_4/binary,_5:32/unsigned,_/binary>> = _1,
            _6 = _4 + 4
        end,
        {{_3, _5}, _6}
    end.

enc_remote_domain_has_current_snapshot_ret(_1) ->
    case _1 of
        {_2} ->
            [<<_2:32>>]
    end.

dec_remote_domain_has_current_snapshot_ret(_1, _2) ->
    begin
        begin
            <<_:_2/binary,_3:32/signed,_/binary>> = _1,
            _4 = _2 + 4
        end,
        {{_3}, _4}
    end.

enc_remote_domain_snapshot_get_parent_args(_1) ->
    case _1 of
        {_3, _2} ->
            [enc_remote_nonnull_domain_snapshot(_3), <<_2:32>>]
    end.

dec_remote_domain_snapshot_get_parent_args(_1, _2) ->
    begin
        {_3, _4} = dec_remote_nonnull_domain_snapshot(_1, _2),
        begin
            <<_:_4/binary,_5:32/unsigned,_/binary>> = _1,
            _6 = _4 + 4
        end,
        {{_3, _5}, _6}
    end.

enc_remote_domain_snapshot_get_parent_ret(_1) ->
    case _1 of
        {_2} ->
            [enc_remote_nonnull_domain_snapshot(_2)]
    end.

dec_remote_domain_snapshot_get_parent_ret(_1, _2) ->
    begin
        {_3, _4} = dec_remote_nonnull_domain_snapshot(_1, _2),
        {{_3}, _4}
    end.

enc_remote_domain_snapshot_current_args(_1) ->
    case _1 of
        {_3, _2} ->
            [enc_remote_nonnull_domain(_3), <<_2:32>>]
    end.

dec_remote_domain_snapshot_current_args(_1, _2) ->
    begin
        {_3, _4} = dec_remote_nonnull_domain(_1, _2),
        begin
            <<_:_4/binary,_5:32/unsigned,_/binary>> = _1,
            _6 = _4 + 4
        end,
        {{_3, _5}, _6}
    end.

enc_remote_domain_snapshot_current_ret(_1) ->
    case _1 of
        {_2} ->
            [enc_remote_nonnull_domain_snapshot(_2)]
    end.

dec_remote_domain_snapshot_current_ret(_1, _2) ->
    begin
        {_3, _4} = dec_remote_nonnull_domain_snapshot(_1, _2),
        {{_3}, _4}
    end.

enc_remote_domain_snapshot_is_current_args(_1) ->
    case _1 of
        {_3, _2} ->
            [enc_remote_nonnull_domain_snapshot(_3), <<_2:32>>]
    end.

dec_remote_domain_snapshot_is_current_args(_1, _2) ->
    begin
        {_3, _4} = dec_remote_nonnull_domain_snapshot(_1, _2),
        begin
            <<_:_4/binary,_5:32/unsigned,_/binary>> = _1,
            _6 = _4 + 4
        end,
        {{_3, _5}, _6}
    end.

enc_remote_domain_snapshot_is_current_ret(_1) ->
    case _1 of
        {_2} ->
            [<<_2:32>>]
    end.

dec_remote_domain_snapshot_is_current_ret(_1, _2) ->
    begin
        begin
            <<_:_2/binary,_3:32/signed,_/binary>> = _1,
            _4 = _2 + 4
        end,
        {{_3}, _4}
    end.

enc_remote_domain_snapshot_has_metadata_args(_1) ->
    case _1 of
        {_3, _2} ->
            [enc_remote_nonnull_domain_snapshot(_3), <<_2:32>>]
    end.

dec_remote_domain_snapshot_has_metadata_args(_1, _2) ->
    begin
        {_3, _4} = dec_remote_nonnull_domain_snapshot(_1, _2),
        begin
            <<_:_4/binary,_5:32/unsigned,_/binary>> = _1,
            _6 = _4 + 4
        end,
        {{_3, _5}, _6}
    end.

enc_remote_domain_snapshot_has_metadata_ret(_1) ->
    case _1 of
        {_2} ->
            [<<_2:32>>]
    end.

dec_remote_domain_snapshot_has_metadata_ret(_1, _2) ->
    begin
        begin
            <<_:_2/binary,_3:32/signed,_/binary>> = _1,
            _4 = _2 + 4
        end,
        {{_3}, _4}
    end.

enc_remote_domain_revert_to_snapshot_args(_1) ->
    case _1 of
        {_3, _2} ->
            [enc_remote_nonnull_domain_snapshot(_3), <<_2:32>>]
    end.

dec_remote_domain_revert_to_snapshot_args(_1, _2) ->
    begin
        {_3, _4} = dec_remote_nonnull_domain_snapshot(_1, _2),
        begin
            <<_:_4/binary,_5:32/unsigned,_/binary>> = _1,
            _6 = _4 + 4
        end,
        {{_3, _5}, _6}
    end.

enc_remote_domain_snapshot_delete_args(_1) ->
    case _1 of
        {_3, _2} ->
            [enc_remote_nonnull_domain_snapshot(_3), <<_2:32>>]
    end.

dec_remote_domain_snapshot_delete_args(_1, _2) ->
    begin
        {_3, _4} = dec_remote_nonnull_domain_snapshot(_1, _2),
        begin
            <<_:_4/binary,_5:32/unsigned,_/binary>> = _1,
            _6 = _4 + 4
        end,
        {{_3, _5}, _6}
    end.

enc_remote_domain_open_console_args(_1) ->
    case _1 of
        {_4, _3, _2} ->
            [enc_remote_nonnull_domain(_4),
             enc_remote_string(_3),
             <<_2:32>>]
    end.

dec_remote_domain_open_console_args(_1, _2) ->
    begin
        {_3, _4} = dec_remote_nonnull_domain(_1, _2),
        {_5, _6} = dec_remote_string(_1, _4),
        begin
            <<_:_6/binary,_7:32/unsigned,_/binary>> = _1,
            _8 = _6 + 4
        end,
        {{_3, _5, _7}, _8}
    end.

enc_remote_domain_open_channel_args(_1) ->
    case _1 of
        {_4, _3, _2} ->
            [enc_remote_nonnull_domain(_4),
             enc_remote_string(_3),
             <<_2:32>>]
    end.

dec_remote_domain_open_channel_args(_1, _2) ->
    begin
        {_3, _4} = dec_remote_nonnull_domain(_1, _2),
        {_5, _6} = dec_remote_string(_1, _4),
        begin
            <<_:_6/binary,_7:32/unsigned,_/binary>> = _1,
            _8 = _6 + 4
        end,
        {{_3, _5, _7}, _8}
    end.

enc_remote_storage_vol_upload_args(_1) ->
    case _1 of
        {_5, _4, _3, _2} ->
            [enc_remote_nonnull_storage_vol(_5),
             <<_4:64>>,
             <<_3:64>>,
             <<_2:32>>]
    end.

dec_remote_storage_vol_upload_args(_1, _2) ->
    begin
        {_3, _4} = dec_remote_nonnull_storage_vol(_1, _2),
        begin
            <<_:_4/binary,_5:64/unsigned,_/binary>> = _1,
            _6 = _4 + 8
        end,
        begin
            <<_:_6/binary,_7:64/unsigned,_/binary>> = _1,
            _8 = _6 + 8
        end,
        begin
            <<_:_8/binary,_9:32/unsigned,_/binary>> = _1,
            _10 = _8 + 4
        end,
        {{_3, _5, _7, _9}, _10}
    end.

enc_remote_storage_vol_download_args(_1) ->
    case _1 of
        {_5, _4, _3, _2} ->
            [enc_remote_nonnull_storage_vol(_5),
             <<_4:64>>,
             <<_3:64>>,
             <<_2:32>>]
    end.

dec_remote_storage_vol_download_args(_1, _2) ->
    begin
        {_3, _4} = dec_remote_nonnull_storage_vol(_1, _2),
        begin
            <<_:_4/binary,_5:64/unsigned,_/binary>> = _1,
            _6 = _4 + 8
        end,
        begin
            <<_:_6/binary,_7:64/unsigned,_/binary>> = _1,
            _8 = _6 + 8
        end,
        begin
            <<_:_8/binary,_9:32/unsigned,_/binary>> = _1,
            _10 = _8 + 4
        end,
        {{_3, _5, _7, _9}, _10}
    end.

enc_remote_domain_get_state_args(_1) ->
    case _1 of
        {_3, _2} ->
            [enc_remote_nonnull_domain(_3), <<_2:32>>]
    end.

dec_remote_domain_get_state_args(_1, _2) ->
    begin
        {_3, _4} = dec_remote_nonnull_domain(_1, _2),
        begin
            <<_:_4/binary,_5:32/unsigned,_/binary>> = _1,
            _6 = _4 + 4
        end,
        {{_3, _5}, _6}
    end.

enc_remote_domain_get_state_ret(_1) ->
    case _1 of
        {_3, _2} ->
            [<<_3:32>>, <<_2:32>>]
    end.

dec_remote_domain_get_state_ret(_1, _2) ->
    begin
        begin
            <<_:_2/binary,_3:32/signed,_/binary>> = _1,
            _4 = _2 + 4
        end,
        begin
            <<_:_4/binary,_5:32/signed,_/binary>> = _1,
            _6 = _4 + 4
        end,
        {{_3, _5}, _6}
    end.

enc_remote_domain_migrate_begin3_args(_1) ->
    case _1 of
        {_6, _5, _4, _3, _2} ->
            [enc_remote_nonnull_domain(_6),
             enc_remote_string(_5),
             <<_4:64>>,
             enc_remote_string(_3),
             <<_2:64>>]
    end.

dec_remote_domain_migrate_begin3_args(_1, _2) ->
    begin
        {_3, _4} = dec_remote_nonnull_domain(_1, _2),
        {_5, _6} = dec_remote_string(_1, _4),
        begin
            <<_:_6/binary,_7:64/unsigned,_/binary>> = _1,
            _8 = _6 + 8
        end,
        {_9, _10} = dec_remote_string(_1, _8),
        begin
            <<_:_10/binary,_11:64/unsigned,_/binary>> = _1,
            _12 = _10 + 8
        end,
        {{_3, _5, _7, _9, _11}, _12}
    end.

enc_remote_domain_migrate_begin3_ret(_1) ->
    case _1 of
        {_3, _2} ->
            [begin
                 _4 = io_list_len(_3),
                 if
                     _4 =< 4194304 ->
                         [<<_4:32/unsigned>>, _3, enc_align(_4)];
                     true ->
                         exit({xdr, limit})
                 end
             end,
             enc_remote_nonnull_string(_2)]
    end.

dec_remote_domain_migrate_begin3_ret(_1, _2) ->
    begin
        {_3, _4} =
            begin
                <<_:_2/binary,_5:32/unsigned,_/binary>> = _1,
                if
                    _5 > 4194304 ->
                        exit({xdr, limit});
                    true ->
                        _6 = _2 + 4,
                        <<_:_6/binary,_7:_5/binary,_/binary>> = _1,
                        {_7, _6 + align(_5)}
                end
            end,
        {_8, _9} = dec_remote_nonnull_string(_1, _4),
        {{_3, _8}, _9}
    end.

enc_remote_domain_migrate_prepare3_args(_1) ->
    case _1 of
        {_7, _6, _5, _4, _3, _2} ->
            [begin
                 _8 = io_list_len(_7),
                 if
                     _8 =< 4194304 ->
                         [<<_8:32/unsigned>>, _7, enc_align(_8)];
                     true ->
                         exit({xdr, limit})
                 end
             end,
             enc_remote_string(_6),
             <<_5:64>>,
             enc_remote_string(_4),
             <<_3:64>>,
             enc_remote_nonnull_string(_2)]
    end.

dec_remote_domain_migrate_prepare3_args(_1, _2) ->
    begin
        {_3, _4} =
            begin
                <<_:_2/binary,_5:32/unsigned,_/binary>> = _1,
                if
                    _5 > 4194304 ->
                        exit({xdr, limit});
                    true ->
                        _6 = _2 + 4,
                        <<_:_6/binary,_7:_5/binary,_/binary>> = _1,
                        {_7, _6 + align(_5)}
                end
            end,
        {_8, _9} = dec_remote_string(_1, _4),
        begin
            <<_:_9/binary,_10:64/unsigned,_/binary>> = _1,
            _11 = _9 + 8
        end,
        {_12, _13} = dec_remote_string(_1, _11),
        begin
            <<_:_13/binary,_14:64/unsigned,_/binary>> = _1,
            _15 = _13 + 8
        end,
        {_16, _17} = dec_remote_nonnull_string(_1, _15),
        {{_3, _8, _10, _12, _14, _16}, _17}
    end.

enc_remote_domain_migrate_prepare3_ret(_1) ->
    case _1 of
        {_3, _2} ->
            [begin
                 _4 = io_list_len(_3),
                 if
                     _4 =< 4194304 ->
                         [<<_4:32/unsigned>>, _3, enc_align(_4)];
                     true ->
                         exit({xdr, limit})
                 end
             end,
             enc_remote_string(_2)]
    end.

dec_remote_domain_migrate_prepare3_ret(_1, _2) ->
    begin
        {_3, _4} =
            begin
                <<_:_2/binary,_5:32/unsigned,_/binary>> = _1,
                if
                    _5 > 4194304 ->
                        exit({xdr, limit});
                    true ->
                        _6 = _2 + 4,
                        <<_:_6/binary,_7:_5/binary,_/binary>> = _1,
                        {_7, _6 + align(_5)}
                end
            end,
        {_8, _9} = dec_remote_string(_1, _4),
        {{_3, _8}, _9}
    end.

enc_remote_domain_migrate_prepare_tunnel3_args(_1) ->
    case _1 of
        {_6, _5, _4, _3, _2} ->
            [begin
                 _7 = io_list_len(_6),
                 if
                     _7 =< 4194304 ->
                         [<<_7:32/unsigned>>, _6, enc_align(_7)];
                     true ->
                         exit({xdr, limit})
                 end
             end,
             <<_5:64>>,
             enc_remote_string(_4),
             <<_3:64>>,
             enc_remote_nonnull_string(_2)]
    end.

dec_remote_domain_migrate_prepare_tunnel3_args(_1, _2) ->
    begin
        {_3, _4} =
            begin
                <<_:_2/binary,_5:32/unsigned,_/binary>> = _1,
                if
                    _5 > 4194304 ->
                        exit({xdr, limit});
                    true ->
                        _6 = _2 + 4,
                        <<_:_6/binary,_7:_5/binary,_/binary>> = _1,
                        {_7, _6 + align(_5)}
                end
            end,
        begin
            <<_:_4/binary,_8:64/unsigned,_/binary>> = _1,
            _9 = _4 + 8
        end,
        {_10, _11} = dec_remote_string(_1, _9),
        begin
            <<_:_11/binary,_12:64/unsigned,_/binary>> = _1,
            _13 = _11 + 8
        end,
        {_14, _15} = dec_remote_nonnull_string(_1, _13),
        {{_3, _8, _10, _12, _14}, _15}
    end.

enc_remote_domain_migrate_prepare_tunnel3_ret(_1) ->
    case _1 of
        {_2} ->
            [begin
                 _3 = io_list_len(_2),
                 if
                     _3 =< 4194304 ->
                         [<<_3:32/unsigned>>, _2, enc_align(_3)];
                     true ->
                         exit({xdr, limit})
                 end
             end]
    end.

dec_remote_domain_migrate_prepare_tunnel3_ret(_1, _2) ->
    begin
        {_3, _4} =
            begin
                <<_:_2/binary,_5:32/unsigned,_/binary>> = _1,
                if
                    _5 > 4194304 ->
                        exit({xdr, limit});
                    true ->
                        _6 = _2 + 4,
                        <<_:_6/binary,_7:_5/binary,_/binary>> = _1,
                        {_7, _6 + align(_5)}
                end
            end,
        {{_3}, _4}
    end.

enc_remote_domain_migrate_perform3_args(_1) ->
    case _1 of
        {_10, _9, _7, _6, _5, _4, _3, _2} ->
            [enc_remote_nonnull_domain(_10),
             enc_remote_string(_9),
             begin
                 _8 = io_list_len(_7),
                 if
                     _8 =< 4194304 ->
                         [<<_8:32/unsigned>>, _7, enc_align(_8)];
                     true ->
                         exit({xdr, limit})
                 end
             end,
             enc_remote_string(_6),
             enc_remote_string(_5),
             <<_4:64>>,
             enc_remote_string(_3),
             <<_2:64>>]
    end.

dec_remote_domain_migrate_perform3_args(_1, _2) ->
    begin
        {_3, _4} = dec_remote_nonnull_domain(_1, _2),
        {_5, _6} = dec_remote_string(_1, _4),
        {_7, _8} =
            begin
                <<_:_6/binary,_9:32/unsigned,_/binary>> = _1,
                if
                    _9 > 4194304 ->
                        exit({xdr, limit});
                    true ->
                        _10 = _6 + 4,
                        <<_:_10/binary,_11:_9/binary,_/binary>> = _1,
                        {_11, _10 + align(_9)}
                end
            end,
        {_12, _13} = dec_remote_string(_1, _8),
        {_14, _15} = dec_remote_string(_1, _13),
        begin
            <<_:_15/binary,_16:64/unsigned,_/binary>> = _1,
            _17 = _15 + 8
        end,
        {_18, _19} = dec_remote_string(_1, _17),
        begin
            <<_:_19/binary,_20:64/unsigned,_/binary>> = _1,
            _21 = _19 + 8
        end,
        {{_3, _5, _7, _12, _14, _16, _18, _20}, _21}
    end.

enc_remote_domain_migrate_perform3_ret(_1) ->
    case _1 of
        {_2} ->
            [begin
                 _3 = io_list_len(_2),
                 if
                     _3 =< 4194304 ->
                         [<<_3:32/unsigned>>, _2, enc_align(_3)];
                     true ->
                         exit({xdr, limit})
                 end
             end]
    end.

dec_remote_domain_migrate_perform3_ret(_1, _2) ->
    begin
        {_3, _4} =
            begin
                <<_:_2/binary,_5:32/unsigned,_/binary>> = _1,
                if
                    _5 > 4194304 ->
                        exit({xdr, limit});
                    true ->
                        _6 = _2 + 4,
                        <<_:_6/binary,_7:_5/binary,_/binary>> = _1,
                        {_7, _6 + align(_5)}
                end
            end,
        {{_3}, _4}
    end.

enc_remote_domain_migrate_finish3_args(_1) ->
    case _1 of
        {_8, _6, _5, _4, _3, _2} ->
            [enc_remote_nonnull_string(_8),
             begin
                 _7 = io_list_len(_6),
                 if
                     _7 =< 4194304 ->
                         [<<_7:32/unsigned>>, _6, enc_align(_7)];
                     true ->
                         exit({xdr, limit})
                 end
             end,
             enc_remote_string(_5),
             enc_remote_string(_4),
             <<_3:64>>,
             <<_2:32>>]
    end.

dec_remote_domain_migrate_finish3_args(_1, _2) ->
    begin
        {_3, _4} = dec_remote_nonnull_string(_1, _2),
        {_5, _6} =
            begin
                <<_:_4/binary,_7:32/unsigned,_/binary>> = _1,
                if
                    _7 > 4194304 ->
                        exit({xdr, limit});
                    true ->
                        _8 = _4 + 4,
                        <<_:_8/binary,_9:_7/binary,_/binary>> = _1,
                        {_9, _8 + align(_7)}
                end
            end,
        {_10, _11} = dec_remote_string(_1, _6),
        {_12, _13} = dec_remote_string(_1, _11),
        begin
            <<_:_13/binary,_14:64/unsigned,_/binary>> = _1,
            _15 = _13 + 8
        end,
        begin
            <<_:_15/binary,_16:32/signed,_/binary>> = _1,
            _17 = _15 + 4
        end,
        {{_3, _5, _10, _12, _14, _16}, _17}
    end.

enc_remote_domain_migrate_finish3_ret(_1) ->
    case _1 of
        {_4, _2} ->
            [enc_remote_nonnull_domain(_4),
             begin
                 _3 = io_list_len(_2),
                 if
                     _3 =< 4194304 ->
                         [<<_3:32/unsigned>>, _2, enc_align(_3)];
                     true ->
                         exit({xdr, limit})
                 end
             end]
    end.

dec_remote_domain_migrate_finish3_ret(_1, _2) ->
    begin
        {_3, _4} = dec_remote_nonnull_domain(_1, _2),
        {_5, _6} =
            begin
                <<_:_4/binary,_7:32/unsigned,_/binary>> = _1,
                if
                    _7 > 4194304 ->
                        exit({xdr, limit});
                    true ->
                        _8 = _4 + 4,
                        <<_:_8/binary,_9:_7/binary,_/binary>> = _1,
                        {_9, _8 + align(_7)}
                end
            end,
        {{_3, _5}, _6}
    end.

enc_remote_domain_migrate_confirm3_args(_1) ->
    case _1 of
        {_6, _4, _3, _2} ->
            [enc_remote_nonnull_domain(_6),
             begin
                 _5 = io_list_len(_4),
                 if
                     _5 =< 4194304 ->
                         [<<_5:32/unsigned>>, _4, enc_align(_5)];
                     true ->
                         exit({xdr, limit})
                 end
             end,
             <<_3:64>>,
             <<_2:32>>]
    end.

dec_remote_domain_migrate_confirm3_args(_1, _2) ->
    begin
        {_3, _4} = dec_remote_nonnull_domain(_1, _2),
        {_5, _6} =
            begin
                <<_:_4/binary,_7:32/unsigned,_/binary>> = _1,
                if
                    _7 > 4194304 ->
                        exit({xdr, limit});
                    true ->
                        _8 = _4 + 4,
                        <<_:_8/binary,_9:_7/binary,_/binary>> = _1,
                        {_9, _8 + align(_7)}
                end
            end,
        begin
            <<_:_6/binary,_10:64/unsigned,_/binary>> = _1,
            _11 = _6 + 8
        end,
        begin
            <<_:_11/binary,_12:32/signed,_/binary>> = _1,
            _13 = _11 + 4
        end,
        {{_3, _5, _10, _12}, _13}
    end.

enc_remote_domain_event_control_error_msg(_1) ->
    case _1 of
        {_2} ->
            [enc_remote_nonnull_domain(_2)]
    end.

dec_remote_domain_event_control_error_msg(_1, _2) ->
    begin
        {_3, _4} = dec_remote_nonnull_domain(_1, _2),
        {{_3}, _4}
    end.

enc_remote_domain_event_callback_control_error_msg(_1) ->
    case _1 of
        {_3, _2} ->
            [<<_3:32>>, enc_remote_domain_event_control_error_msg(_2)]
    end.

dec_remote_domain_event_callback_control_error_msg(_1, _2) ->
    begin
        begin
            <<_:_2/binary,_3:32/signed,_/binary>> = _1,
            _4 = _2 + 4
        end,
        {_5, _6} = dec_remote_domain_event_control_error_msg(_1, _4),
        {{_3, _5}, _6}
    end.

enc_remote_domain_get_control_info_args(_1) ->
    case _1 of
        {_3, _2} ->
            [enc_remote_nonnull_domain(_3), <<_2:32>>]
    end.

dec_remote_domain_get_control_info_args(_1, _2) ->
    begin
        {_3, _4} = dec_remote_nonnull_domain(_1, _2),
        begin
            <<_:_4/binary,_5:32/unsigned,_/binary>> = _1,
            _6 = _4 + 4
        end,
        {{_3, _5}, _6}
    end.

enc_remote_domain_get_control_info_ret(_1) ->
    case _1 of
        {_4, _3, _2} ->
            [<<_4:32>>, <<_3:32>>, <<_2:64>>]
    end.

dec_remote_domain_get_control_info_ret(_1, _2) ->
    begin
        begin
            <<_:_2/binary,_3:32/unsigned,_/binary>> = _1,
            _4 = _2 + 4
        end,
        begin
            <<_:_4/binary,_5:32/unsigned,_/binary>> = _1,
            _6 = _4 + 4
        end,
        begin
            <<_:_6/binary,_7:64/unsigned,_/binary>> = _1,
            _8 = _6 + 8
        end,
        {{_3, _5, _7}, _8}
    end.

enc_remote_domain_open_graphics_args(_1) ->
    case _1 of
        {_4, _3, _2} ->
            [enc_remote_nonnull_domain(_4), <<_3:32>>, <<_2:32>>]
    end.

dec_remote_domain_open_graphics_args(_1, _2) ->
    begin
        {_3, _4} = dec_remote_nonnull_domain(_1, _2),
        begin
            <<_:_4/binary,_5:32/unsigned,_/binary>> = _1,
            _6 = _4 + 4
        end,
        begin
            <<_:_6/binary,_7:32/unsigned,_/binary>> = _1,
            _8 = _6 + 4
        end,
        {{_3, _5, _7}, _8}
    end.

enc_remote_domain_open_graphics_fd_args(_1) ->
    case _1 of
        {_4, _3, _2} ->
            [enc_remote_nonnull_domain(_4), <<_3:32>>, <<_2:32>>]
    end.

dec_remote_domain_open_graphics_fd_args(_1, _2) ->
    begin
        {_3, _4} = dec_remote_nonnull_domain(_1, _2),
        begin
            <<_:_4/binary,_5:32/unsigned,_/binary>> = _1,
            _6 = _4 + 4
        end,
        begin
            <<_:_6/binary,_7:32/unsigned,_/binary>> = _1,
            _8 = _6 + 4
        end,
        {{_3, _5, _7}, _8}
    end.

enc_remote_node_suspend_for_duration_args(_1) ->
    case _1 of
        {_4, _3, _2} ->
            [<<_4:32>>, <<_3:64>>, <<_2:32>>]
    end.

dec_remote_node_suspend_for_duration_args(_1, _2) ->
    begin
        begin
            <<_:_2/binary,_3:32/unsigned,_/binary>> = _1,
            _4 = _2 + 4
        end,
        begin
            <<_:_4/binary,_5:64/unsigned,_/binary>> = _1,
            _6 = _4 + 8
        end,
        begin
            <<_:_6/binary,_7:32/unsigned,_/binary>> = _1,
            _8 = _6 + 4
        end,
        {{_3, _5, _7}, _8}
    end.

enc_remote_domain_shutdown_flags_args(_1) ->
    case _1 of
        {_3, _2} ->
            [enc_remote_nonnull_domain(_3), <<_2:32>>]
    end.

dec_remote_domain_shutdown_flags_args(_1, _2) ->
    begin
        {_3, _4} = dec_remote_nonnull_domain(_1, _2),
        begin
            <<_:_4/binary,_5:32/unsigned,_/binary>> = _1,
            _6 = _4 + 4
        end,
        {{_3, _5}, _6}
    end.

enc_remote_domain_get_disk_errors_args(_1) ->
    case _1 of
        {_4, _3, _2} ->
            [enc_remote_nonnull_domain(_4), <<_3:32>>, <<_2:32>>]
    end.

dec_remote_domain_get_disk_errors_args(_1, _2) ->
    begin
        {_3, _4} = dec_remote_nonnull_domain(_1, _2),
        begin
            <<_:_4/binary,_5:32/unsigned,_/binary>> = _1,
            _6 = _4 + 4
        end,
        begin
            <<_:_6/binary,_7:32/unsigned,_/binary>> = _1,
            _8 = _6 + 4
        end,
        {{_3, _5, _7}, _8}
    end.

enc_remote_domain_get_disk_errors_ret(_1) ->
    case _1 of
        {_3, _2} ->
            [begin
                 _5 = length(_3),
                 if
                     _5 =< 256 ->
                         [<<_5:32/unsigned>>,
                          lists:map(fun(_4) ->
                                           enc_remote_domain_disk_error(_4)
                                    end,
                                    _3)];
                     true ->
                         exit({xdr, limit})
                 end
             end,
             <<_2:32>>]
    end.

dec_remote_domain_get_disk_errors_ret(_1, _2) ->
    begin
        {_3, _4} =
            begin
                <<_:_2/binary,_5:32/unsigned,_/binary>> = _1,
                map_elem(fun(_6, _7) ->
                                dec_remote_domain_disk_error(_6, _7)
                         end,
                         _1,
                         _2 + 4,
                         256, _5)
            end,
        begin
            <<_:_4/binary,_8:32/signed,_/binary>> = _1,
            _9 = _4 + 4
        end,
        {{_3, _8}, _9}
    end.

enc_remote_connect_list_all_domains_args(_1) ->
    case _1 of
        {_3, _2} ->
            [<<_3:32>>, <<_2:32>>]
    end.

dec_remote_connect_list_all_domains_args(_1, _2) ->
    begin
        begin
            <<_:_2/binary,_3:32/signed,_/binary>> = _1,
            _4 = _2 + 4
        end,
        begin
            <<_:_4/binary,_5:32/unsigned,_/binary>> = _1,
            _6 = _4 + 4
        end,
        {{_3, _5}, _6}
    end.

enc_remote_connect_list_all_domains_ret(_1) ->
    case _1 of
        {_3, _2} ->
            [begin
                 _5 = length(_3),
                 if
                     _5 =< 16384 ->
                         [<<_5:32/unsigned>>,
                          lists:map(fun(_4) ->
                                           enc_remote_nonnull_domain(_4)
                                    end,
                                    _3)];
                     true ->
                         exit({xdr, limit})
                 end
             end,
             <<_2:32>>]
    end.

dec_remote_connect_list_all_domains_ret(_1, _2) ->
    begin
        {_3, _4} =
            begin
                <<_:_2/binary,_5:32/unsigned,_/binary>> = _1,
                map_elem(fun(_6, _7) ->
                                dec_remote_nonnull_domain(_6, _7)
                         end,
                         _1,
                         _2 + 4,
                         16384, _5)
            end,
        begin
            <<_:_4/binary,_8:32/unsigned,_/binary>> = _1,
            _9 = _4 + 4
        end,
        {{_3, _8}, _9}
    end.

enc_remote_connect_list_all_storage_pools_args(_1) ->
    case _1 of
        {_3, _2} ->
            [<<_3:32>>, <<_2:32>>]
    end.

dec_remote_connect_list_all_storage_pools_args(_1, _2) ->
    begin
        begin
            <<_:_2/binary,_3:32/signed,_/binary>> = _1,
            _4 = _2 + 4
        end,
        begin
            <<_:_4/binary,_5:32/unsigned,_/binary>> = _1,
            _6 = _4 + 4
        end,
        {{_3, _5}, _6}
    end.

enc_remote_connect_list_all_storage_pools_ret(_1) ->
    case _1 of
        {_3, _2} ->
            [begin
                 _5 = length(_3),
                 if
                     _5 =< 16384 ->
                         [<<_5:32/unsigned>>,
                          lists:map(fun(_4) ->
                                           enc_remote_nonnull_storage_pool(_4)
                                    end,
                                    _3)];
                     true ->
                         exit({xdr, limit})
                 end
             end,
             <<_2:32>>]
    end.

dec_remote_connect_list_all_storage_pools_ret(_1, _2) ->
    begin
        {_3, _4} =
            begin
                <<_:_2/binary,_5:32/unsigned,_/binary>> = _1,
                map_elem(fun(_6, _7) ->
                                dec_remote_nonnull_storage_pool(_6, _7)
                         end,
                         _1,
                         _2 + 4,
                         16384, _5)
            end,
        begin
            <<_:_4/binary,_8:32/unsigned,_/binary>> = _1,
            _9 = _4 + 4
        end,
        {{_3, _8}, _9}
    end.

enc_remote_storage_pool_list_all_volumes_args(_1) ->
    case _1 of
        {_4, _3, _2} ->
            [enc_remote_nonnull_storage_pool(_4), <<_3:32>>, <<_2:32>>]
    end.

dec_remote_storage_pool_list_all_volumes_args(_1, _2) ->
    begin
        {_3, _4} = dec_remote_nonnull_storage_pool(_1, _2),
        begin
            <<_:_4/binary,_5:32/signed,_/binary>> = _1,
            _6 = _4 + 4
        end,
        begin
            <<_:_6/binary,_7:32/unsigned,_/binary>> = _1,
            _8 = _6 + 4
        end,
        {{_3, _5, _7}, _8}
    end.

enc_remote_storage_pool_list_all_volumes_ret(_1) ->
    case _1 of
        {_3, _2} ->
            [begin
                 _5 = length(_3),
                 if
                     _5 =< 16384 ->
                         [<<_5:32/unsigned>>,
                          lists:map(fun(_4) ->
                                           enc_remote_nonnull_storage_vol(_4)
                                    end,
                                    _3)];
                     true ->
                         exit({xdr, limit})
                 end
             end,
             <<_2:32>>]
    end.

dec_remote_storage_pool_list_all_volumes_ret(_1, _2) ->
    begin
        {_3, _4} =
            begin
                <<_:_2/binary,_5:32/unsigned,_/binary>> = _1,
                map_elem(fun(_6, _7) ->
                                dec_remote_nonnull_storage_vol(_6, _7)
                         end,
                         _1,
                         _2 + 4,
                         16384, _5)
            end,
        begin
            <<_:_4/binary,_8:32/unsigned,_/binary>> = _1,
            _9 = _4 + 4
        end,
        {{_3, _8}, _9}
    end.

enc_remote_connect_list_all_networks_args(_1) ->
    case _1 of
        {_3, _2} ->
            [<<_3:32>>, <<_2:32>>]
    end.

dec_remote_connect_list_all_networks_args(_1, _2) ->
    begin
        begin
            <<_:_2/binary,_3:32/signed,_/binary>> = _1,
            _4 = _2 + 4
        end,
        begin
            <<_:_4/binary,_5:32/unsigned,_/binary>> = _1,
            _6 = _4 + 4
        end,
        {{_3, _5}, _6}
    end.

enc_remote_connect_list_all_networks_ret(_1) ->
    case _1 of
        {_3, _2} ->
            [begin
                 _5 = length(_3),
                 if
                     _5 =< 16384 ->
                         [<<_5:32/unsigned>>,
                          lists:map(fun(_4) ->
                                           enc_remote_nonnull_network(_4)
                                    end,
                                    _3)];
                     true ->
                         exit({xdr, limit})
                 end
             end,
             <<_2:32>>]
    end.

dec_remote_connect_list_all_networks_ret(_1, _2) ->
    begin
        {_3, _4} =
            begin
                <<_:_2/binary,_5:32/unsigned,_/binary>> = _1,
                map_elem(fun(_6, _7) ->
                                dec_remote_nonnull_network(_6, _7)
                         end,
                         _1,
                         _2 + 4,
                         16384, _5)
            end,
        begin
            <<_:_4/binary,_8:32/unsigned,_/binary>> = _1,
            _9 = _4 + 4
        end,
        {{_3, _8}, _9}
    end.

enc_remote_connect_list_all_interfaces_args(_1) ->
    case _1 of
        {_3, _2} ->
            [<<_3:32>>, <<_2:32>>]
    end.

dec_remote_connect_list_all_interfaces_args(_1, _2) ->
    begin
        begin
            <<_:_2/binary,_3:32/signed,_/binary>> = _1,
            _4 = _2 + 4
        end,
        begin
            <<_:_4/binary,_5:32/unsigned,_/binary>> = _1,
            _6 = _4 + 4
        end,
        {{_3, _5}, _6}
    end.

enc_remote_connect_list_all_interfaces_ret(_1) ->
    case _1 of
        {_3, _2} ->
            [begin
                 _5 = length(_3),
                 if
                     _5 =< 16384 ->
                         [<<_5:32/unsigned>>,
                          lists:map(fun(_4) ->
                                           enc_remote_nonnull_interface(_4)
                                    end,
                                    _3)];
                     true ->
                         exit({xdr, limit})
                 end
             end,
             <<_2:32>>]
    end.

dec_remote_connect_list_all_interfaces_ret(_1, _2) ->
    begin
        {_3, _4} =
            begin
                <<_:_2/binary,_5:32/unsigned,_/binary>> = _1,
                map_elem(fun(_6, _7) ->
                                dec_remote_nonnull_interface(_6, _7)
                         end,
                         _1,
                         _2 + 4,
                         16384, _5)
            end,
        begin
            <<_:_4/binary,_8:32/unsigned,_/binary>> = _1,
            _9 = _4 + 4
        end,
        {{_3, _8}, _9}
    end.

enc_remote_connect_list_all_node_devices_args(_1) ->
    case _1 of
        {_3, _2} ->
            [<<_3:32>>, <<_2:32>>]
    end.

dec_remote_connect_list_all_node_devices_args(_1, _2) ->
    begin
        begin
            <<_:_2/binary,_3:32/signed,_/binary>> = _1,
            _4 = _2 + 4
        end,
        begin
            <<_:_4/binary,_5:32/unsigned,_/binary>> = _1,
            _6 = _4 + 4
        end,
        {{_3, _5}, _6}
    end.

enc_remote_connect_list_all_node_devices_ret(_1) ->
    case _1 of
        {_3, _2} ->
            [begin
                 _5 = length(_3),
                 if
                     _5 =< 65536 ->
                         [<<_5:32/unsigned>>,
                          lists:map(fun(_4) ->
                                           enc_remote_nonnull_node_device(_4)
                                    end,
                                    _3)];
                     true ->
                         exit({xdr, limit})
                 end
             end,
             <<_2:32>>]
    end.

dec_remote_connect_list_all_node_devices_ret(_1, _2) ->
    begin
        {_3, _4} =
            begin
                <<_:_2/binary,_5:32/unsigned,_/binary>> = _1,
                map_elem(fun(_6, _7) ->
                                dec_remote_nonnull_node_device(_6, _7)
                         end,
                         _1,
                         _2 + 4,
                         65536, _5)
            end,
        begin
            <<_:_4/binary,_8:32/unsigned,_/binary>> = _1,
            _9 = _4 + 4
        end,
        {{_3, _8}, _9}
    end.

enc_remote_connect_list_all_nwfilters_args(_1) ->
    case _1 of
        {_3, _2} ->
            [<<_3:32>>, <<_2:32>>]
    end.

dec_remote_connect_list_all_nwfilters_args(_1, _2) ->
    begin
        begin
            <<_:_2/binary,_3:32/signed,_/binary>> = _1,
            _4 = _2 + 4
        end,
        begin
            <<_:_4/binary,_5:32/unsigned,_/binary>> = _1,
            _6 = _4 + 4
        end,
        {{_3, _5}, _6}
    end.

enc_remote_connect_list_all_nwfilters_ret(_1) ->
    case _1 of
        {_3, _2} ->
            [begin
                 _5 = length(_3),
                 if
                     _5 =< 16384 ->
                         [<<_5:32/unsigned>>,
                          lists:map(fun(_4) ->
                                           enc_remote_nonnull_nwfilter(_4)
                                    end,
                                    _3)];
                     true ->
                         exit({xdr, limit})
                 end
             end,
             <<_2:32>>]
    end.

dec_remote_connect_list_all_nwfilters_ret(_1, _2) ->
    begin
        {_3, _4} =
            begin
                <<_:_2/binary,_5:32/unsigned,_/binary>> = _1,
                map_elem(fun(_6, _7) ->
                                dec_remote_nonnull_nwfilter(_6, _7)
                         end,
                         _1,
                         _2 + 4,
                         16384, _5)
            end,
        begin
            <<_:_4/binary,_8:32/unsigned,_/binary>> = _1,
            _9 = _4 + 4
        end,
        {{_3, _8}, _9}
    end.

enc_remote_connect_list_all_secrets_args(_1) ->
    case _1 of
        {_3, _2} ->
            [<<_3:32>>, <<_2:32>>]
    end.

dec_remote_connect_list_all_secrets_args(_1, _2) ->
    begin
        begin
            <<_:_2/binary,_3:32/signed,_/binary>> = _1,
            _4 = _2 + 4
        end,
        begin
            <<_:_4/binary,_5:32/unsigned,_/binary>> = _1,
            _6 = _4 + 4
        end,
        {{_3, _5}, _6}
    end.

enc_remote_connect_list_all_secrets_ret(_1) ->
    case _1 of
        {_3, _2} ->
            [begin
                 _5 = length(_3),
                 if
                     _5 =< 16384 ->
                         [<<_5:32/unsigned>>,
                          lists:map(fun(_4) ->
                                           enc_remote_nonnull_secret(_4)
                                    end,
                                    _3)];
                     true ->
                         exit({xdr, limit})
                 end
             end,
             <<_2:32>>]
    end.

dec_remote_connect_list_all_secrets_ret(_1, _2) ->
    begin
        {_3, _4} =
            begin
                <<_:_2/binary,_5:32/unsigned,_/binary>> = _1,
                map_elem(fun(_6, _7) ->
                                dec_remote_nonnull_secret(_6, _7)
                         end,
                         _1,
                         _2 + 4,
                         16384, _5)
            end,
        begin
            <<_:_4/binary,_8:32/unsigned,_/binary>> = _1,
            _9 = _4 + 4
        end,
        {{_3, _8}, _9}
    end.

enc_remote_node_set_memory_parameters_args(_1) ->
    case _1 of
        {_3, _2} ->
            [begin
                 _5 = length(_3),
                 if
                     _5 =< 64 ->
                         [<<_5:32/unsigned>>,
                          lists:map(fun(_4) ->
                                           enc_remote_typed_param(_4)
                                    end,
                                    _3)];
                     true ->
                         exit({xdr, limit})
                 end
             end,
             <<_2:32>>]
    end.

dec_remote_node_set_memory_parameters_args(_1, _2) ->
    begin
        {_3, _4} =
            begin
                <<_:_2/binary,_5:32/unsigned,_/binary>> = _1,
                map_elem(fun(_6, _7) ->
                                dec_remote_typed_param(_6, _7)
                         end,
                         _1,
                         _2 + 4,
                         64, _5)
            end,
        begin
            <<_:_4/binary,_8:32/unsigned,_/binary>> = _1,
            _9 = _4 + 4
        end,
        {{_3, _8}, _9}
    end.

enc_remote_node_get_memory_parameters_args(_1) ->
    case _1 of
        {_3, _2} ->
            [<<_3:32>>, <<_2:32>>]
    end.

dec_remote_node_get_memory_parameters_args(_1, _2) ->
    begin
        begin
            <<_:_2/binary,_3:32/signed,_/binary>> = _1,
            _4 = _2 + 4
        end,
        begin
            <<_:_4/binary,_5:32/unsigned,_/binary>> = _1,
            _6 = _4 + 4
        end,
        {{_3, _5}, _6}
    end.

enc_remote_node_get_memory_parameters_ret(_1) ->
    case _1 of
        {_3, _2} ->
            [begin
                 _5 = length(_3),
                 if
                     _5 =< 64 ->
                         [<<_5:32/unsigned>>,
                          lists:map(fun(_4) ->
                                           enc_remote_typed_param(_4)
                                    end,
                                    _3)];
                     true ->
                         exit({xdr, limit})
                 end
             end,
             <<_2:32>>]
    end.

dec_remote_node_get_memory_parameters_ret(_1, _2) ->
    begin
        {_3, _4} =
            begin
                <<_:_2/binary,_5:32/unsigned,_/binary>> = _1,
                map_elem(fun(_6, _7) ->
                                dec_remote_typed_param(_6, _7)
                         end,
                         _1,
                         _2 + 4,
                         64, _5)
            end,
        begin
            <<_:_4/binary,_8:32/signed,_/binary>> = _1,
            _9 = _4 + 4
        end,
        {{_3, _8}, _9}
    end.

enc_remote_node_get_cpu_map_args(_1) ->
    case _1 of
        {_4, _3, _2} ->
            [<<_4:32>>, <<_3:32>>, <<_2:32>>]
    end.

dec_remote_node_get_cpu_map_args(_1, _2) ->
    begin
        begin
            <<_:_2/binary,_3:32/signed,_/binary>> = _1,
            _4 = _2 + 4
        end,
        begin
            <<_:_4/binary,_5:32/signed,_/binary>> = _1,
            _6 = _4 + 4
        end,
        begin
            <<_:_6/binary,_7:32/unsigned,_/binary>> = _1,
            _8 = _6 + 4
        end,
        {{_3, _5, _7}, _8}
    end.

enc_remote_node_get_cpu_map_ret(_1) ->
    case _1 of
        {_4, _3, _2} ->
            [begin
                 _5 = io_list_len(_4),
                 if
                     _5 =< 2048 ->
                         [<<_5:32/unsigned>>, _4, enc_align(_5)];
                     true ->
                         exit({xdr, limit})
                 end
             end,
             <<_3:32>>,
             <<_2:32>>]
    end.

dec_remote_node_get_cpu_map_ret(_1, _2) ->
    begin
        {_3, _4} =
            begin
                <<_:_2/binary,_5:32/unsigned,_/binary>> = _1,
                if
                    _5 > 2048 ->
                        exit({xdr, limit});
                    true ->
                        _6 = _2 + 4,
                        <<_:_6/binary,_7:_5/binary,_/binary>> = _1,
                        {_7, _6 + align(_5)}
                end
            end,
        begin
            <<_:_4/binary,_8:32/unsigned,_/binary>> = _1,
            _9 = _4 + 4
        end,
        begin
            <<_:_9/binary,_10:32/signed,_/binary>> = _1,
            _11 = _9 + 4
        end,
        {{_3, _8, _10}, _11}
    end.

enc_remote_domain_fstrim_args(_1) ->
    case _1 of
        {_5, _4, _3, _2} ->
            [enc_remote_nonnull_domain(_5),
             enc_remote_string(_4),
             <<_3:64>>,
             <<_2:32>>]
    end.

dec_remote_domain_fstrim_args(_1, _2) ->
    begin
        {_3, _4} = dec_remote_nonnull_domain(_1, _2),
        {_5, _6} = dec_remote_string(_1, _4),
        begin
            <<_:_6/binary,_7:64/unsigned,_/binary>> = _1,
            _8 = _6 + 8
        end,
        begin
            <<_:_8/binary,_9:32/unsigned,_/binary>> = _1,
            _10 = _8 + 4
        end,
        {{_3, _5, _7, _9}, _10}
    end.

enc_remote_domain_get_time_args(_1) ->
    case _1 of
        {_3, _2} ->
            [enc_remote_nonnull_domain(_3), <<_2:32>>]
    end.

dec_remote_domain_get_time_args(_1, _2) ->
    begin
        {_3, _4} = dec_remote_nonnull_domain(_1, _2),
        begin
            <<_:_4/binary,_5:32/unsigned,_/binary>> = _1,
            _6 = _4 + 4
        end,
        {{_3, _5}, _6}
    end.

enc_remote_domain_get_time_ret(_1) ->
    case _1 of
        {_3, _2} ->
            [<<_3:64>>, <<_2:32>>]
    end.

dec_remote_domain_get_time_ret(_1, _2) ->
    begin
        begin
            <<_:_2/binary,_3:64/signed,_/binary>> = _1,
            _4 = _2 + 8
        end,
        begin
            <<_:_4/binary,_5:32/unsigned,_/binary>> = _1,
            _6 = _4 + 4
        end,
        {{_3, _5}, _6}
    end.

enc_remote_domain_set_time_args(_1) ->
    case _1 of
        {_5, _4, _3, _2} ->
            [enc_remote_nonnull_domain(_5),
             <<_4:64>>,
             <<_3:32>>,
             <<_2:32>>]
    end.

dec_remote_domain_set_time_args(_1, _2) ->
    begin
        {_3, _4} = dec_remote_nonnull_domain(_1, _2),
        begin
            <<_:_4/binary,_5:64/signed,_/binary>> = _1,
            _6 = _4 + 8
        end,
        begin
            <<_:_6/binary,_7:32/unsigned,_/binary>> = _1,
            _8 = _6 + 4
        end,
        begin
            <<_:_8/binary,_9:32/unsigned,_/binary>> = _1,
            _10 = _8 + 4
        end,
        {{_3, _5, _7, _9}, _10}
    end.

enc_remote_domain_migrate_begin3_params_args(_1) ->
    case _1 of
        {_6, _3, _2} ->
            [enc_remote_nonnull_domain(_6),
             begin
                 _5 = length(_3),
                 if
                     _5 =< 64 ->
                         [<<_5:32/unsigned>>,
                          lists:map(fun(_4) ->
                                           enc_remote_typed_param(_4)
                                    end,
                                    _3)];
                     true ->
                         exit({xdr, limit})
                 end
             end,
             <<_2:32>>]
    end.

dec_remote_domain_migrate_begin3_params_args(_1, _2) ->
    begin
        {_3, _4} = dec_remote_nonnull_domain(_1, _2),
        {_5, _6} =
            begin
                <<_:_4/binary,_7:32/unsigned,_/binary>> = _1,
                map_elem(fun(_8, _9) ->
                                dec_remote_typed_param(_8, _9)
                         end,
                         _1,
                         _4 + 4,
                         64, _7)
            end,
        begin
            <<_:_6/binary,_10:32/unsigned,_/binary>> = _1,
            _11 = _6 + 4
        end,
        {{_3, _5, _10}, _11}
    end.

enc_remote_domain_migrate_begin3_params_ret(_1) ->
    case _1 of
        {_3, _2} ->
            [begin
                 _4 = io_list_len(_3),
                 if
                     _4 =< 4194304 ->
                         [<<_4:32/unsigned>>, _3, enc_align(_4)];
                     true ->
                         exit({xdr, limit})
                 end
             end,
             enc_remote_nonnull_string(_2)]
    end.

dec_remote_domain_migrate_begin3_params_ret(_1, _2) ->
    begin
        {_3, _4} =
            begin
                <<_:_2/binary,_5:32/unsigned,_/binary>> = _1,
                if
                    _5 > 4194304 ->
                        exit({xdr, limit});
                    true ->
                        _6 = _2 + 4,
                        <<_:_6/binary,_7:_5/binary,_/binary>> = _1,
                        {_7, _6 + align(_5)}
                end
            end,
        {_8, _9} = dec_remote_nonnull_string(_1, _4),
        {{_3, _8}, _9}
    end.

enc_remote_domain_migrate_prepare3_params_args(_1) ->
    case _1 of
        {_5, _3, _2} ->
            [begin
                 _7 = length(_5),
                 if
                     _7 =< 64 ->
                         [<<_7:32/unsigned>>,
                          lists:map(fun(_6) ->
                                           enc_remote_typed_param(_6)
                                    end,
                                    _5)];
                     true ->
                         exit({xdr, limit})
                 end
             end,
             begin
                 _4 = io_list_len(_3),
                 if
                     _4 =< 4194304 ->
                         [<<_4:32/unsigned>>, _3, enc_align(_4)];
                     true ->
                         exit({xdr, limit})
                 end
             end,
             <<_2:32>>]
    end.

dec_remote_domain_migrate_prepare3_params_args(_1, _2) ->
    begin
        {_3, _4} =
            begin
                <<_:_2/binary,_5:32/unsigned,_/binary>> = _1,
                map_elem(fun(_6, _7) ->
                                dec_remote_typed_param(_6, _7)
                         end,
                         _1,
                         _2 + 4,
                         64, _5)
            end,
        {_8, _9} =
            begin
                <<_:_4/binary,_10:32/unsigned,_/binary>> = _1,
                if
                    _10 > 4194304 ->
                        exit({xdr, limit});
                    true ->
                        _11 = _4 + 4,
                        <<_:_11/binary,_12:_10/binary,_/binary>> = _1,
                        {_12, _11 + align(_10)}
                end
            end,
        begin
            <<_:_9/binary,_13:32/unsigned,_/binary>> = _1,
            _14 = _9 + 4
        end,
        {{_3, _8, _13}, _14}
    end.

enc_remote_domain_migrate_prepare3_params_ret(_1) ->
    case _1 of
        {_3, _2} ->
            [begin
                 _4 = io_list_len(_3),
                 if
                     _4 =< 4194304 ->
                         [<<_4:32/unsigned>>, _3, enc_align(_4)];
                     true ->
                         exit({xdr, limit})
                 end
             end,
             enc_remote_string(_2)]
    end.

dec_remote_domain_migrate_prepare3_params_ret(_1, _2) ->
    begin
        {_3, _4} =
            begin
                <<_:_2/binary,_5:32/unsigned,_/binary>> = _1,
                if
                    _5 > 4194304 ->
                        exit({xdr, limit});
                    true ->
                        _6 = _2 + 4,
                        <<_:_6/binary,_7:_5/binary,_/binary>> = _1,
                        {_7, _6 + align(_5)}
                end
            end,
        {_8, _9} = dec_remote_string(_1, _4),
        {{_3, _8}, _9}
    end.

enc_remote_domain_migrate_prepare_tunnel3_params_args(_1) ->
    case _1 of
        {_5, _3, _2} ->
            [begin
                 _7 = length(_5),
                 if
                     _7 =< 64 ->
                         [<<_7:32/unsigned>>,
                          lists:map(fun(_6) ->
                                           enc_remote_typed_param(_6)
                                    end,
                                    _5)];
                     true ->
                         exit({xdr, limit})
                 end
             end,
             begin
                 _4 = io_list_len(_3),
                 if
                     _4 =< 4194304 ->
                         [<<_4:32/unsigned>>, _3, enc_align(_4)];
                     true ->
                         exit({xdr, limit})
                 end
             end,
             <<_2:32>>]
    end.

dec_remote_domain_migrate_prepare_tunnel3_params_args(_1, _2) ->
    begin
        {_3, _4} =
            begin
                <<_:_2/binary,_5:32/unsigned,_/binary>> = _1,
                map_elem(fun(_6, _7) ->
                                dec_remote_typed_param(_6, _7)
                         end,
                         _1,
                         _2 + 4,
                         64, _5)
            end,
        {_8, _9} =
            begin
                <<_:_4/binary,_10:32/unsigned,_/binary>> = _1,
                if
                    _10 > 4194304 ->
                        exit({xdr, limit});
                    true ->
                        _11 = _4 + 4,
                        <<_:_11/binary,_12:_10/binary,_/binary>> = _1,
                        {_12, _11 + align(_10)}
                end
            end,
        begin
            <<_:_9/binary,_13:32/unsigned,_/binary>> = _1,
            _14 = _9 + 4
        end,
        {{_3, _8, _13}, _14}
    end.

enc_remote_domain_migrate_prepare_tunnel3_params_ret(_1) ->
    case _1 of
        {_2} ->
            [begin
                 _3 = io_list_len(_2),
                 if
                     _3 =< 4194304 ->
                         [<<_3:32/unsigned>>, _2, enc_align(_3)];
                     true ->
                         exit({xdr, limit})
                 end
             end]
    end.

dec_remote_domain_migrate_prepare_tunnel3_params_ret(_1, _2) ->
    begin
        {_3, _4} =
            begin
                <<_:_2/binary,_5:32/unsigned,_/binary>> = _1,
                if
                    _5 > 4194304 ->
                        exit({xdr, limit});
                    true ->
                        _6 = _2 + 4,
                        <<_:_6/binary,_7:_5/binary,_/binary>> = _1,
                        {_7, _6 + align(_5)}
                end
            end,
        {{_3}, _4}
    end.

enc_remote_domain_migrate_perform3_params_args(_1) ->
    case _1 of
        {_9, _8, _5, _3, _2} ->
            [enc_remote_nonnull_domain(_9),
             enc_remote_string(_8),
             begin
                 _7 = length(_5),
                 if
                     _7 =< 64 ->
                         [<<_7:32/unsigned>>,
                          lists:map(fun(_6) ->
                                           enc_remote_typed_param(_6)
                                    end,
                                    _5)];
                     true ->
                         exit({xdr, limit})
                 end
             end,
             begin
                 _4 = io_list_len(_3),
                 if
                     _4 =< 4194304 ->
                         [<<_4:32/unsigned>>, _3, enc_align(_4)];
                     true ->
                         exit({xdr, limit})
                 end
             end,
             <<_2:32>>]
    end.

dec_remote_domain_migrate_perform3_params_args(_1, _2) ->
    begin
        {_3, _4} = dec_remote_nonnull_domain(_1, _2),
        {_5, _6} = dec_remote_string(_1, _4),
        {_7, _8} =
            begin
                <<_:_6/binary,_9:32/unsigned,_/binary>> = _1,
                map_elem(fun(_10, _11) ->
                                dec_remote_typed_param(_10, _11)
                         end,
                         _1,
                         _6 + 4,
                         64, _9)
            end,
        {_12, _13} =
            begin
                <<_:_8/binary,_14:32/unsigned,_/binary>> = _1,
                if
                    _14 > 4194304 ->
                        exit({xdr, limit});
                    true ->
                        _15 = _8 + 4,
                        <<_:_15/binary,_16:_14/binary,_/binary>> = _1,
                        {_16, _15 + align(_14)}
                end
            end,
        begin
            <<_:_13/binary,_17:32/unsigned,_/binary>> = _1,
            _18 = _13 + 4
        end,
        {{_3, _5, _7, _12, _17}, _18}
    end.

enc_remote_domain_migrate_perform3_params_ret(_1) ->
    case _1 of
        {_2} ->
            [begin
                 _3 = io_list_len(_2),
                 if
                     _3 =< 4194304 ->
                         [<<_3:32/unsigned>>, _2, enc_align(_3)];
                     true ->
                         exit({xdr, limit})
                 end
             end]
    end.

dec_remote_domain_migrate_perform3_params_ret(_1, _2) ->
    begin
        {_3, _4} =
            begin
                <<_:_2/binary,_5:32/unsigned,_/binary>> = _1,
                if
                    _5 > 4194304 ->
                        exit({xdr, limit});
                    true ->
                        _6 = _2 + 4,
                        <<_:_6/binary,_7:_5/binary,_/binary>> = _1,
                        {_7, _6 + align(_5)}
                end
            end,
        {{_3}, _4}
    end.

enc_remote_domain_migrate_finish3_params_args(_1) ->
    case _1 of
        {_6, _4, _3, _2} ->
            [begin
                 _8 = length(_6),
                 if
                     _8 =< 64 ->
                         [<<_8:32/unsigned>>,
                          lists:map(fun(_7) ->
                                           enc_remote_typed_param(_7)
                                    end,
                                    _6)];
                     true ->
                         exit({xdr, limit})
                 end
             end,
             begin
                 _5 = io_list_len(_4),
                 if
                     _5 =< 4194304 ->
                         [<<_5:32/unsigned>>, _4, enc_align(_5)];
                     true ->
                         exit({xdr, limit})
                 end
             end,
             <<_3:32>>,
             <<_2:32>>]
    end.

dec_remote_domain_migrate_finish3_params_args(_1, _2) ->
    begin
        {_3, _4} =
            begin
                <<_:_2/binary,_5:32/unsigned,_/binary>> = _1,
                map_elem(fun(_6, _7) ->
                                dec_remote_typed_param(_6, _7)
                         end,
                         _1,
                         _2 + 4,
                         64, _5)
            end,
        {_8, _9} =
            begin
                <<_:_4/binary,_10:32/unsigned,_/binary>> = _1,
                if
                    _10 > 4194304 ->
                        exit({xdr, limit});
                    true ->
                        _11 = _4 + 4,
                        <<_:_11/binary,_12:_10/binary,_/binary>> = _1,
                        {_12, _11 + align(_10)}
                end
            end,
        begin
            <<_:_9/binary,_13:32/unsigned,_/binary>> = _1,
            _14 = _9 + 4
        end,
        begin
            <<_:_14/binary,_15:32/signed,_/binary>> = _1,
            _16 = _14 + 4
        end,
        {{_3, _8, _13, _15}, _16}
    end.

enc_remote_domain_migrate_finish3_params_ret(_1) ->
    case _1 of
        {_4, _2} ->
            [enc_remote_nonnull_domain(_4),
             begin
                 _3 = io_list_len(_2),
                 if
                     _3 =< 4194304 ->
                         [<<_3:32/unsigned>>, _2, enc_align(_3)];
                     true ->
                         exit({xdr, limit})
                 end
             end]
    end.

dec_remote_domain_migrate_finish3_params_ret(_1, _2) ->
    begin
        {_3, _4} = dec_remote_nonnull_domain(_1, _2),
        {_5, _6} =
            begin
                <<_:_4/binary,_7:32/unsigned,_/binary>> = _1,
                if
                    _7 > 4194304 ->
                        exit({xdr, limit});
                    true ->
                        _8 = _4 + 4,
                        <<_:_8/binary,_9:_7/binary,_/binary>> = _1,
                        {_9, _8 + align(_7)}
                end
            end,
        {{_3, _5}, _6}
    end.

enc_remote_domain_migrate_confirm3_params_args(_1) ->
    case _1 of
        {_9, _6, _4, _3, _2} ->
            [enc_remote_nonnull_domain(_9),
             begin
                 _8 = length(_6),
                 if
                     _8 =< 64 ->
                         [<<_8:32/unsigned>>,
                          lists:map(fun(_7) ->
                                           enc_remote_typed_param(_7)
                                    end,
                                    _6)];
                     true ->
                         exit({xdr, limit})
                 end
             end,
             begin
                 _5 = io_list_len(_4),
                 if
                     _5 =< 4194304 ->
                         [<<_5:32/unsigned>>, _4, enc_align(_5)];
                     true ->
                         exit({xdr, limit})
                 end
             end,
             <<_3:32>>,
             <<_2:32>>]
    end.

dec_remote_domain_migrate_confirm3_params_args(_1, _2) ->
    begin
        {_3, _4} = dec_remote_nonnull_domain(_1, _2),
        {_5, _6} =
            begin
                <<_:_4/binary,_7:32/unsigned,_/binary>> = _1,
                map_elem(fun(_8, _9) ->
                                dec_remote_typed_param(_8, _9)
                         end,
                         _1,
                         _4 + 4,
                         64, _7)
            end,
        {_10, _11} =
            begin
                <<_:_6/binary,_12:32/unsigned,_/binary>> = _1,
                if
                    _12 > 4194304 ->
                        exit({xdr, limit});
                    true ->
                        _13 = _6 + 4,
                        <<_:_13/binary,_14:_12/binary,_/binary>> = _1,
                        {_14, _13 + align(_12)}
                end
            end,
        begin
            <<_:_11/binary,_15:32/unsigned,_/binary>> = _1,
            _16 = _11 + 4
        end,
        begin
            <<_:_16/binary,_17:32/signed,_/binary>> = _1,
            _18 = _16 + 4
        end,
        {{_3, _5, _10, _15, _17}, _18}
    end.

enc_remote_domain_event_device_removed_msg(_1) ->
    case _1 of
        {_3, _2} ->
            [enc_remote_nonnull_domain(_3),
             enc_remote_nonnull_string(_2)]
    end.

dec_remote_domain_event_device_removed_msg(_1, _2) ->
    begin
        {_3, _4} = dec_remote_nonnull_domain(_1, _2),
        {_5, _6} = dec_remote_nonnull_string(_1, _4),
        {{_3, _5}, _6}
    end.

enc_remote_domain_event_callback_device_removed_msg(_1) ->
    case _1 of
        {_3, _2} ->
            [<<_3:32>>, enc_remote_domain_event_device_removed_msg(_2)]
    end.

dec_remote_domain_event_callback_device_removed_msg(_1, _2) ->
    begin
        begin
            <<_:_2/binary,_3:32/signed,_/binary>> = _1,
            _4 = _2 + 4
        end,
        {_5, _6} = dec_remote_domain_event_device_removed_msg(_1, _4),
        {{_3, _5}, _6}
    end.

enc_remote_domain_event_block_job_2_msg(_1) ->
    case _1 of
        {_6, _5, _4, _3, _2} ->
            [<<_6:32>>,
             enc_remote_nonnull_domain(_5),
             enc_remote_nonnull_string(_4),
             <<_3:32>>,
             <<_2:32>>]
    end.

dec_remote_domain_event_block_job_2_msg(_1, _2) ->
    begin
        begin
            <<_:_2/binary,_3:32/signed,_/binary>> = _1,
            _4 = _2 + 4
        end,
        {_5, _6} = dec_remote_nonnull_domain(_1, _4),
        {_7, _8} = dec_remote_nonnull_string(_1, _6),
        begin
            <<_:_8/binary,_9:32/signed,_/binary>> = _1,
            _10 = _8 + 4
        end,
        begin
            <<_:_10/binary,_11:32/signed,_/binary>> = _1,
            _12 = _10 + 4
        end,
        {{_3, _5, _7, _9, _11}, _12}
    end.

enc_remote_domain_event_block_threshold_msg(_1) ->
    case _1 of
        {_7, _6, _5, _4, _3, _2} ->
            [<<_7:32>>,
             enc_remote_nonnull_domain(_6),
             enc_remote_nonnull_string(_5),
             enc_remote_string(_4),
             <<_3:64>>,
             <<_2:64>>]
    end.

dec_remote_domain_event_block_threshold_msg(_1, _2) ->
    begin
        begin
            <<_:_2/binary,_3:32/signed,_/binary>> = _1,
            _4 = _2 + 4
        end,
        {_5, _6} = dec_remote_nonnull_domain(_1, _4),
        {_7, _8} = dec_remote_nonnull_string(_1, _6),
        {_9, _10} = dec_remote_string(_1, _8),
        begin
            <<_:_10/binary,_11:64/unsigned,_/binary>> = _1,
            _12 = _10 + 8
        end,
        begin
            <<_:_12/binary,_13:64/unsigned,_/binary>> = _1,
            _14 = _12 + 8
        end,
        {{_3, _5, _7, _9, _11, _13}, _14}
    end.

enc_remote_domain_event_callback_tunable_msg(_1) ->
    case _1 of
        {_6, _5, _2} ->
            [<<_6:32>>,
             enc_remote_nonnull_domain(_5),
             begin
                 _4 = length(_2),
                 if
                     _4 =< 2048 ->
                         [<<_4:32/unsigned>>,
                          lists:map(fun(_3) ->
                                           enc_remote_typed_param(_3)
                                    end,
                                    _2)];
                     true ->
                         exit({xdr, limit})
                 end
             end]
    end.

dec_remote_domain_event_callback_tunable_msg(_1, _2) ->
    begin
        begin
            <<_:_2/binary,_3:32/signed,_/binary>> = _1,
            _4 = _2 + 4
        end,
        {_5, _6} = dec_remote_nonnull_domain(_1, _4),
        {_7, _8} =
            begin
                <<_:_6/binary,_9:32/unsigned,_/binary>> = _1,
                map_elem(fun(_10, _11) ->
                                dec_remote_typed_param(_10, _11)
                         end,
                         _1,
                         _6 + 4,
                         2048, _9)
            end,
        {{_3, _5, _7}, _8}
    end.

enc_remote_domain_event_callback_device_added_msg(_1) ->
    case _1 of
        {_4, _3, _2} ->
            [<<_4:32>>,
             enc_remote_nonnull_domain(_3),
             enc_remote_nonnull_string(_2)]
    end.

dec_remote_domain_event_callback_device_added_msg(_1, _2) ->
    begin
        begin
            <<_:_2/binary,_3:32/signed,_/binary>> = _1,
            _4 = _2 + 4
        end,
        {_5, _6} = dec_remote_nonnull_domain(_1, _4),
        {_7, _8} = dec_remote_nonnull_string(_1, _6),
        {{_3, _5, _7}, _8}
    end.

enc_remote_connect_event_connection_closed_msg(_1) ->
    case _1 of
        {_2} ->
            [<<_2:32>>]
    end.

dec_remote_connect_event_connection_closed_msg(_1, _2) ->
    begin
        begin
            <<_:_2/binary,_3:32/signed,_/binary>> = _1,
            _4 = _2 + 4
        end,
        {{_3}, _4}
    end.

enc_remote_connect_get_cpu_model_names_args(_1) ->
    case _1 of
        {_4, _3, _2} ->
            [enc_remote_nonnull_string(_4), <<_3:32>>, <<_2:32>>]
    end.

dec_remote_connect_get_cpu_model_names_args(_1, _2) ->
    begin
        {_3, _4} = dec_remote_nonnull_string(_1, _2),
        begin
            <<_:_4/binary,_5:32/signed,_/binary>> = _1,
            _6 = _4 + 4
        end,
        begin
            <<_:_6/binary,_7:32/unsigned,_/binary>> = _1,
            _8 = _6 + 4
        end,
        {{_3, _5, _7}, _8}
    end.

enc_remote_connect_get_cpu_model_names_ret(_1) ->
    case _1 of
        {_3, _2} ->
            [begin
                 _5 = length(_3),
                 if
                     _5 =< 8192 ->
                         [<<_5:32/unsigned>>,
                          lists:map(fun(_4) ->
                                           enc_remote_nonnull_string(_4)
                                    end,
                                    _3)];
                     true ->
                         exit({xdr, limit})
                 end
             end,
             <<_2:32>>]
    end.

dec_remote_connect_get_cpu_model_names_ret(_1, _2) ->
    begin
        {_3, _4} =
            begin
                <<_:_2/binary,_5:32/unsigned,_/binary>> = _1,
                map_elem(fun(_6, _7) ->
                                dec_remote_nonnull_string(_6, _7)
                         end,
                         _1,
                         _2 + 4,
                         8192, _5)
            end,
        begin
            <<_:_4/binary,_8:32/signed,_/binary>> = _1,
            _9 = _4 + 4
        end,
        {{_3, _8}, _9}
    end.

enc_remote_connect_network_event_register_any_args(_1) ->
    case _1 of
        {_3, _2} ->
            [<<_3:32>>, enc_remote_network(_2)]
    end.

dec_remote_connect_network_event_register_any_args(_1, _2) ->
    begin
        begin
            <<_:_2/binary,_3:32/signed,_/binary>> = _1,
            _4 = _2 + 4
        end,
        {_5, _6} = dec_remote_network(_1, _4),
        {{_3, _5}, _6}
    end.

enc_remote_connect_network_event_register_any_ret(_1) ->
    case _1 of
        {_2} ->
            [<<_2:32>>]
    end.

dec_remote_connect_network_event_register_any_ret(_1, _2) ->
    begin
        begin
            <<_:_2/binary,_3:32/signed,_/binary>> = _1,
            _4 = _2 + 4
        end,
        {{_3}, _4}
    end.

enc_remote_connect_network_event_deregister_any_args(_1) ->
    case _1 of
        {_2} ->
            [<<_2:32>>]
    end.

dec_remote_connect_network_event_deregister_any_args(_1, _2) ->
    begin
        begin
            <<_:_2/binary,_3:32/signed,_/binary>> = _1,
            _4 = _2 + 4
        end,
        {{_3}, _4}
    end.

enc_remote_network_event_lifecycle_msg(_1) ->
    case _1 of
        {_5, _4, _3, _2} ->
            [<<_5:32>>,
             enc_remote_nonnull_network(_4),
             <<_3:32>>,
             <<_2:32>>]
    end.

dec_remote_network_event_lifecycle_msg(_1, _2) ->
    begin
        begin
            <<_:_2/binary,_3:32/signed,_/binary>> = _1,
            _4 = _2 + 4
        end,
        {_5, _6} = dec_remote_nonnull_network(_1, _4),
        begin
            <<_:_6/binary,_7:32/signed,_/binary>> = _1,
            _8 = _6 + 4
        end,
        begin
            <<_:_8/binary,_9:32/signed,_/binary>> = _1,
            _10 = _8 + 4
        end,
        {{_3, _5, _7, _9}, _10}
    end.

enc_remote_connect_storage_pool_event_register_any_args(_1) ->
    case _1 of
        {_3, _2} ->
            [<<_3:32>>, enc_remote_storage_pool(_2)]
    end.

dec_remote_connect_storage_pool_event_register_any_args(_1, _2) ->
    begin
        begin
            <<_:_2/binary,_3:32/signed,_/binary>> = _1,
            _4 = _2 + 4
        end,
        {_5, _6} = dec_remote_storage_pool(_1, _4),
        {{_3, _5}, _6}
    end.

enc_remote_connect_storage_pool_event_register_any_ret(_1) ->
    case _1 of
        {_2} ->
            [<<_2:32>>]
    end.

dec_remote_connect_storage_pool_event_register_any_ret(_1, _2) ->
    begin
        begin
            <<_:_2/binary,_3:32/signed,_/binary>> = _1,
            _4 = _2 + 4
        end,
        {{_3}, _4}
    end.

enc_remote_connect_storage_pool_event_deregister_any_args(_1) ->
    case _1 of
        {_2} ->
            [<<_2:32>>]
    end.

dec_remote_connect_storage_pool_event_deregister_any_args(_1, _2) ->
    begin
        begin
            <<_:_2/binary,_3:32/signed,_/binary>> = _1,
            _4 = _2 + 4
        end,
        {{_3}, _4}
    end.

enc_remote_storage_pool_event_lifecycle_msg(_1) ->
    case _1 of
        {_5, _4, _3, _2} ->
            [<<_5:32>>,
             enc_remote_nonnull_storage_pool(_4),
             <<_3:32>>,
             <<_2:32>>]
    end.

dec_remote_storage_pool_event_lifecycle_msg(_1, _2) ->
    begin
        begin
            <<_:_2/binary,_3:32/signed,_/binary>> = _1,
            _4 = _2 + 4
        end,
        {_5, _6} = dec_remote_nonnull_storage_pool(_1, _4),
        begin
            <<_:_6/binary,_7:32/signed,_/binary>> = _1,
            _8 = _6 + 4
        end,
        begin
            <<_:_8/binary,_9:32/signed,_/binary>> = _1,
            _10 = _8 + 4
        end,
        {{_3, _5, _7, _9}, _10}
    end.

enc_remote_storage_pool_event_refresh_msg(_1) ->
    case _1 of
        {_3, _2} ->
            [<<_3:32>>, enc_remote_nonnull_storage_pool(_2)]
    end.

dec_remote_storage_pool_event_refresh_msg(_1, _2) ->
    begin
        begin
            <<_:_2/binary,_3:32/signed,_/binary>> = _1,
            _4 = _2 + 4
        end,
        {_5, _6} = dec_remote_nonnull_storage_pool(_1, _4),
        {{_3, _5}, _6}
    end.

enc_remote_connect_node_device_event_register_any_args(_1) ->
    case _1 of
        {_3, _2} ->
            [<<_3:32>>, enc_remote_node_device(_2)]
    end.

dec_remote_connect_node_device_event_register_any_args(_1, _2) ->
    begin
        begin
            <<_:_2/binary,_3:32/signed,_/binary>> = _1,
            _4 = _2 + 4
        end,
        {_5, _6} = dec_remote_node_device(_1, _4),
        {{_3, _5}, _6}
    end.

enc_remote_connect_node_device_event_register_any_ret(_1) ->
    case _1 of
        {_2} ->
            [<<_2:32>>]
    end.

dec_remote_connect_node_device_event_register_any_ret(_1, _2) ->
    begin
        begin
            <<_:_2/binary,_3:32/signed,_/binary>> = _1,
            _4 = _2 + 4
        end,
        {{_3}, _4}
    end.

enc_remote_connect_node_device_event_deregister_any_args(_1) ->
    case _1 of
        {_2} ->
            [<<_2:32>>]
    end.

dec_remote_connect_node_device_event_deregister_any_args(_1, _2) ->
    begin
        begin
            <<_:_2/binary,_3:32/signed,_/binary>> = _1,
            _4 = _2 + 4
        end,
        {{_3}, _4}
    end.

enc_remote_node_device_event_lifecycle_msg(_1) ->
    case _1 of
        {_5, _4, _3, _2} ->
            [<<_5:32>>,
             enc_remote_nonnull_node_device(_4),
             <<_3:32>>,
             <<_2:32>>]
    end.

dec_remote_node_device_event_lifecycle_msg(_1, _2) ->
    begin
        begin
            <<_:_2/binary,_3:32/signed,_/binary>> = _1,
            _4 = _2 + 4
        end,
        {_5, _6} = dec_remote_nonnull_node_device(_1, _4),
        begin
            <<_:_6/binary,_7:32/signed,_/binary>> = _1,
            _8 = _6 + 4
        end,
        begin
            <<_:_8/binary,_9:32/signed,_/binary>> = _1,
            _10 = _8 + 4
        end,
        {{_3, _5, _7, _9}, _10}
    end.

enc_remote_node_device_event_update_msg(_1) ->
    case _1 of
        {_3, _2} ->
            [<<_3:32>>, enc_remote_nonnull_node_device(_2)]
    end.

dec_remote_node_device_event_update_msg(_1, _2) ->
    begin
        begin
            <<_:_2/binary,_3:32/signed,_/binary>> = _1,
            _4 = _2 + 4
        end,
        {_5, _6} = dec_remote_nonnull_node_device(_1, _4),
        {{_3, _5}, _6}
    end.

enc_remote_domain_fsfreeze_args(_1) ->
    case _1 of
        {_6, _3, _2} ->
            [enc_remote_nonnull_domain(_6),
             begin
                 _5 = length(_3),
                 if
                     _5 =< 256 ->
                         [<<_5:32/unsigned>>,
                          lists:map(fun(_4) ->
                                           enc_remote_nonnull_string(_4)
                                    end,
                                    _3)];
                     true ->
                         exit({xdr, limit})
                 end
             end,
             <<_2:32>>]
    end.

dec_remote_domain_fsfreeze_args(_1, _2) ->
    begin
        {_3, _4} = dec_remote_nonnull_domain(_1, _2),
        {_5, _6} =
            begin
                <<_:_4/binary,_7:32/unsigned,_/binary>> = _1,
                map_elem(fun(_8, _9) ->
                                dec_remote_nonnull_string(_8, _9)
                         end,
                         _1,
                         _4 + 4,
                         256, _7)
            end,
        begin
            <<_:_6/binary,_10:32/unsigned,_/binary>> = _1,
            _11 = _6 + 4
        end,
        {{_3, _5, _10}, _11}
    end.

enc_remote_domain_fsfreeze_ret(_1) ->
    case _1 of
        {_2} ->
            [<<_2:32>>]
    end.

dec_remote_domain_fsfreeze_ret(_1, _2) ->
    begin
        begin
            <<_:_2/binary,_3:32/signed,_/binary>> = _1,
            _4 = _2 + 4
        end,
        {{_3}, _4}
    end.

enc_remote_domain_fsthaw_args(_1) ->
    case _1 of
        {_6, _3, _2} ->
            [enc_remote_nonnull_domain(_6),
             begin
                 _5 = length(_3),
                 if
                     _5 =< 256 ->
                         [<<_5:32/unsigned>>,
                          lists:map(fun(_4) ->
                                           enc_remote_nonnull_string(_4)
                                    end,
                                    _3)];
                     true ->
                         exit({xdr, limit})
                 end
             end,
             <<_2:32>>]
    end.

dec_remote_domain_fsthaw_args(_1, _2) ->
    begin
        {_3, _4} = dec_remote_nonnull_domain(_1, _2),
        {_5, _6} =
            begin
                <<_:_4/binary,_7:32/unsigned,_/binary>> = _1,
                map_elem(fun(_8, _9) ->
                                dec_remote_nonnull_string(_8, _9)
                         end,
                         _1,
                         _4 + 4,
                         256, _7)
            end,
        begin
            <<_:_6/binary,_10:32/unsigned,_/binary>> = _1,
            _11 = _6 + 4
        end,
        {{_3, _5, _10}, _11}
    end.

enc_remote_domain_fsthaw_ret(_1) ->
    case _1 of
        {_2} ->
            [<<_2:32>>]
    end.

dec_remote_domain_fsthaw_ret(_1, _2) ->
    begin
        begin
            <<_:_2/binary,_3:32/signed,_/binary>> = _1,
            _4 = _2 + 4
        end,
        {{_3}, _4}
    end.

enc_remote_node_get_free_pages_args(_1) ->
    case _1 of
        {_5, _4, _3, _2} ->
            [begin
                 _7 = length(_5),
                 if
                     _7 =< 1024 ->
                         [<<_7:32/unsigned>>,
                          lists:map(fun(_6) ->
                                           <<_6:32>>
                                    end,
                                    _5)];
                     true ->
                         exit({xdr, limit})
                 end
             end,
             <<_4:32>>,
             <<_3:32>>,
             <<_2:32>>]
    end.

dec_remote_node_get_free_pages_args(_1, _2) ->
    begin
        {_3, _4} =
            begin
                <<_:_2/binary,_5:32/unsigned,_/binary>> = _1,
                map_elem(fun(_6, _7) ->
                                begin
                                    <<_:_7/binary,
                                      _8:32/unsigned,
                                      _/binary>> =
                                        _6,
                                    {_8, _7 + 4}
                                end
                         end,
                         _1,
                         _2 + 4,
                         1024, _5)
            end,
        begin
            <<_:_4/binary,_9:32/signed,_/binary>> = _1,
            _10 = _4 + 4
        end,
        begin
            <<_:_10/binary,_11:32/unsigned,_/binary>> = _1,
            _12 = _10 + 4
        end,
        begin
            <<_:_12/binary,_13:32/unsigned,_/binary>> = _1,
            _14 = _12 + 4
        end,
        {{_3, _9, _11, _13}, _14}
    end.

enc_remote_node_get_free_pages_ret(_1) ->
    case _1 of
        {_2} ->
            [begin
                 _4 = length(_2),
                 if
                     _4 =< 1024 ->
                         [<<_4:32/unsigned>>,
                          lists:map(fun(_3) ->
                                           <<_3:64>>
                                    end,
                                    _2)];
                     true ->
                         exit({xdr, limit})
                 end
             end]
    end.

dec_remote_node_get_free_pages_ret(_1, _2) ->
    begin
        {_3, _4} =
            begin
                <<_:_2/binary,_5:32/unsigned,_/binary>> = _1,
                map_elem(fun(_6, _7) ->
                                begin
                                    <<_:_7/binary,
                                      _8:64/unsigned,
                                      _/binary>> =
                                        _6,
                                    {_8, _7 + 8}
                                end
                         end,
                         _1,
                         _2 + 4,
                         1024, _5)
            end,
        {{_3}, _4}
    end.

enc_remote_node_alloc_pages_args(_1) ->
    case _1 of
        {_8, _5, _4, _3, _2} ->
            [begin
                 _10 = length(_8),
                 if
                     _10 =< 1024 ->
                         [<<_10:32/unsigned>>,
                          lists:map(fun(_9) ->
                                           <<_9:32>>
                                    end,
                                    _8)];
                     true ->
                         exit({xdr, limit})
                 end
             end,
             begin
                 _7 = length(_5),
                 if
                     _7 =< 1024 ->
                         [<<_7:32/unsigned>>,
                          lists:map(fun(_6) ->
                                           <<_6:64>>
                                    end,
                                    _5)];
                     true ->
                         exit({xdr, limit})
                 end
             end,
             <<_4:32>>,
             <<_3:32>>,
             <<_2:32>>]
    end.

dec_remote_node_alloc_pages_args(_1, _2) ->
    begin
        {_3, _4} =
            begin
                <<_:_2/binary,_5:32/unsigned,_/binary>> = _1,
                map_elem(fun(_6, _7) ->
                                begin
                                    <<_:_7/binary,
                                      _8:32/unsigned,
                                      _/binary>> =
                                        _6,
                                    {_8, _7 + 4}
                                end
                         end,
                         _1,
                         _2 + 4,
                         1024, _5)
            end,
        {_9, _10} =
            begin
                <<_:_4/binary,_11:32/unsigned,_/binary>> = _1,
                map_elem(fun(_12, _13) ->
                                begin
                                    <<_:_13/binary,
                                      _14:64/unsigned,
                                      _/binary>> =
                                        _12,
                                    {_14, _13 + 8}
                                end
                         end,
                         _1,
                         _4 + 4,
                         1024, _11)
            end,
        begin
            <<_:_10/binary,_15:32/signed,_/binary>> = _1,
            _16 = _10 + 4
        end,
        begin
            <<_:_16/binary,_17:32/unsigned,_/binary>> = _1,
            _18 = _16 + 4
        end,
        begin
            <<_:_18/binary,_19:32/unsigned,_/binary>> = _1,
            _20 = _18 + 4
        end,
        {{_3, _9, _15, _17, _19}, _20}
    end.

enc_remote_node_alloc_pages_ret(_1) ->
    case _1 of
        {_2} ->
            [<<_2:32>>]
    end.

dec_remote_node_alloc_pages_ret(_1, _2) ->
    begin
        begin
            <<_:_2/binary,_3:32/signed,_/binary>> = _1,
            _4 = _2 + 4
        end,
        {{_3}, _4}
    end.

enc_remote_network_dhcp_lease(_1) ->
    case _1 of
        {_10, _9, _8, _7, _6, _5, _4, _3, _2} ->
            [enc_remote_nonnull_string(_10),
             <<_9:64>>,
             <<_8:32>>,
             enc_remote_string(_7),
             enc_remote_string(_6),
             enc_remote_nonnull_string(_5),
             <<_4:32>>,
             enc_remote_string(_3),
             enc_remote_string(_2)]
    end.

dec_remote_network_dhcp_lease(_1, _2) ->
    begin
        {_3, _4} = dec_remote_nonnull_string(_1, _2),
        begin
            <<_:_4/binary,_5:64/signed,_/binary>> = _1,
            _6 = _4 + 8
        end,
        begin
            <<_:_6/binary,_7:32/signed,_/binary>> = _1,
            _8 = _6 + 4
        end,
        {_9, _10} = dec_remote_string(_1, _8),
        {_11, _12} = dec_remote_string(_1, _10),
        {_13, _14} = dec_remote_nonnull_string(_1, _12),
        begin
            <<_:_14/binary,_15:32/unsigned,_/binary>> = _1,
            _16 = _14 + 4
        end,
        {_17, _18} = dec_remote_string(_1, _16),
        {_19, _20} = dec_remote_string(_1, _18),
        {{_3, _5, _7, _9, _11, _13, _15, _17, _19}, _20}
    end.

enc_remote_network_get_dhcp_leases_args(_1) ->
    case _1 of
        {_5, _4, _3, _2} ->
            [enc_remote_nonnull_network(_5),
             enc_remote_string(_4),
             <<_3:32>>,
             <<_2:32>>]
    end.

dec_remote_network_get_dhcp_leases_args(_1, _2) ->
    begin
        {_3, _4} = dec_remote_nonnull_network(_1, _2),
        {_5, _6} = dec_remote_string(_1, _4),
        begin
            <<_:_6/binary,_7:32/signed,_/binary>> = _1,
            _8 = _6 + 4
        end,
        begin
            <<_:_8/binary,_9:32/unsigned,_/binary>> = _1,
            _10 = _8 + 4
        end,
        {{_3, _5, _7, _9}, _10}
    end.

enc_remote_network_get_dhcp_leases_ret(_1) ->
    case _1 of
        {_3, _2} ->
            [begin
                 _5 = length(_3),
                 if
                     _5 =< 65536 ->
                         [<<_5:32/unsigned>>,
                          lists:map(fun(_4) ->
                                           enc_remote_network_dhcp_lease(_4)
                                    end,
                                    _3)];
                     true ->
                         exit({xdr, limit})
                 end
             end,
             <<_2:32>>]
    end.

dec_remote_network_get_dhcp_leases_ret(_1, _2) ->
    begin
        {_3, _4} =
            begin
                <<_:_2/binary,_5:32/unsigned,_/binary>> = _1,
                map_elem(fun(_6, _7) ->
                                dec_remote_network_dhcp_lease(_6, _7)
                         end,
                         _1,
                         _2 + 4,
                         65536, _5)
            end,
        begin
            <<_:_4/binary,_8:32/unsigned,_/binary>> = _1,
            _9 = _4 + 4
        end,
        {{_3, _8}, _9}
    end.

enc_remote_domain_stats_record(_1) ->
    case _1 of
        {_5, _2} ->
            [enc_remote_nonnull_domain(_5),
             begin
                 _4 = length(_2),
                 if
                     _4 =< 262144 ->
                         [<<_4:32/unsigned>>,
                          lists:map(fun(_3) ->
                                           enc_remote_typed_param(_3)
                                    end,
                                    _2)];
                     true ->
                         exit({xdr, limit})
                 end
             end]
    end.

dec_remote_domain_stats_record(_1, _2) ->
    begin
        {_3, _4} = dec_remote_nonnull_domain(_1, _2),
        {_5, _6} =
            begin
                <<_:_4/binary,_7:32/unsigned,_/binary>> = _1,
                map_elem(fun(_8, _9) ->
                                dec_remote_typed_param(_8, _9)
                         end,
                         _1,
                         _4 + 4,
                         262144, _7)
            end,
        {{_3, _5}, _6}
    end.

enc_remote_connect_get_all_domain_stats_args(_1) ->
    case _1 of
        {_4, _3, _2} ->
            [begin
                 _6 = length(_4),
                 if
                     _6 =< 16384 ->
                         [<<_6:32/unsigned>>,
                          lists:map(fun(_5) ->
                                           enc_remote_nonnull_domain(_5)
                                    end,
                                    _4)];
                     true ->
                         exit({xdr, limit})
                 end
             end,
             <<_3:32>>,
             <<_2:32>>]
    end.

dec_remote_connect_get_all_domain_stats_args(_1, _2) ->
    begin
        {_3, _4} =
            begin
                <<_:_2/binary,_5:32/unsigned,_/binary>> = _1,
                map_elem(fun(_6, _7) ->
                                dec_remote_nonnull_domain(_6, _7)
                         end,
                         _1,
                         _2 + 4,
                         16384, _5)
            end,
        begin
            <<_:_4/binary,_8:32/unsigned,_/binary>> = _1,
            _9 = _4 + 4
        end,
        begin
            <<_:_9/binary,_10:32/unsigned,_/binary>> = _1,
            _11 = _9 + 4
        end,
        {{_3, _8, _10}, _11}
    end.

enc_remote_domain_event_callback_agent_lifecycle_msg(_1) ->
    case _1 of
        {_5, _4, _3, _2} ->
            [<<_5:32>>,
             enc_remote_nonnull_domain(_4),
             <<_3:32>>,
             <<_2:32>>]
    end.

dec_remote_domain_event_callback_agent_lifecycle_msg(_1, _2) ->
    begin
        begin
            <<_:_2/binary,_3:32/signed,_/binary>> = _1,
            _4 = _2 + 4
        end,
        {_5, _6} = dec_remote_nonnull_domain(_1, _4),
        begin
            <<_:_6/binary,_7:32/signed,_/binary>> = _1,
            _8 = _6 + 4
        end,
        begin
            <<_:_8/binary,_9:32/signed,_/binary>> = _1,
            _10 = _8 + 4
        end,
        {{_3, _5, _7, _9}, _10}
    end.

enc_remote_connect_get_all_domain_stats_ret(_1) ->
    case _1 of
        {_2} ->
            [begin
                 _4 = length(_2),
                 if
                     _4 =< 16384 ->
                         [<<_4:32/unsigned>>,
                          lists:map(fun(_3) ->
                                           enc_remote_domain_stats_record(_3)
                                    end,
                                    _2)];
                     true ->
                         exit({xdr, limit})
                 end
             end]
    end.

dec_remote_connect_get_all_domain_stats_ret(_1, _2) ->
    begin
        {_3, _4} =
            begin
                <<_:_2/binary,_5:32/unsigned,_/binary>> = _1,
                map_elem(fun(_6, _7) ->
                                dec_remote_domain_stats_record(_6, _7)
                         end,
                         _1,
                         _2 + 4,
                         16384, _5)
            end,
        {{_3}, _4}
    end.

enc_remote_domain_fsinfo(_1) ->
    case _1 of
        {_7, _6, _5, _2} ->
            [enc_remote_nonnull_string(_7),
             enc_remote_nonnull_string(_6),
             enc_remote_nonnull_string(_5),
             begin
                 _4 = length(_2),
                 if
                     _4 =< 256 ->
                         [<<_4:32/unsigned>>,
                          lists:map(fun(_3) ->
                                           enc_remote_nonnull_string(_3)
                                    end,
                                    _2)];
                     true ->
                         exit({xdr, limit})
                 end
             end]
    end.

dec_remote_domain_fsinfo(_1, _2) ->
    begin
        {_3, _4} = dec_remote_nonnull_string(_1, _2),
        {_5, _6} = dec_remote_nonnull_string(_1, _4),
        {_7, _8} = dec_remote_nonnull_string(_1, _6),
        {_9, _10} =
            begin
                <<_:_8/binary,_11:32/unsigned,_/binary>> = _1,
                map_elem(fun(_12, _13) ->
                                dec_remote_nonnull_string(_12, _13)
                         end,
                         _1,
                         _8 + 4,
                         256, _11)
            end,
        {{_3, _5, _7, _9}, _10}
    end.

enc_remote_domain_get_fsinfo_args(_1) ->
    case _1 of
        {_3, _2} ->
            [enc_remote_nonnull_domain(_3), <<_2:32>>]
    end.

dec_remote_domain_get_fsinfo_args(_1, _2) ->
    begin
        {_3, _4} = dec_remote_nonnull_domain(_1, _2),
        begin
            <<_:_4/binary,_5:32/unsigned,_/binary>> = _1,
            _6 = _4 + 4
        end,
        {{_3, _5}, _6}
    end.

enc_remote_domain_get_fsinfo_ret(_1) ->
    case _1 of
        {_3, _2} ->
            [begin
                 _5 = length(_3),
                 if
                     _5 =< 256 ->
                         [<<_5:32/unsigned>>,
                          lists:map(fun(_4) ->
                                           enc_remote_domain_fsinfo(_4)
                                    end,
                                    _3)];
                     true ->
                         exit({xdr, limit})
                 end
             end,
             <<_2:32>>]
    end.

dec_remote_domain_get_fsinfo_ret(_1, _2) ->
    begin
        {_3, _4} =
            begin
                <<_:_2/binary,_5:32/unsigned,_/binary>> = _1,
                map_elem(fun(_6, _7) ->
                                dec_remote_domain_fsinfo(_6, _7)
                         end,
                         _1,
                         _2 + 4,
                         256, _5)
            end,
        begin
            <<_:_4/binary,_8:32/unsigned,_/binary>> = _1,
            _9 = _4 + 4
        end,
        {{_3, _8}, _9}
    end.

enc_remote_domain_ip_addr(_1) ->
    case _1 of
        {_4, _3, _2} ->
            [<<_4:32>>, enc_remote_nonnull_string(_3), <<_2:32>>]
    end.

dec_remote_domain_ip_addr(_1, _2) ->
    begin
        begin
            <<_:_2/binary,_3:32/signed,_/binary>> = _1,
            _4 = _2 + 4
        end,
        {_5, _6} = dec_remote_nonnull_string(_1, _4),
        begin
            <<_:_6/binary,_7:32/unsigned,_/binary>> = _1,
            _8 = _6 + 4
        end,
        {{_3, _5, _7}, _8}
    end.

enc_remote_domain_interface(_1) ->
    case _1 of
        {_6, _5, _2} ->
            [enc_remote_nonnull_string(_6),
             enc_remote_string(_5),
             begin
                 _4 = length(_2),
                 if
                     _4 =< 2048 ->
                         [<<_4:32/unsigned>>,
                          lists:map(fun(_3) ->
                                           enc_remote_domain_ip_addr(_3)
                                    end,
                                    _2)];
                     true ->
                         exit({xdr, limit})
                 end
             end]
    end.

dec_remote_domain_interface(_1, _2) ->
    begin
        {_3, _4} = dec_remote_nonnull_string(_1, _2),
        {_5, _6} = dec_remote_string(_1, _4),
        {_7, _8} =
            begin
                <<_:_6/binary,_9:32/unsigned,_/binary>> = _1,
                map_elem(fun(_10, _11) ->
                                dec_remote_domain_ip_addr(_10, _11)
                         end,
                         _1,
                         _6 + 4,
                         2048, _9)
            end,
        {{_3, _5, _7}, _8}
    end.

enc_remote_domain_interface_addresses_args(_1) ->
    case _1 of
        {_4, _3, _2} ->
            [enc_remote_nonnull_domain(_4), <<_3:32>>, <<_2:32>>]
    end.

dec_remote_domain_interface_addresses_args(_1, _2) ->
    begin
        {_3, _4} = dec_remote_nonnull_domain(_1, _2),
        begin
            <<_:_4/binary,_5:32/unsigned,_/binary>> = _1,
            _6 = _4 + 4
        end,
        begin
            <<_:_6/binary,_7:32/unsigned,_/binary>> = _1,
            _8 = _6 + 4
        end,
        {{_3, _5, _7}, _8}
    end.

enc_remote_domain_interface_addresses_ret(_1) ->
    case _1 of
        {_2} ->
            [begin
                 _4 = length(_2),
                 if
                     _4 =< 2048 ->
                         [<<_4:32/unsigned>>,
                          lists:map(fun(_3) ->
                                           enc_remote_domain_interface(_3)
                                    end,
                                    _2)];
                     true ->
                         exit({xdr, limit})
                 end
             end]
    end.

dec_remote_domain_interface_addresses_ret(_1, _2) ->
    begin
        {_3, _4} =
            begin
                <<_:_2/binary,_5:32/unsigned,_/binary>> = _1,
                map_elem(fun(_6, _7) ->
                                dec_remote_domain_interface(_6, _7)
                         end,
                         _1,
                         _2 + 4,
                         2048, _5)
            end,
        {{_3}, _4}
    end.

enc_remote_domain_set_user_password_args(_1) ->
    case _1 of
        {_5, _4, _3, _2} ->
            [enc_remote_nonnull_domain(_5),
             enc_remote_string(_4),
             enc_remote_string(_3),
             <<_2:32>>]
    end.

dec_remote_domain_set_user_password_args(_1, _2) ->
    begin
        {_3, _4} = dec_remote_nonnull_domain(_1, _2),
        {_5, _6} = dec_remote_string(_1, _4),
        {_7, _8} = dec_remote_string(_1, _6),
        begin
            <<_:_8/binary,_9:32/unsigned,_/binary>> = _1,
            _10 = _8 + 4
        end,
        {{_3, _5, _7, _9}, _10}
    end.

enc_remote_domain_rename_args(_1) ->
    case _1 of
        {_4, _3, _2} ->
            [enc_remote_nonnull_domain(_4),
             enc_remote_string(_3),
             <<_2:32>>]
    end.

dec_remote_domain_rename_args(_1, _2) ->
    begin
        {_3, _4} = dec_remote_nonnull_domain(_1, _2),
        {_5, _6} = dec_remote_string(_1, _4),
        begin
            <<_:_6/binary,_7:32/unsigned,_/binary>> = _1,
            _8 = _6 + 4
        end,
        {{_3, _5, _7}, _8}
    end.

enc_remote_domain_rename_ret(_1) ->
    case _1 of
        {_2} ->
            [<<_2:32>>]
    end.

dec_remote_domain_rename_ret(_1, _2) ->
    begin
        begin
            <<_:_2/binary,_3:32/signed,_/binary>> = _1,
            _4 = _2 + 4
        end,
        {{_3}, _4}
    end.

enc_remote_domain_event_callback_migration_iteration_msg(_1) ->
    case _1 of
        {_4, _3, _2} ->
            [<<_4:32>>, enc_remote_nonnull_domain(_3), <<_2:32>>]
    end.

dec_remote_domain_event_callback_migration_iteration_msg(_1, _2) ->
    begin
        begin
            <<_:_2/binary,_3:32/signed,_/binary>> = _1,
            _4 = _2 + 4
        end,
        {_5, _6} = dec_remote_nonnull_domain(_1, _4),
        begin
            <<_:_6/binary,_7:32/signed,_/binary>> = _1,
            _8 = _6 + 4
        end,
        {{_3, _5, _7}, _8}
    end.

enc_remote_domain_event_callback_job_completed_msg(_1) ->
    case _1 of
        {_6, _5, _2} ->
            [<<_6:32>>,
             enc_remote_nonnull_domain(_5),
             begin
                 _4 = length(_2),
                 if
                     _4 =< 64 ->
                         [<<_4:32/unsigned>>,
                          lists:map(fun(_3) ->
                                           enc_remote_typed_param(_3)
                                    end,
                                    _2)];
                     true ->
                         exit({xdr, limit})
                 end
             end]
    end.

dec_remote_domain_event_callback_job_completed_msg(_1, _2) ->
    begin
        begin
            <<_:_2/binary,_3:32/signed,_/binary>> = _1,
            _4 = _2 + 4
        end,
        {_5, _6} = dec_remote_nonnull_domain(_1, _4),
        {_7, _8} =
            begin
                <<_:_6/binary,_9:32/unsigned,_/binary>> = _1,
                map_elem(fun(_10, _11) ->
                                dec_remote_typed_param(_10, _11)
                         end,
                         _1,
                         _6 + 4,
                         64, _9)
            end,
        {{_3, _5, _7}, _8}
    end.

enc_remote_domain_migrate_start_post_copy_args(_1) ->
    case _1 of
        {_3, _2} ->
            [enc_remote_nonnull_domain(_3), <<_2:32>>]
    end.

dec_remote_domain_migrate_start_post_copy_args(_1, _2) ->
    begin
        {_3, _4} = dec_remote_nonnull_domain(_1, _2),
        begin
            <<_:_4/binary,_5:32/unsigned,_/binary>> = _1,
            _6 = _4 + 4
        end,
        {{_3, _5}, _6}
    end.

enc_remote_domain_event_callback_device_removal_failed_msg(_1) ->
    case _1 of
        {_4, _3, _2} ->
            [<<_4:32>>,
             enc_remote_nonnull_domain(_3),
             enc_remote_nonnull_string(_2)]
    end.

dec_remote_domain_event_callback_device_removal_failed_msg(_1, _2) ->
    begin
        begin
            <<_:_2/binary,_3:32/signed,_/binary>> = _1,
            _4 = _2 + 4
        end,
        {_5, _6} = dec_remote_nonnull_domain(_1, _4),
        {_7, _8} = dec_remote_nonnull_string(_1, _6),
        {{_3, _5, _7}, _8}
    end.

enc_remote_domain_get_guest_vcpus_args(_1) ->
    case _1 of
        {_3, _2} ->
            [enc_remote_nonnull_domain(_3), <<_2:32>>]
    end.

dec_remote_domain_get_guest_vcpus_args(_1, _2) ->
    begin
        {_3, _4} = dec_remote_nonnull_domain(_1, _2),
        begin
            <<_:_4/binary,_5:32/unsigned,_/binary>> = _1,
            _6 = _4 + 4
        end,
        {{_3, _5}, _6}
    end.

enc_remote_domain_get_guest_vcpus_ret(_1) ->
    case _1 of
        {_2} ->
            [begin
                 _4 = length(_2),
                 if
                     _4 =< 64 ->
                         [<<_4:32/unsigned>>,
                          lists:map(fun(_3) ->
                                           enc_remote_typed_param(_3)
                                    end,
                                    _2)];
                     true ->
                         exit({xdr, limit})
                 end
             end]
    end.

dec_remote_domain_get_guest_vcpus_ret(_1, _2) ->
    begin
        {_3, _4} =
            begin
                <<_:_2/binary,_5:32/unsigned,_/binary>> = _1,
                map_elem(fun(_6, _7) ->
                                dec_remote_typed_param(_6, _7)
                         end,
                         _1,
                         _2 + 4,
                         64, _5)
            end,
        {{_3}, _4}
    end.

enc_remote_domain_set_guest_vcpus_args(_1) ->
    case _1 of
        {_5, _4, _3, _2} ->
            [enc_remote_nonnull_domain(_5),
             enc_remote_nonnull_string(_4),
             <<_3:32>>,
             <<_2:32>>]
    end.

dec_remote_domain_set_guest_vcpus_args(_1, _2) ->
    begin
        {_3, _4} = dec_remote_nonnull_domain(_1, _2),
        {_5, _6} = dec_remote_nonnull_string(_1, _4),
        begin
            <<_:_6/binary,_7:32/signed,_/binary>> = _1,
            _8 = _6 + 4
        end,
        begin
            <<_:_8/binary,_9:32/unsigned,_/binary>> = _1,
            _10 = _8 + 4
        end,
        {{_3, _5, _7, _9}, _10}
    end.

enc_remote_domain_set_vcpu_args(_1) ->
    case _1 of
        {_5, _4, _3, _2} ->
            [enc_remote_nonnull_domain(_5),
             enc_remote_nonnull_string(_4),
             <<_3:32>>,
             <<_2:32>>]
    end.

dec_remote_domain_set_vcpu_args(_1, _2) ->
    begin
        {_3, _4} = dec_remote_nonnull_domain(_1, _2),
        {_5, _6} = dec_remote_nonnull_string(_1, _4),
        begin
            <<_:_6/binary,_7:32/signed,_/binary>> = _1,
            _8 = _6 + 4
        end,
        begin
            <<_:_8/binary,_9:32/unsigned,_/binary>> = _1,
            _10 = _8 + 4
        end,
        {{_3, _5, _7, _9}, _10}
    end.

enc_remote_domain_event_callback_metadata_change_msg(_1) ->
    case _1 of
        {_5, _4, _3, _2} ->
            [<<_5:32>>,
             enc_remote_nonnull_domain(_4),
             <<_3:32>>,
             enc_remote_string(_2)]
    end.

dec_remote_domain_event_callback_metadata_change_msg(_1, _2) ->
    begin
        begin
            <<_:_2/binary,_3:32/signed,_/binary>> = _1,
            _4 = _2 + 4
        end,
        {_5, _6} = dec_remote_nonnull_domain(_1, _4),
        begin
            <<_:_6/binary,_7:32/signed,_/binary>> = _1,
            _8 = _6 + 4
        end,
        {_9, _10} = dec_remote_string(_1, _8),
        {{_3, _5, _7, _9}, _10}
    end.

enc_remote_connect_secret_event_register_any_args(_1) ->
    case _1 of
        {_3, _2} ->
            [<<_3:32>>, enc_remote_secret(_2)]
    end.

dec_remote_connect_secret_event_register_any_args(_1, _2) ->
    begin
        begin
            <<_:_2/binary,_3:32/signed,_/binary>> = _1,
            _4 = _2 + 4
        end,
        {_5, _6} = dec_remote_secret(_1, _4),
        {{_3, _5}, _6}
    end.

enc_remote_connect_secret_event_register_any_ret(_1) ->
    case _1 of
        {_2} ->
            [<<_2:32>>]
    end.

dec_remote_connect_secret_event_register_any_ret(_1, _2) ->
    begin
        begin
            <<_:_2/binary,_3:32/signed,_/binary>> = _1,
            _4 = _2 + 4
        end,
        {{_3}, _4}
    end.

enc_remote_connect_secret_event_deregister_any_args(_1) ->
    case _1 of
        {_2} ->
            [<<_2:32>>]
    end.

dec_remote_connect_secret_event_deregister_any_args(_1, _2) ->
    begin
        begin
            <<_:_2/binary,_3:32/signed,_/binary>> = _1,
            _4 = _2 + 4
        end,
        {{_3}, _4}
    end.

enc_remote_secret_event_lifecycle_msg(_1) ->
    case _1 of
        {_5, _4, _3, _2} ->
            [<<_5:32>>,
             enc_remote_nonnull_secret(_4),
             <<_3:32>>,
             <<_2:32>>]
    end.

dec_remote_secret_event_lifecycle_msg(_1, _2) ->
    begin
        begin
            <<_:_2/binary,_3:32/signed,_/binary>> = _1,
            _4 = _2 + 4
        end,
        {_5, _6} = dec_remote_nonnull_secret(_1, _4),
        begin
            <<_:_6/binary,_7:32/signed,_/binary>> = _1,
            _8 = _6 + 4
        end,
        begin
            <<_:_8/binary,_9:32/signed,_/binary>> = _1,
            _10 = _8 + 4
        end,
        {{_3, _5, _7, _9}, _10}
    end.

enc_remote_secret_event_value_changed_msg(_1) ->
    case _1 of
        {_3, _2} ->
            [<<_3:32>>, enc_remote_nonnull_secret(_2)]
    end.

dec_remote_secret_event_value_changed_msg(_1, _2) ->
    begin
        begin
            <<_:_2/binary,_3:32/signed,_/binary>> = _1,
            _4 = _2 + 4
        end,
        {_5, _6} = dec_remote_nonnull_secret(_1, _4),
        {{_3, _5}, _6}
    end.

enc_remote_domain_set_block_threshold_args(_1) ->
    case _1 of
        {_5, _4, _3, _2} ->
            [enc_remote_nonnull_domain(_5),
             enc_remote_nonnull_string(_4),
             <<_3:64>>,
             <<_2:32>>]
    end.

dec_remote_domain_set_block_threshold_args(_1, _2) ->
    begin
        {_3, _4} = dec_remote_nonnull_domain(_1, _2),
        {_5, _6} = dec_remote_nonnull_string(_1, _4),
        begin
            <<_:_6/binary,_7:64/unsigned,_/binary>> = _1,
            _8 = _6 + 8
        end,
        begin
            <<_:_8/binary,_9:32/unsigned,_/binary>> = _1,
            _10 = _8 + 4
        end,
        {{_3, _5, _7, _9}, _10}
    end.

enc_remote_domain_set_lifecycle_action_args(_1) ->
    case _1 of
        {_5, _4, _3, _2} ->
            [enc_remote_nonnull_domain(_5),
             <<_4:32>>,
             <<_3:32>>,
             <<_2:32>>]
    end.

dec_remote_domain_set_lifecycle_action_args(_1, _2) ->
    begin
        {_3, _4} = dec_remote_nonnull_domain(_1, _2),
        begin
            <<_:_4/binary,_5:32/unsigned,_/binary>> = _1,
            _6 = _4 + 4
        end,
        begin
            <<_:_6/binary,_7:32/unsigned,_/binary>> = _1,
            _8 = _6 + 4
        end,
        begin
            <<_:_8/binary,_9:32/unsigned,_/binary>> = _1,
            _10 = _8 + 4
        end,
        {{_3, _5, _7, _9}, _10}
    end.

enc_remote_connect_compare_hypervisor_cpu_args(_1) ->
    case _1 of
        {_7, _6, _5, _4, _3, _2} ->
            [enc_remote_string(_7),
             enc_remote_string(_6),
             enc_remote_string(_5),
             enc_remote_string(_4),
             enc_remote_nonnull_string(_3),
             <<_2:32>>]
    end.

dec_remote_connect_compare_hypervisor_cpu_args(_1, _2) ->
    begin
        {_3, _4} = dec_remote_string(_1, _2),
        {_5, _6} = dec_remote_string(_1, _4),
        {_7, _8} = dec_remote_string(_1, _6),
        {_9, _10} = dec_remote_string(_1, _8),
        {_11, _12} = dec_remote_nonnull_string(_1, _10),
        begin
            <<_:_12/binary,_13:32/unsigned,_/binary>> = _1,
            _14 = _12 + 4
        end,
        {{_3, _5, _7, _9, _11, _13}, _14}
    end.

enc_remote_connect_compare_hypervisor_cpu_ret(_1) ->
    case _1 of
        {_2} ->
            [<<_2:32>>]
    end.

dec_remote_connect_compare_hypervisor_cpu_ret(_1, _2) ->
    begin
        begin
            <<_:_2/binary,_3:32/signed,_/binary>> = _1,
            _4 = _2 + 4
        end,
        {{_3}, _4}
    end.

enc_remote_connect_baseline_hypervisor_cpu_args(_1) ->
    case _1 of
        {_9, _8, _7, _6, _3, _2} ->
            [enc_remote_string(_9),
             enc_remote_string(_8),
             enc_remote_string(_7),
             enc_remote_string(_6),
             begin
                 _5 = length(_3),
                 if
                     _5 =< 256 ->
                         [<<_5:32/unsigned>>,
                          lists:map(fun(_4) ->
                                           enc_remote_nonnull_string(_4)
                                    end,
                                    _3)];
                     true ->
                         exit({xdr, limit})
                 end
             end,
             <<_2:32>>]
    end.

dec_remote_connect_baseline_hypervisor_cpu_args(_1, _2) ->
    begin
        {_3, _4} = dec_remote_string(_1, _2),
        {_5, _6} = dec_remote_string(_1, _4),
        {_7, _8} = dec_remote_string(_1, _6),
        {_9, _10} = dec_remote_string(_1, _8),
        {_11, _12} =
            begin
                <<_:_10/binary,_13:32/unsigned,_/binary>> = _1,
                map_elem(fun(_14, _15) ->
                                dec_remote_nonnull_string(_14, _15)
                         end,
                         _1,
                         _10 + 4,
                         256, _13)
            end,
        begin
            <<_:_12/binary,_16:32/unsigned,_/binary>> = _1,
            _17 = _12 + 4
        end,
        {{_3, _5, _7, _9, _11, _16}, _17}
    end.

enc_remote_connect_baseline_hypervisor_cpu_ret(_1) ->
    case _1 of
        {_2} ->
            [enc_remote_nonnull_string(_2)]
    end.

dec_remote_connect_baseline_hypervisor_cpu_ret(_1, _2) ->
    begin
        {_3, _4} = dec_remote_nonnull_string(_1, _2),
        {{_3}, _4}
    end.

enc_remote_node_get_sev_info_args(_1) ->
    case _1 of
        {_3, _2} ->
            [<<_3:32>>, <<_2:32>>]
    end.

dec_remote_node_get_sev_info_args(_1, _2) ->
    begin
        begin
            <<_:_2/binary,_3:32/signed,_/binary>> = _1,
            _4 = _2 + 4
        end,
        begin
            <<_:_4/binary,_5:32/unsigned,_/binary>> = _1,
            _6 = _4 + 4
        end,
        {{_3, _5}, _6}
    end.

enc_remote_node_get_sev_info_ret(_1) ->
    case _1 of
        {_3, _2} ->
            [begin
                 _5 = length(_3),
                 if
                     _5 =< 64 ->
                         [<<_5:32/unsigned>>,
                          lists:map(fun(_4) ->
                                           enc_remote_typed_param(_4)
                                    end,
                                    _3)];
                     true ->
                         exit({xdr, limit})
                 end
             end,
             <<_2:32>>]
    end.

dec_remote_node_get_sev_info_ret(_1, _2) ->
    begin
        {_3, _4} =
            begin
                <<_:_2/binary,_5:32/unsigned,_/binary>> = _1,
                map_elem(fun(_6, _7) ->
                                dec_remote_typed_param(_6, _7)
                         end,
                         _1,
                         _2 + 4,
                         64, _5)
            end,
        begin
            <<_:_4/binary,_8:32/signed,_/binary>> = _1,
            _9 = _4 + 4
        end,
        {{_3, _8}, _9}
    end.

enc_remote_domain_get_launch_security_info_args(_1) ->
    case _1 of
        {_3, _2} ->
            [enc_remote_nonnull_domain(_3), <<_2:32>>]
    end.

dec_remote_domain_get_launch_security_info_args(_1, _2) ->
    begin
        {_3, _4} = dec_remote_nonnull_domain(_1, _2),
        begin
            <<_:_4/binary,_5:32/unsigned,_/binary>> = _1,
            _6 = _4 + 4
        end,
        {{_3, _5}, _6}
    end.

enc_remote_domain_get_launch_security_info_ret(_1) ->
    case _1 of
        {_2} ->
            [begin
                 _4 = length(_2),
                 if
                     _4 =< 64 ->
                         [<<_4:32/unsigned>>,
                          lists:map(fun(_3) ->
                                           enc_remote_typed_param(_3)
                                    end,
                                    _2)];
                     true ->
                         exit({xdr, limit})
                 end
             end]
    end.

dec_remote_domain_get_launch_security_info_ret(_1, _2) ->
    begin
        {_3, _4} =
            begin
                <<_:_2/binary,_5:32/unsigned,_/binary>> = _1,
                map_elem(fun(_6, _7) ->
                                dec_remote_typed_param(_6, _7)
                         end,
                         _1,
                         _2 + 4,
                         64, _5)
            end,
        {{_3}, _4}
    end.

enc_remote_nwfilter_binding_lookup_by_port_dev_args(_1) ->
    case _1 of
        {_2} ->
            [enc_remote_nonnull_string(_2)]
    end.

dec_remote_nwfilter_binding_lookup_by_port_dev_args(_1, _2) ->
    begin
        {_3, _4} = dec_remote_nonnull_string(_1, _2),
        {{_3}, _4}
    end.

enc_remote_nwfilter_binding_lookup_by_port_dev_ret(_1) ->
    case _1 of
        {_2} ->
            [enc_remote_nonnull_nwfilter_binding(_2)]
    end.

dec_remote_nwfilter_binding_lookup_by_port_dev_ret(_1, _2) ->
    begin
        {_3, _4} = dec_remote_nonnull_nwfilter_binding(_1, _2),
        {{_3}, _4}
    end.

enc_remote_nwfilter_binding_create_xml_args(_1) ->
    case _1 of
        {_3, _2} ->
            [enc_remote_nonnull_string(_3), <<_2:32>>]
    end.

dec_remote_nwfilter_binding_create_xml_args(_1, _2) ->
    begin
        {_3, _4} = dec_remote_nonnull_string(_1, _2),
        begin
            <<_:_4/binary,_5:32/unsigned,_/binary>> = _1,
            _6 = _4 + 4
        end,
        {{_3, _5}, _6}
    end.

enc_remote_nwfilter_binding_create_xml_ret(_1) ->
    case _1 of
        {_2} ->
            [enc_remote_nonnull_nwfilter_binding(_2)]
    end.

dec_remote_nwfilter_binding_create_xml_ret(_1, _2) ->
    begin
        {_3, _4} = dec_remote_nonnull_nwfilter_binding(_1, _2),
        {{_3}, _4}
    end.

enc_remote_nwfilter_binding_delete_args(_1) ->
    case _1 of
        {_2} ->
            [enc_remote_nonnull_nwfilter_binding(_2)]
    end.

dec_remote_nwfilter_binding_delete_args(_1, _2) ->
    begin
        {_3, _4} = dec_remote_nonnull_nwfilter_binding(_1, _2),
        {{_3}, _4}
    end.

enc_remote_nwfilter_binding_get_xml_desc_args(_1) ->
    case _1 of
        {_3, _2} ->
            [enc_remote_nonnull_nwfilter_binding(_3), <<_2:32>>]
    end.

dec_remote_nwfilter_binding_get_xml_desc_args(_1, _2) ->
    begin
        {_3, _4} = dec_remote_nonnull_nwfilter_binding(_1, _2),
        begin
            <<_:_4/binary,_5:32/unsigned,_/binary>> = _1,
            _6 = _4 + 4
        end,
        {{_3, _5}, _6}
    end.

enc_remote_nwfilter_binding_get_xml_desc_ret(_1) ->
    case _1 of
        {_2} ->
            [enc_remote_nonnull_string(_2)]
    end.

dec_remote_nwfilter_binding_get_xml_desc_ret(_1, _2) ->
    begin
        {_3, _4} = dec_remote_nonnull_string(_1, _2),
        {{_3}, _4}
    end.

enc_remote_connect_list_all_nwfilter_bindings_args(_1) ->
    case _1 of
        {_3, _2} ->
            [<<_3:32>>, <<_2:32>>]
    end.

dec_remote_connect_list_all_nwfilter_bindings_args(_1, _2) ->
    begin
        begin
            <<_:_2/binary,_3:32/signed,_/binary>> = _1,
            _4 = _2 + 4
        end,
        begin
            <<_:_4/binary,_5:32/unsigned,_/binary>> = _1,
            _6 = _4 + 4
        end,
        {{_3, _5}, _6}
    end.

enc_remote_connect_list_all_nwfilter_bindings_ret(_1) ->
    case _1 of
        {_3, _2} ->
            [begin
                 _5 = length(_3),
                 if
                     _5 =< 16384 ->
                         [<<_5:32/unsigned>>,
                          lists:map(fun(_4) ->
                                           enc_remote_nonnull_nwfilter_binding(_4)
                                    end,
                                    _3)];
                     true ->
                         exit({xdr, limit})
                 end
             end,
             <<_2:32>>]
    end.

dec_remote_connect_list_all_nwfilter_bindings_ret(_1, _2) ->
    begin
        {_3, _4} =
            begin
                <<_:_2/binary,_5:32/unsigned,_/binary>> = _1,
                map_elem(fun(_6, _7) ->
                                dec_remote_nonnull_nwfilter_binding(_6,
                                                                    _7)
                         end,
                         _1,
                         _2 + 4,
                         16384, _5)
            end,
        begin
            <<_:_4/binary,_8:32/unsigned,_/binary>> = _1,
            _9 = _4 + 4
        end,
        {{_3, _8}, _9}
    end.

enc_remote_connect_get_storage_pool_capabilities_args(_1) ->
    case _1 of
        {_2} ->
            [<<_2:32>>]
    end.

dec_remote_connect_get_storage_pool_capabilities_args(_1, _2) ->
    begin
        begin
            <<_:_2/binary,_3:32/unsigned,_/binary>> = _1,
            _4 = _2 + 4
        end,
        {{_3}, _4}
    end.

enc_remote_connect_get_storage_pool_capabilities_ret(_1) ->
    case _1 of
        {_2} ->
            [enc_remote_nonnull_string(_2)]
    end.

dec_remote_connect_get_storage_pool_capabilities_ret(_1, _2) ->
    begin
        {_3, _4} = dec_remote_nonnull_string(_1, _2),
        {{_3}, _4}
    end.

enc_remote_network_list_all_ports_args(_1) ->
    case _1 of
        {_4, _3, _2} ->
            [enc_remote_nonnull_network(_4), <<_3:32>>, <<_2:32>>]
    end.

dec_remote_network_list_all_ports_args(_1, _2) ->
    begin
        {_3, _4} = dec_remote_nonnull_network(_1, _2),
        begin
            <<_:_4/binary,_5:32/signed,_/binary>> = _1,
            _6 = _4 + 4
        end,
        begin
            <<_:_6/binary,_7:32/unsigned,_/binary>> = _1,
            _8 = _6 + 4
        end,
        {{_3, _5, _7}, _8}
    end.

enc_remote_network_list_all_ports_ret(_1) ->
    case _1 of
        {_3, _2} ->
            [begin
                 _5 = length(_3),
                 if
                     _5 =< 16384 ->
                         [<<_5:32/unsigned>>,
                          lists:map(fun(_4) ->
                                           enc_remote_nonnull_network_port(_4)
                                    end,
                                    _3)];
                     true ->
                         exit({xdr, limit})
                 end
             end,
             <<_2:32>>]
    end.

dec_remote_network_list_all_ports_ret(_1, _2) ->
    begin
        {_3, _4} =
            begin
                <<_:_2/binary,_5:32/unsigned,_/binary>> = _1,
                map_elem(fun(_6, _7) ->
                                dec_remote_nonnull_network_port(_6, _7)
                         end,
                         _1,
                         _2 + 4,
                         16384, _5)
            end,
        begin
            <<_:_4/binary,_8:32/unsigned,_/binary>> = _1,
            _9 = _4 + 4
        end,
        {{_3, _8}, _9}
    end.

enc_remote_network_port_lookup_by_uuid_args(_1) ->
    case _1 of
        {_3, _2} ->
            [enc_remote_nonnull_network(_3), enc_remote_uuid(_2)]
    end.

dec_remote_network_port_lookup_by_uuid_args(_1, _2) ->
    begin
        {_3, _4} = dec_remote_nonnull_network(_1, _2),
        {_5, _6} = dec_remote_uuid(_1, _4),
        {{_3, _5}, _6}
    end.

enc_remote_network_port_lookup_by_uuid_ret(_1) ->
    case _1 of
        {_2} ->
            [enc_remote_nonnull_network_port(_2)]
    end.

dec_remote_network_port_lookup_by_uuid_ret(_1, _2) ->
    begin
        {_3, _4} = dec_remote_nonnull_network_port(_1, _2),
        {{_3}, _4}
    end.

enc_remote_network_port_create_xml_args(_1) ->
    case _1 of
        {_4, _3, _2} ->
            [enc_remote_nonnull_network(_4),
             enc_remote_nonnull_string(_3),
             <<_2:32>>]
    end.

dec_remote_network_port_create_xml_args(_1, _2) ->
    begin
        {_3, _4} = dec_remote_nonnull_network(_1, _2),
        {_5, _6} = dec_remote_nonnull_string(_1, _4),
        begin
            <<_:_6/binary,_7:32/unsigned,_/binary>> = _1,
            _8 = _6 + 4
        end,
        {{_3, _5, _7}, _8}
    end.

enc_remote_network_port_create_xml_ret(_1) ->
    case _1 of
        {_2} ->
            [enc_remote_nonnull_network_port(_2)]
    end.

dec_remote_network_port_create_xml_ret(_1, _2) ->
    begin
        {_3, _4} = dec_remote_nonnull_network_port(_1, _2),
        {{_3}, _4}
    end.

enc_remote_network_port_set_parameters_args(_1) ->
    case _1 of
        {_6, _3, _2} ->
            [enc_remote_nonnull_network_port(_6),
             begin
                 _5 = length(_3),
                 if
                     _5 =< 16 ->
                         [<<_5:32/unsigned>>,
                          lists:map(fun(_4) ->
                                           enc_remote_typed_param(_4)
                                    end,
                                    _3)];
                     true ->
                         exit({xdr, limit})
                 end
             end,
             <<_2:32>>]
    end.

dec_remote_network_port_set_parameters_args(_1, _2) ->
    begin
        {_3, _4} = dec_remote_nonnull_network_port(_1, _2),
        {_5, _6} =
            begin
                <<_:_4/binary,_7:32/unsigned,_/binary>> = _1,
                map_elem(fun(_8, _9) ->
                                dec_remote_typed_param(_8, _9)
                         end,
                         _1,
                         _4 + 4,
                         16, _7)
            end,
        begin
            <<_:_6/binary,_10:32/unsigned,_/binary>> = _1,
            _11 = _6 + 4
        end,
        {{_3, _5, _10}, _11}
    end.

enc_remote_network_port_get_parameters_args(_1) ->
    case _1 of
        {_4, _3, _2} ->
            [enc_remote_nonnull_network_port(_4), <<_3:32>>, <<_2:32>>]
    end.

dec_remote_network_port_get_parameters_args(_1, _2) ->
    begin
        {_3, _4} = dec_remote_nonnull_network_port(_1, _2),
        begin
            <<_:_4/binary,_5:32/signed,_/binary>> = _1,
            _6 = _4 + 4
        end,
        begin
            <<_:_6/binary,_7:32/unsigned,_/binary>> = _1,
            _8 = _6 + 4
        end,
        {{_3, _5, _7}, _8}
    end.

enc_remote_network_port_get_parameters_ret(_1) ->
    case _1 of
        {_3, _2} ->
            [begin
                 _5 = length(_3),
                 if
                     _5 =< 16 ->
                         [<<_5:32/unsigned>>,
                          lists:map(fun(_4) ->
                                           enc_remote_typed_param(_4)
                                    end,
                                    _3)];
                     true ->
                         exit({xdr, limit})
                 end
             end,
             <<_2:32>>]
    end.

dec_remote_network_port_get_parameters_ret(_1, _2) ->
    begin
        {_3, _4} =
            begin
                <<_:_2/binary,_5:32/unsigned,_/binary>> = _1,
                map_elem(fun(_6, _7) ->
                                dec_remote_typed_param(_6, _7)
                         end,
                         _1,
                         _2 + 4,
                         16, _5)
            end,
        begin
            <<_:_4/binary,_8:32/signed,_/binary>> = _1,
            _9 = _4 + 4
        end,
        {{_3, _8}, _9}
    end.

enc_remote_network_port_get_xml_desc_args(_1) ->
    case _1 of
        {_3, _2} ->
            [enc_remote_nonnull_network_port(_3), <<_2:32>>]
    end.

dec_remote_network_port_get_xml_desc_args(_1, _2) ->
    begin
        {_3, _4} = dec_remote_nonnull_network_port(_1, _2),
        begin
            <<_:_4/binary,_5:32/unsigned,_/binary>> = _1,
            _6 = _4 + 4
        end,
        {{_3, _5}, _6}
    end.

enc_remote_network_port_get_xml_desc_ret(_1) ->
    case _1 of
        {_2} ->
            [enc_remote_nonnull_string(_2)]
    end.

dec_remote_network_port_get_xml_desc_ret(_1, _2) ->
    begin
        {_3, _4} = dec_remote_nonnull_string(_1, _2),
        {{_3}, _4}
    end.

enc_remote_network_port_delete_args(_1) ->
    case _1 of
        {_3, _2} ->
            [enc_remote_nonnull_network_port(_3), <<_2:32>>]
    end.

dec_remote_network_port_delete_args(_1, _2) ->
    begin
        {_3, _4} = dec_remote_nonnull_network_port(_1, _2),
        begin
            <<_:_4/binary,_5:32/unsigned,_/binary>> = _1,
            _6 = _4 + 4
        end,
        {{_3, _5}, _6}
    end.

enc_remote_domain_checkpoint_create_xml_args(_1) ->
    case _1 of
        {_4, _3, _2} ->
            [enc_remote_nonnull_domain(_4),
             enc_remote_nonnull_string(_3),
             <<_2:32>>]
    end.

dec_remote_domain_checkpoint_create_xml_args(_1, _2) ->
    begin
        {_3, _4} = dec_remote_nonnull_domain(_1, _2),
        {_5, _6} = dec_remote_nonnull_string(_1, _4),
        begin
            <<_:_6/binary,_7:32/unsigned,_/binary>> = _1,
            _8 = _6 + 4
        end,
        {{_3, _5, _7}, _8}
    end.

enc_remote_domain_checkpoint_create_xml_ret(_1) ->
    case _1 of
        {_2} ->
            [enc_remote_nonnull_domain_checkpoint(_2)]
    end.

dec_remote_domain_checkpoint_create_xml_ret(_1, _2) ->
    begin
        {_3, _4} = dec_remote_nonnull_domain_checkpoint(_1, _2),
        {{_3}, _4}
    end.

enc_remote_domain_checkpoint_get_xml_desc_args(_1) ->
    case _1 of
        {_3, _2} ->
            [enc_remote_nonnull_domain_checkpoint(_3), <<_2:32>>]
    end.

dec_remote_domain_checkpoint_get_xml_desc_args(_1, _2) ->
    begin
        {_3, _4} = dec_remote_nonnull_domain_checkpoint(_1, _2),
        begin
            <<_:_4/binary,_5:32/unsigned,_/binary>> = _1,
            _6 = _4 + 4
        end,
        {{_3, _5}, _6}
    end.

enc_remote_domain_checkpoint_get_xml_desc_ret(_1) ->
    case _1 of
        {_2} ->
            [enc_remote_nonnull_string(_2)]
    end.

dec_remote_domain_checkpoint_get_xml_desc_ret(_1, _2) ->
    begin
        {_3, _4} = dec_remote_nonnull_string(_1, _2),
        {{_3}, _4}
    end.

enc_remote_domain_list_all_checkpoints_args(_1) ->
    case _1 of
        {_4, _3, _2} ->
            [enc_remote_nonnull_domain(_4), <<_3:32>>, <<_2:32>>]
    end.

dec_remote_domain_list_all_checkpoints_args(_1, _2) ->
    begin
        {_3, _4} = dec_remote_nonnull_domain(_1, _2),
        begin
            <<_:_4/binary,_5:32/signed,_/binary>> = _1,
            _6 = _4 + 4
        end,
        begin
            <<_:_6/binary,_7:32/unsigned,_/binary>> = _1,
            _8 = _6 + 4
        end,
        {{_3, _5, _7}, _8}
    end.

enc_remote_domain_list_all_checkpoints_ret(_1) ->
    case _1 of
        {_3, _2} ->
            [begin
                 _5 = length(_3),
                 if
                     _5 =< 16384 ->
                         [<<_5:32/unsigned>>,
                          lists:map(fun(_4) ->
                                           enc_remote_nonnull_domain_checkpoint(_4)
                                    end,
                                    _3)];
                     true ->
                         exit({xdr, limit})
                 end
             end,
             <<_2:32>>]
    end.

dec_remote_domain_list_all_checkpoints_ret(_1, _2) ->
    begin
        {_3, _4} =
            begin
                <<_:_2/binary,_5:32/unsigned,_/binary>> = _1,
                map_elem(fun(_6, _7) ->
                                dec_remote_nonnull_domain_checkpoint(_6,
                                                                     _7)
                         end,
                         _1,
                         _2 + 4,
                         16384, _5)
            end,
        begin
            <<_:_4/binary,_8:32/signed,_/binary>> = _1,
            _9 = _4 + 4
        end,
        {{_3, _8}, _9}
    end.

enc_remote_domain_checkpoint_list_all_children_args(_1) ->
    case _1 of
        {_4, _3, _2} ->
            [enc_remote_nonnull_domain_checkpoint(_4),
             <<_3:32>>,
             <<_2:32>>]
    end.

dec_remote_domain_checkpoint_list_all_children_args(_1, _2) ->
    begin
        {_3, _4} = dec_remote_nonnull_domain_checkpoint(_1, _2),
        begin
            <<_:_4/binary,_5:32/signed,_/binary>> = _1,
            _6 = _4 + 4
        end,
        begin
            <<_:_6/binary,_7:32/unsigned,_/binary>> = _1,
            _8 = _6 + 4
        end,
        {{_3, _5, _7}, _8}
    end.

enc_remote_domain_checkpoint_list_all_children_ret(_1) ->
    case _1 of
        {_3, _2} ->
            [begin
                 _5 = length(_3),
                 if
                     _5 =< 16384 ->
                         [<<_5:32/unsigned>>,
                          lists:map(fun(_4) ->
                                           enc_remote_nonnull_domain_checkpoint(_4)
                                    end,
                                    _3)];
                     true ->
                         exit({xdr, limit})
                 end
             end,
             <<_2:32>>]
    end.

dec_remote_domain_checkpoint_list_all_children_ret(_1, _2) ->
    begin
        {_3, _4} =
            begin
                <<_:_2/binary,_5:32/unsigned,_/binary>> = _1,
                map_elem(fun(_6, _7) ->
                                dec_remote_nonnull_domain_checkpoint(_6,
                                                                     _7)
                         end,
                         _1,
                         _2 + 4,
                         16384, _5)
            end,
        begin
            <<_:_4/binary,_8:32/signed,_/binary>> = _1,
            _9 = _4 + 4
        end,
        {{_3, _8}, _9}
    end.

enc_remote_domain_checkpoint_lookup_by_name_args(_1) ->
    case _1 of
        {_4, _3, _2} ->
            [enc_remote_nonnull_domain(_4),
             enc_remote_nonnull_string(_3),
             <<_2:32>>]
    end.

dec_remote_domain_checkpoint_lookup_by_name_args(_1, _2) ->
    begin
        {_3, _4} = dec_remote_nonnull_domain(_1, _2),
        {_5, _6} = dec_remote_nonnull_string(_1, _4),
        begin
            <<_:_6/binary,_7:32/unsigned,_/binary>> = _1,
            _8 = _6 + 4
        end,
        {{_3, _5, _7}, _8}
    end.

enc_remote_domain_checkpoint_lookup_by_name_ret(_1) ->
    case _1 of
        {_2} ->
            [enc_remote_nonnull_domain_checkpoint(_2)]
    end.

dec_remote_domain_checkpoint_lookup_by_name_ret(_1, _2) ->
    begin
        {_3, _4} = dec_remote_nonnull_domain_checkpoint(_1, _2),
        {{_3}, _4}
    end.

enc_remote_domain_checkpoint_get_parent_args(_1) ->
    case _1 of
        {_3, _2} ->
            [enc_remote_nonnull_domain_checkpoint(_3), <<_2:32>>]
    end.

dec_remote_domain_checkpoint_get_parent_args(_1, _2) ->
    begin
        {_3, _4} = dec_remote_nonnull_domain_checkpoint(_1, _2),
        begin
            <<_:_4/binary,_5:32/unsigned,_/binary>> = _1,
            _6 = _4 + 4
        end,
        {{_3, _5}, _6}
    end.

enc_remote_domain_checkpoint_get_parent_ret(_1) ->
    case _1 of
        {_2} ->
            [enc_remote_nonnull_domain_checkpoint(_2)]
    end.

dec_remote_domain_checkpoint_get_parent_ret(_1, _2) ->
    begin
        {_3, _4} = dec_remote_nonnull_domain_checkpoint(_1, _2),
        {{_3}, _4}
    end.

enc_remote_domain_checkpoint_delete_args(_1) ->
    case _1 of
        {_3, _2} ->
            [enc_remote_nonnull_domain_checkpoint(_3), <<_2:32>>]
    end.

dec_remote_domain_checkpoint_delete_args(_1, _2) ->
    begin
        {_3, _4} = dec_remote_nonnull_domain_checkpoint(_1, _2),
        begin
            <<_:_4/binary,_5:32/unsigned,_/binary>> = _1,
            _6 = _4 + 4
        end,
        {{_3, _5}, _6}
    end.

enc_remote_domain_get_guest_info_args(_1) ->
    case _1 of
        {_4, _3, _2} ->
            [enc_remote_nonnull_domain(_4), <<_3:32>>, <<_2:32>>]
    end.

dec_remote_domain_get_guest_info_args(_1, _2) ->
    begin
        {_3, _4} = dec_remote_nonnull_domain(_1, _2),
        begin
            <<_:_4/binary,_5:32/unsigned,_/binary>> = _1,
            _6 = _4 + 4
        end,
        begin
            <<_:_6/binary,_7:32/unsigned,_/binary>> = _1,
            _8 = _6 + 4
        end,
        {{_3, _5, _7}, _8}
    end.

enc_remote_domain_get_guest_info_ret(_1) ->
    case _1 of
        {_2} ->
            [begin
                 _4 = length(_2),
                 if
                     _4 =< 2048 ->
                         [<<_4:32/unsigned>>,
                          lists:map(fun(_3) ->
                                           enc_remote_typed_param(_3)
                                    end,
                                    _2)];
                     true ->
                         exit({xdr, limit})
                 end
             end]
    end.

dec_remote_domain_get_guest_info_ret(_1, _2) ->
    begin
        {_3, _4} =
            begin
                <<_:_2/binary,_5:32/unsigned,_/binary>> = _1,
                map_elem(fun(_6, _7) ->
                                dec_remote_typed_param(_6, _7)
                         end,
                         _1,
                         _2 + 4,
                         2048, _5)
            end,
        {{_3}, _4}
    end.

enc_remote_connect_set_identity_args(_1) ->
    case _1 of
        {_3, _2} ->
            [begin
                 _5 = length(_3),
                 if
                     _5 =< 20 ->
                         [<<_5:32/unsigned>>,
                          lists:map(fun(_4) ->
                                           enc_remote_typed_param(_4)
                                    end,
                                    _3)];
                     true ->
                         exit({xdr, limit})
                 end
             end,
             <<_2:32>>]
    end.

dec_remote_connect_set_identity_args(_1, _2) ->
    begin
        {_3, _4} =
            begin
                <<_:_2/binary,_5:32/unsigned,_/binary>> = _1,
                map_elem(fun(_6, _7) ->
                                dec_remote_typed_param(_6, _7)
                         end,
                         _1,
                         _2 + 4,
                         20, _5)
            end,
        begin
            <<_:_4/binary,_8:32/unsigned,_/binary>> = _1,
            _9 = _4 + 4
        end,
        {{_3, _8}, _9}
    end.

enc_remote_domain_agent_set_response_timeout_args(_1) ->
    case _1 of
        {_4, _3, _2} ->
            [enc_remote_nonnull_domain(_4), <<_3:32>>, <<_2:32>>]
    end.

dec_remote_domain_agent_set_response_timeout_args(_1, _2) ->
    begin
        {_3, _4} = dec_remote_nonnull_domain(_1, _2),
        begin
            <<_:_4/binary,_5:32/signed,_/binary>> = _1,
            _6 = _4 + 4
        end,
        begin
            <<_:_6/binary,_7:32/unsigned,_/binary>> = _1,
            _8 = _6 + 4
        end,
        {{_3, _5, _7}, _8}
    end.

enc_remote_domain_agent_set_response_timeout_ret(_1) ->
    case _1 of
        {_2} ->
            [<<_2:32>>]
    end.

dec_remote_domain_agent_set_response_timeout_ret(_1, _2) ->
    begin
        begin
            <<_:_2/binary,_3:32/signed,_/binary>> = _1,
            _4 = _2 + 4
        end,
        {{_3}, _4}
    end.

enc_remote_domain_backup_begin_args(_1) ->
    case _1 of
        {_5, _4, _3, _2} ->
            [enc_remote_nonnull_domain(_5),
             enc_remote_nonnull_string(_4),
             enc_remote_string(_3),
             <<_2:32>>]
    end.

dec_remote_domain_backup_begin_args(_1, _2) ->
    begin
        {_3, _4} = dec_remote_nonnull_domain(_1, _2),
        {_5, _6} = dec_remote_nonnull_string(_1, _4),
        {_7, _8} = dec_remote_string(_1, _6),
        begin
            <<_:_8/binary,_9:32/unsigned,_/binary>> = _1,
            _10 = _8 + 4
        end,
        {{_3, _5, _7, _9}, _10}
    end.

enc_remote_domain_backup_get_xml_desc_args(_1) ->
    case _1 of
        {_3, _2} ->
            [enc_remote_nonnull_domain(_3), <<_2:32>>]
    end.

dec_remote_domain_backup_get_xml_desc_args(_1, _2) ->
    begin
        {_3, _4} = dec_remote_nonnull_domain(_1, _2),
        begin
            <<_:_4/binary,_5:32/unsigned,_/binary>> = _1,
            _6 = _4 + 4
        end,
        {{_3, _5}, _6}
    end.

enc_remote_domain_backup_get_xml_desc_ret(_1) ->
    case _1 of
        {_2} ->
            [enc_remote_nonnull_string(_2)]
    end.

dec_remote_domain_backup_get_xml_desc_ret(_1, _2) ->
    begin
        {_3, _4} = dec_remote_nonnull_string(_1, _2),
        {{_3}, _4}
    end.

enc_remote_procedure(_1) ->
    case _1 of
        'REMOTE_PROC_CONNECT_OPEN' ->
            <<1:32>>;
        'REMOTE_PROC_CONNECT_CLOSE' ->
            <<2:32>>;
        'REMOTE_PROC_CONNECT_GET_TYPE' ->
            <<3:32>>;
        'REMOTE_PROC_CONNECT_GET_VERSION' ->
            <<4:32>>;
        'REMOTE_PROC_CONNECT_GET_MAX_VCPUS' ->
            <<5:32>>;
        'REMOTE_PROC_NODE_GET_INFO' ->
            <<6:32>>;
        'REMOTE_PROC_CONNECT_GET_CAPABILITIES' ->
            <<7:32>>;
        'REMOTE_PROC_DOMAIN_ATTACH_DEVICE' ->
            <<8:32>>;
        'REMOTE_PROC_DOMAIN_CREATE' ->
            <<9:32>>;
        'REMOTE_PROC_DOMAIN_CREATE_XML' ->
            <<10:32>>;
        'REMOTE_PROC_DOMAIN_DEFINE_XML' ->
            <<11:32>>;
        'REMOTE_PROC_DOMAIN_DESTROY' ->
            <<12:32>>;
        'REMOTE_PROC_DOMAIN_DETACH_DEVICE' ->
            <<13:32>>;
        'REMOTE_PROC_DOMAIN_GET_XML_DESC' ->
            <<14:32>>;
        'REMOTE_PROC_DOMAIN_GET_AUTOSTART' ->
            <<15:32>>;
        'REMOTE_PROC_DOMAIN_GET_INFO' ->
            <<16:32>>;
        'REMOTE_PROC_DOMAIN_GET_MAX_MEMORY' ->
            <<17:32>>;
        'REMOTE_PROC_DOMAIN_GET_MAX_VCPUS' ->
            <<18:32>>;
        'REMOTE_PROC_DOMAIN_GET_OS_TYPE' ->
            <<19:32>>;
        'REMOTE_PROC_DOMAIN_GET_VCPUS' ->
            <<20:32>>;
        'REMOTE_PROC_CONNECT_LIST_DEFINED_DOMAINS' ->
            <<21:32>>;
        'REMOTE_PROC_DOMAIN_LOOKUP_BY_ID' ->
            <<22:32>>;
        'REMOTE_PROC_DOMAIN_LOOKUP_BY_NAME' ->
            <<23:32>>;
        'REMOTE_PROC_DOMAIN_LOOKUP_BY_UUID' ->
            <<24:32>>;
        'REMOTE_PROC_CONNECT_NUM_OF_DEFINED_DOMAINS' ->
            <<25:32>>;
        'REMOTE_PROC_DOMAIN_PIN_VCPU' ->
            <<26:32>>;
        'REMOTE_PROC_DOMAIN_REBOOT' ->
            <<27:32>>;
        'REMOTE_PROC_DOMAIN_RESUME' ->
            <<28:32>>;
        'REMOTE_PROC_DOMAIN_SET_AUTOSTART' ->
            <<29:32>>;
        'REMOTE_PROC_DOMAIN_SET_MAX_MEMORY' ->
            <<30:32>>;
        'REMOTE_PROC_DOMAIN_SET_MEMORY' ->
            <<31:32>>;
        'REMOTE_PROC_DOMAIN_SET_VCPUS' ->
            <<32:32>>;
        'REMOTE_PROC_DOMAIN_SHUTDOWN' ->
            <<33:32>>;
        'REMOTE_PROC_DOMAIN_SUSPEND' ->
            <<34:32>>;
        'REMOTE_PROC_DOMAIN_UNDEFINE' ->
            <<35:32>>;
        'REMOTE_PROC_CONNECT_LIST_DEFINED_NETWORKS' ->
            <<36:32>>;
        'REMOTE_PROC_CONNECT_LIST_DOMAINS' ->
            <<37:32>>;
        'REMOTE_PROC_CONNECT_LIST_NETWORKS' ->
            <<38:32>>;
        'REMOTE_PROC_NETWORK_CREATE' ->
            <<39:32>>;
        'REMOTE_PROC_NETWORK_CREATE_XML' ->
            <<40:32>>;
        'REMOTE_PROC_NETWORK_DEFINE_XML' ->
            <<41:32>>;
        'REMOTE_PROC_NETWORK_DESTROY' ->
            <<42:32>>;
        'REMOTE_PROC_NETWORK_GET_XML_DESC' ->
            <<43:32>>;
        'REMOTE_PROC_NETWORK_GET_AUTOSTART' ->
            <<44:32>>;
        'REMOTE_PROC_NETWORK_GET_BRIDGE_NAME' ->
            <<45:32>>;
        'REMOTE_PROC_NETWORK_LOOKUP_BY_NAME' ->
            <<46:32>>;
        'REMOTE_PROC_NETWORK_LOOKUP_BY_UUID' ->
            <<47:32>>;
        'REMOTE_PROC_NETWORK_SET_AUTOSTART' ->
            <<48:32>>;
        'REMOTE_PROC_NETWORK_UNDEFINE' ->
            <<49:32>>;
        'REMOTE_PROC_CONNECT_NUM_OF_DEFINED_NETWORKS' ->
            <<50:32>>;
        'REMOTE_PROC_CONNECT_NUM_OF_DOMAINS' ->
            <<51:32>>;
        'REMOTE_PROC_CONNECT_NUM_OF_NETWORKS' ->
            <<52:32>>;
        'REMOTE_PROC_DOMAIN_CORE_DUMP' ->
            <<53:32>>;
        'REMOTE_PROC_DOMAIN_RESTORE' ->
            <<54:32>>;
        'REMOTE_PROC_DOMAIN_SAVE' ->
            <<55:32>>;
        'REMOTE_PROC_DOMAIN_GET_SCHEDULER_TYPE' ->
            <<56:32>>;
        'REMOTE_PROC_DOMAIN_GET_SCHEDULER_PARAMETERS' ->
            <<57:32>>;
        'REMOTE_PROC_DOMAIN_SET_SCHEDULER_PARAMETERS' ->
            <<58:32>>;
        'REMOTE_PROC_CONNECT_GET_HOSTNAME' ->
            <<59:32>>;
        'REMOTE_PROC_CONNECT_SUPPORTS_FEATURE' ->
            <<60:32>>;
        'REMOTE_PROC_DOMAIN_MIGRATE_PREPARE' ->
            <<61:32>>;
        'REMOTE_PROC_DOMAIN_MIGRATE_PERFORM' ->
            <<62:32>>;
        'REMOTE_PROC_DOMAIN_MIGRATE_FINISH' ->
            <<63:32>>;
        'REMOTE_PROC_DOMAIN_BLOCK_STATS' ->
            <<64:32>>;
        'REMOTE_PROC_DOMAIN_INTERFACE_STATS' ->
            <<65:32>>;
        'REMOTE_PROC_AUTH_LIST' ->
            <<66:32>>;
        'REMOTE_PROC_AUTH_SASL_INIT' ->
            <<67:32>>;
        'REMOTE_PROC_AUTH_SASL_START' ->
            <<68:32>>;
        'REMOTE_PROC_AUTH_SASL_STEP' ->
            <<69:32>>;
        'REMOTE_PROC_AUTH_POLKIT' ->
            <<70:32>>;
        'REMOTE_PROC_CONNECT_NUM_OF_STORAGE_POOLS' ->
            <<71:32>>;
        'REMOTE_PROC_CONNECT_LIST_STORAGE_POOLS' ->
            <<72:32>>;
        'REMOTE_PROC_CONNECT_NUM_OF_DEFINED_STORAGE_POOLS' ->
            <<73:32>>;
        'REMOTE_PROC_CONNECT_LIST_DEFINED_STORAGE_POOLS' ->
            <<74:32>>;
        'REMOTE_PROC_CONNECT_FIND_STORAGE_POOL_SOURCES' ->
            <<75:32>>;
        'REMOTE_PROC_STORAGE_POOL_CREATE_XML' ->
            <<76:32>>;
        'REMOTE_PROC_STORAGE_POOL_DEFINE_XML' ->
            <<77:32>>;
        'REMOTE_PROC_STORAGE_POOL_CREATE' ->
            <<78:32>>;
        'REMOTE_PROC_STORAGE_POOL_BUILD' ->
            <<79:32>>;
        'REMOTE_PROC_STORAGE_POOL_DESTROY' ->
            <<80:32>>;
        'REMOTE_PROC_STORAGE_POOL_DELETE' ->
            <<81:32>>;
        'REMOTE_PROC_STORAGE_POOL_UNDEFINE' ->
            <<82:32>>;
        'REMOTE_PROC_STORAGE_POOL_REFRESH' ->
            <<83:32>>;
        'REMOTE_PROC_STORAGE_POOL_LOOKUP_BY_NAME' ->
            <<84:32>>;
        'REMOTE_PROC_STORAGE_POOL_LOOKUP_BY_UUID' ->
            <<85:32>>;
        'REMOTE_PROC_STORAGE_POOL_LOOKUP_BY_VOLUME' ->
            <<86:32>>;
        'REMOTE_PROC_STORAGE_POOL_GET_INFO' ->
            <<87:32>>;
        'REMOTE_PROC_STORAGE_POOL_GET_XML_DESC' ->
            <<88:32>>;
        'REMOTE_PROC_STORAGE_POOL_GET_AUTOSTART' ->
            <<89:32>>;
        'REMOTE_PROC_STORAGE_POOL_SET_AUTOSTART' ->
            <<90:32>>;
        'REMOTE_PROC_STORAGE_POOL_NUM_OF_VOLUMES' ->
            <<91:32>>;
        'REMOTE_PROC_STORAGE_POOL_LIST_VOLUMES' ->
            <<92:32>>;
        'REMOTE_PROC_STORAGE_VOL_CREATE_XML' ->
            <<93:32>>;
        'REMOTE_PROC_STORAGE_VOL_DELETE' ->
            <<94:32>>;
        'REMOTE_PROC_STORAGE_VOL_LOOKUP_BY_NAME' ->
            <<95:32>>;
        'REMOTE_PROC_STORAGE_VOL_LOOKUP_BY_KEY' ->
            <<96:32>>;
        'REMOTE_PROC_STORAGE_VOL_LOOKUP_BY_PATH' ->
            <<97:32>>;
        'REMOTE_PROC_STORAGE_VOL_GET_INFO' ->
            <<98:32>>;
        'REMOTE_PROC_STORAGE_VOL_GET_XML_DESC' ->
            <<99:32>>;
        'REMOTE_PROC_STORAGE_VOL_GET_PATH' ->
            <<100:32>>;
        'REMOTE_PROC_NODE_GET_CELLS_FREE_MEMORY' ->
            <<101:32>>;
        'REMOTE_PROC_NODE_GET_FREE_MEMORY' ->
            <<102:32>>;
        'REMOTE_PROC_DOMAIN_BLOCK_PEEK' ->
            <<103:32>>;
        'REMOTE_PROC_DOMAIN_MEMORY_PEEK' ->
            <<104:32>>;
        'REMOTE_PROC_CONNECT_DOMAIN_EVENT_REGISTER' ->
            <<105:32>>;
        'REMOTE_PROC_CONNECT_DOMAIN_EVENT_DEREGISTER' ->
            <<106:32>>;
        'REMOTE_PROC_DOMAIN_EVENT_LIFECYCLE' ->
            <<107:32>>;
        'REMOTE_PROC_DOMAIN_MIGRATE_PREPARE2' ->
            <<108:32>>;
        'REMOTE_PROC_DOMAIN_MIGRATE_FINISH2' ->
            <<109:32>>;
        'REMOTE_PROC_CONNECT_GET_URI' ->
            <<110:32>>;
        'REMOTE_PROC_NODE_NUM_OF_DEVICES' ->
            <<111:32>>;
        'REMOTE_PROC_NODE_LIST_DEVICES' ->
            <<112:32>>;
        'REMOTE_PROC_NODE_DEVICE_LOOKUP_BY_NAME' ->
            <<113:32>>;
        'REMOTE_PROC_NODE_DEVICE_GET_XML_DESC' ->
            <<114:32>>;
        'REMOTE_PROC_NODE_DEVICE_GET_PARENT' ->
            <<115:32>>;
        'REMOTE_PROC_NODE_DEVICE_NUM_OF_CAPS' ->
            <<116:32>>;
        'REMOTE_PROC_NODE_DEVICE_LIST_CAPS' ->
            <<117:32>>;
        'REMOTE_PROC_NODE_DEVICE_DETTACH' ->
            <<118:32>>;
        'REMOTE_PROC_NODE_DEVICE_RE_ATTACH' ->
            <<119:32>>;
        'REMOTE_PROC_NODE_DEVICE_RESET' ->
            <<120:32>>;
        'REMOTE_PROC_DOMAIN_GET_SECURITY_LABEL' ->
            <<121:32>>;
        'REMOTE_PROC_NODE_GET_SECURITY_MODEL' ->
            <<122:32>>;
        'REMOTE_PROC_NODE_DEVICE_CREATE_XML' ->
            <<123:32>>;
        'REMOTE_PROC_NODE_DEVICE_DESTROY' ->
            <<124:32>>;
        'REMOTE_PROC_STORAGE_VOL_CREATE_XML_FROM' ->
            <<125:32>>;
        'REMOTE_PROC_CONNECT_NUM_OF_INTERFACES' ->
            <<126:32>>;
        'REMOTE_PROC_CONNECT_LIST_INTERFACES' ->
            <<127:32>>;
        'REMOTE_PROC_INTERFACE_LOOKUP_BY_NAME' ->
            <<128:32>>;
        'REMOTE_PROC_INTERFACE_LOOKUP_BY_MAC_STRING' ->
            <<129:32>>;
        'REMOTE_PROC_INTERFACE_GET_XML_DESC' ->
            <<130:32>>;
        'REMOTE_PROC_INTERFACE_DEFINE_XML' ->
            <<131:32>>;
        'REMOTE_PROC_INTERFACE_UNDEFINE' ->
            <<132:32>>;
        'REMOTE_PROC_INTERFACE_CREATE' ->
            <<133:32>>;
        'REMOTE_PROC_INTERFACE_DESTROY' ->
            <<134:32>>;
        'REMOTE_PROC_CONNECT_DOMAIN_XML_FROM_NATIVE' ->
            <<135:32>>;
        'REMOTE_PROC_CONNECT_DOMAIN_XML_TO_NATIVE' ->
            <<136:32>>;
        'REMOTE_PROC_CONNECT_NUM_OF_DEFINED_INTERFACES' ->
            <<137:32>>;
        'REMOTE_PROC_CONNECT_LIST_DEFINED_INTERFACES' ->
            <<138:32>>;
        'REMOTE_PROC_CONNECT_NUM_OF_SECRETS' ->
            <<139:32>>;
        'REMOTE_PROC_CONNECT_LIST_SECRETS' ->
            <<140:32>>;
        'REMOTE_PROC_SECRET_LOOKUP_BY_UUID' ->
            <<141:32>>;
        'REMOTE_PROC_SECRET_DEFINE_XML' ->
            <<142:32>>;
        'REMOTE_PROC_SECRET_GET_XML_DESC' ->
            <<143:32>>;
        'REMOTE_PROC_SECRET_SET_VALUE' ->
            <<144:32>>;
        'REMOTE_PROC_SECRET_GET_VALUE' ->
            <<145:32>>;
        'REMOTE_PROC_SECRET_UNDEFINE' ->
            <<146:32>>;
        'REMOTE_PROC_SECRET_LOOKUP_BY_USAGE' ->
            <<147:32>>;
        'REMOTE_PROC_DOMAIN_MIGRATE_PREPARE_TUNNEL' ->
            <<148:32>>;
        'REMOTE_PROC_CONNECT_IS_SECURE' ->
            <<149:32>>;
        'REMOTE_PROC_DOMAIN_IS_ACTIVE' ->
            <<150:32>>;
        'REMOTE_PROC_DOMAIN_IS_PERSISTENT' ->
            <<151:32>>;
        'REMOTE_PROC_NETWORK_IS_ACTIVE' ->
            <<152:32>>;
        'REMOTE_PROC_NETWORK_IS_PERSISTENT' ->
            <<153:32>>;
        'REMOTE_PROC_STORAGE_POOL_IS_ACTIVE' ->
            <<154:32>>;
        'REMOTE_PROC_STORAGE_POOL_IS_PERSISTENT' ->
            <<155:32>>;
        'REMOTE_PROC_INTERFACE_IS_ACTIVE' ->
            <<156:32>>;
        'REMOTE_PROC_CONNECT_GET_LIB_VERSION' ->
            <<157:32>>;
        'REMOTE_PROC_CONNECT_COMPARE_CPU' ->
            <<158:32>>;
        'REMOTE_PROC_DOMAIN_MEMORY_STATS' ->
            <<159:32>>;
        'REMOTE_PROC_DOMAIN_ATTACH_DEVICE_FLAGS' ->
            <<160:32>>;
        'REMOTE_PROC_DOMAIN_DETACH_DEVICE_FLAGS' ->
            <<161:32>>;
        'REMOTE_PROC_CONNECT_BASELINE_CPU' ->
            <<162:32>>;
        'REMOTE_PROC_DOMAIN_GET_JOB_INFO' ->
            <<163:32>>;
        'REMOTE_PROC_DOMAIN_ABORT_JOB' ->
            <<164:32>>;
        'REMOTE_PROC_STORAGE_VOL_WIPE' ->
            <<165:32>>;
        'REMOTE_PROC_DOMAIN_MIGRATE_SET_MAX_DOWNTIME' ->
            <<166:32>>;
        'REMOTE_PROC_CONNECT_DOMAIN_EVENT_REGISTER_ANY' ->
            <<167:32>>;
        'REMOTE_PROC_CONNECT_DOMAIN_EVENT_DEREGISTER_ANY' ->
            <<168:32>>;
        'REMOTE_PROC_DOMAIN_EVENT_REBOOT' ->
            <<169:32>>;
        'REMOTE_PROC_DOMAIN_EVENT_RTC_CHANGE' ->
            <<170:32>>;
        'REMOTE_PROC_DOMAIN_EVENT_WATCHDOG' ->
            <<171:32>>;
        'REMOTE_PROC_DOMAIN_EVENT_IO_ERROR' ->
            <<172:32>>;
        'REMOTE_PROC_DOMAIN_EVENT_GRAPHICS' ->
            <<173:32>>;
        'REMOTE_PROC_DOMAIN_UPDATE_DEVICE_FLAGS' ->
            <<174:32>>;
        'REMOTE_PROC_NWFILTER_LOOKUP_BY_NAME' ->
            <<175:32>>;
        'REMOTE_PROC_NWFILTER_LOOKUP_BY_UUID' ->
            <<176:32>>;
        'REMOTE_PROC_NWFILTER_GET_XML_DESC' ->
            <<177:32>>;
        'REMOTE_PROC_CONNECT_NUM_OF_NWFILTERS' ->
            <<178:32>>;
        'REMOTE_PROC_CONNECT_LIST_NWFILTERS' ->
            <<179:32>>;
        'REMOTE_PROC_NWFILTER_DEFINE_XML' ->
            <<180:32>>;
        'REMOTE_PROC_NWFILTER_UNDEFINE' ->
            <<181:32>>;
        'REMOTE_PROC_DOMAIN_MANAGED_SAVE' ->
            <<182:32>>;
        'REMOTE_PROC_DOMAIN_HAS_MANAGED_SAVE_IMAGE' ->
            <<183:32>>;
        'REMOTE_PROC_DOMAIN_MANAGED_SAVE_REMOVE' ->
            <<184:32>>;
        'REMOTE_PROC_DOMAIN_SNAPSHOT_CREATE_XML' ->
            <<185:32>>;
        'REMOTE_PROC_DOMAIN_SNAPSHOT_GET_XML_DESC' ->
            <<186:32>>;
        'REMOTE_PROC_DOMAIN_SNAPSHOT_NUM' ->
            <<187:32>>;
        'REMOTE_PROC_DOMAIN_SNAPSHOT_LIST_NAMES' ->
            <<188:32>>;
        'REMOTE_PROC_DOMAIN_SNAPSHOT_LOOKUP_BY_NAME' ->
            <<189:32>>;
        'REMOTE_PROC_DOMAIN_HAS_CURRENT_SNAPSHOT' ->
            <<190:32>>;
        'REMOTE_PROC_DOMAIN_SNAPSHOT_CURRENT' ->
            <<191:32>>;
        'REMOTE_PROC_DOMAIN_REVERT_TO_SNAPSHOT' ->
            <<192:32>>;
        'REMOTE_PROC_DOMAIN_SNAPSHOT_DELETE' ->
            <<193:32>>;
        'REMOTE_PROC_DOMAIN_GET_BLOCK_INFO' ->
            <<194:32>>;
        'REMOTE_PROC_DOMAIN_EVENT_IO_ERROR_REASON' ->
            <<195:32>>;
        'REMOTE_PROC_DOMAIN_CREATE_WITH_FLAGS' ->
            <<196:32>>;
        'REMOTE_PROC_DOMAIN_SET_MEMORY_PARAMETERS' ->
            <<197:32>>;
        'REMOTE_PROC_DOMAIN_GET_MEMORY_PARAMETERS' ->
            <<198:32>>;
        'REMOTE_PROC_DOMAIN_SET_VCPUS_FLAGS' ->
            <<199:32>>;
        'REMOTE_PROC_DOMAIN_GET_VCPUS_FLAGS' ->
            <<200:32>>;
        'REMOTE_PROC_DOMAIN_OPEN_CONSOLE' ->
            <<201:32>>;
        'REMOTE_PROC_DOMAIN_IS_UPDATED' ->
            <<202:32>>;
        'REMOTE_PROC_CONNECT_GET_SYSINFO' ->
            <<203:32>>;
        'REMOTE_PROC_DOMAIN_SET_MEMORY_FLAGS' ->
            <<204:32>>;
        'REMOTE_PROC_DOMAIN_SET_BLKIO_PARAMETERS' ->
            <<205:32>>;
        'REMOTE_PROC_DOMAIN_GET_BLKIO_PARAMETERS' ->
            <<206:32>>;
        'REMOTE_PROC_DOMAIN_MIGRATE_SET_MAX_SPEED' ->
            <<207:32>>;
        'REMOTE_PROC_STORAGE_VOL_UPLOAD' ->
            <<208:32>>;
        'REMOTE_PROC_STORAGE_VOL_DOWNLOAD' ->
            <<209:32>>;
        'REMOTE_PROC_DOMAIN_INJECT_NMI' ->
            <<210:32>>;
        'REMOTE_PROC_DOMAIN_SCREENSHOT' ->
            <<211:32>>;
        'REMOTE_PROC_DOMAIN_GET_STATE' ->
            <<212:32>>;
        'REMOTE_PROC_DOMAIN_MIGRATE_BEGIN3' ->
            <<213:32>>;
        'REMOTE_PROC_DOMAIN_MIGRATE_PREPARE3' ->
            <<214:32>>;
        'REMOTE_PROC_DOMAIN_MIGRATE_PREPARE_TUNNEL3' ->
            <<215:32>>;
        'REMOTE_PROC_DOMAIN_MIGRATE_PERFORM3' ->
            <<216:32>>;
        'REMOTE_PROC_DOMAIN_MIGRATE_FINISH3' ->
            <<217:32>>;
        'REMOTE_PROC_DOMAIN_MIGRATE_CONFIRM3' ->
            <<218:32>>;
        'REMOTE_PROC_DOMAIN_SET_SCHEDULER_PARAMETERS_FLAGS' ->
            <<219:32>>;
        'REMOTE_PROC_INTERFACE_CHANGE_BEGIN' ->
            <<220:32>>;
        'REMOTE_PROC_INTERFACE_CHANGE_COMMIT' ->
            <<221:32>>;
        'REMOTE_PROC_INTERFACE_CHANGE_ROLLBACK' ->
            <<222:32>>;
        'REMOTE_PROC_DOMAIN_GET_SCHEDULER_PARAMETERS_FLAGS' ->
            <<223:32>>;
        'REMOTE_PROC_DOMAIN_EVENT_CONTROL_ERROR' ->
            <<224:32>>;
        'REMOTE_PROC_DOMAIN_PIN_VCPU_FLAGS' ->
            <<225:32>>;
        'REMOTE_PROC_DOMAIN_SEND_KEY' ->
            <<226:32>>;
        'REMOTE_PROC_NODE_GET_CPU_STATS' ->
            <<227:32>>;
        'REMOTE_PROC_NODE_GET_MEMORY_STATS' ->
            <<228:32>>;
        'REMOTE_PROC_DOMAIN_GET_CONTROL_INFO' ->
            <<229:32>>;
        'REMOTE_PROC_DOMAIN_GET_VCPU_PIN_INFO' ->
            <<230:32>>;
        'REMOTE_PROC_DOMAIN_UNDEFINE_FLAGS' ->
            <<231:32>>;
        'REMOTE_PROC_DOMAIN_SAVE_FLAGS' ->
            <<232:32>>;
        'REMOTE_PROC_DOMAIN_RESTORE_FLAGS' ->
            <<233:32>>;
        'REMOTE_PROC_DOMAIN_DESTROY_FLAGS' ->
            <<234:32>>;
        'REMOTE_PROC_DOMAIN_SAVE_IMAGE_GET_XML_DESC' ->
            <<235:32>>;
        'REMOTE_PROC_DOMAIN_SAVE_IMAGE_DEFINE_XML' ->
            <<236:32>>;
        'REMOTE_PROC_DOMAIN_BLOCK_JOB_ABORT' ->
            <<237:32>>;
        'REMOTE_PROC_DOMAIN_GET_BLOCK_JOB_INFO' ->
            <<238:32>>;
        'REMOTE_PROC_DOMAIN_BLOCK_JOB_SET_SPEED' ->
            <<239:32>>;
        'REMOTE_PROC_DOMAIN_BLOCK_PULL' ->
            <<240:32>>;
        'REMOTE_PROC_DOMAIN_EVENT_BLOCK_JOB' ->
            <<241:32>>;
        'REMOTE_PROC_DOMAIN_MIGRATE_GET_MAX_SPEED' ->
            <<242:32>>;
        'REMOTE_PROC_DOMAIN_BLOCK_STATS_FLAGS' ->
            <<243:32>>;
        'REMOTE_PROC_DOMAIN_SNAPSHOT_GET_PARENT' ->
            <<244:32>>;
        'REMOTE_PROC_DOMAIN_RESET' ->
            <<245:32>>;
        'REMOTE_PROC_DOMAIN_SNAPSHOT_NUM_CHILDREN' ->
            <<246:32>>;
        'REMOTE_PROC_DOMAIN_SNAPSHOT_LIST_CHILDREN_NAMES' ->
            <<247:32>>;
        'REMOTE_PROC_DOMAIN_EVENT_DISK_CHANGE' ->
            <<248:32>>;
        'REMOTE_PROC_DOMAIN_OPEN_GRAPHICS' ->
            <<249:32>>;
        'REMOTE_PROC_NODE_SUSPEND_FOR_DURATION' ->
            <<250:32>>;
        'REMOTE_PROC_DOMAIN_BLOCK_RESIZE' ->
            <<251:32>>;
        'REMOTE_PROC_DOMAIN_SET_BLOCK_IO_TUNE' ->
            <<252:32>>;
        'REMOTE_PROC_DOMAIN_GET_BLOCK_IO_TUNE' ->
            <<253:32>>;
        'REMOTE_PROC_DOMAIN_SET_NUMA_PARAMETERS' ->
            <<254:32>>;
        'REMOTE_PROC_DOMAIN_GET_NUMA_PARAMETERS' ->
            <<255:32>>;
        'REMOTE_PROC_DOMAIN_SET_INTERFACE_PARAMETERS' ->
            <<256:32>>;
        'REMOTE_PROC_DOMAIN_GET_INTERFACE_PARAMETERS' ->
            <<257:32>>;
        'REMOTE_PROC_DOMAIN_SHUTDOWN_FLAGS' ->
            <<258:32>>;
        'REMOTE_PROC_STORAGE_VOL_WIPE_PATTERN' ->
            <<259:32>>;
        'REMOTE_PROC_STORAGE_VOL_RESIZE' ->
            <<260:32>>;
        'REMOTE_PROC_DOMAIN_PM_SUSPEND_FOR_DURATION' ->
            <<261:32>>;
        'REMOTE_PROC_DOMAIN_GET_CPU_STATS' ->
            <<262:32>>;
        'REMOTE_PROC_DOMAIN_GET_DISK_ERRORS' ->
            <<263:32>>;
        'REMOTE_PROC_DOMAIN_SET_METADATA' ->
            <<264:32>>;
        'REMOTE_PROC_DOMAIN_GET_METADATA' ->
            <<265:32>>;
        'REMOTE_PROC_DOMAIN_BLOCK_REBASE' ->
            <<266:32>>;
        'REMOTE_PROC_DOMAIN_PM_WAKEUP' ->
            <<267:32>>;
        'REMOTE_PROC_DOMAIN_EVENT_TRAY_CHANGE' ->
            <<268:32>>;
        'REMOTE_PROC_DOMAIN_EVENT_PMWAKEUP' ->
            <<269:32>>;
        'REMOTE_PROC_DOMAIN_EVENT_PMSUSPEND' ->
            <<270:32>>;
        'REMOTE_PROC_DOMAIN_SNAPSHOT_IS_CURRENT' ->
            <<271:32>>;
        'REMOTE_PROC_DOMAIN_SNAPSHOT_HAS_METADATA' ->
            <<272:32>>;
        'REMOTE_PROC_CONNECT_LIST_ALL_DOMAINS' ->
            <<273:32>>;
        'REMOTE_PROC_DOMAIN_LIST_ALL_SNAPSHOTS' ->
            <<274:32>>;
        'REMOTE_PROC_DOMAIN_SNAPSHOT_LIST_ALL_CHILDREN' ->
            <<275:32>>;
        'REMOTE_PROC_DOMAIN_EVENT_BALLOON_CHANGE' ->
            <<276:32>>;
        'REMOTE_PROC_DOMAIN_GET_HOSTNAME' ->
            <<277:32>>;
        'REMOTE_PROC_DOMAIN_GET_SECURITY_LABEL_LIST' ->
            <<278:32>>;
        'REMOTE_PROC_DOMAIN_PIN_EMULATOR' ->
            <<279:32>>;
        'REMOTE_PROC_DOMAIN_GET_EMULATOR_PIN_INFO' ->
            <<280:32>>;
        'REMOTE_PROC_CONNECT_LIST_ALL_STORAGE_POOLS' ->
            <<281:32>>;
        'REMOTE_PROC_STORAGE_POOL_LIST_ALL_VOLUMES' ->
            <<282:32>>;
        'REMOTE_PROC_CONNECT_LIST_ALL_NETWORKS' ->
            <<283:32>>;
        'REMOTE_PROC_CONNECT_LIST_ALL_INTERFACES' ->
            <<284:32>>;
        'REMOTE_PROC_CONNECT_LIST_ALL_NODE_DEVICES' ->
            <<285:32>>;
        'REMOTE_PROC_CONNECT_LIST_ALL_NWFILTERS' ->
            <<286:32>>;
        'REMOTE_PROC_CONNECT_LIST_ALL_SECRETS' ->
            <<287:32>>;
        'REMOTE_PROC_NODE_SET_MEMORY_PARAMETERS' ->
            <<288:32>>;
        'REMOTE_PROC_NODE_GET_MEMORY_PARAMETERS' ->
            <<289:32>>;
        'REMOTE_PROC_DOMAIN_BLOCK_COMMIT' ->
            <<290:32>>;
        'REMOTE_PROC_NETWORK_UPDATE' ->
            <<291:32>>;
        'REMOTE_PROC_DOMAIN_EVENT_PMSUSPEND_DISK' ->
            <<292:32>>;
        'REMOTE_PROC_NODE_GET_CPU_MAP' ->
            <<293:32>>;
        'REMOTE_PROC_DOMAIN_FSTRIM' ->
            <<294:32>>;
        'REMOTE_PROC_DOMAIN_SEND_PROCESS_SIGNAL' ->
            <<295:32>>;
        'REMOTE_PROC_DOMAIN_OPEN_CHANNEL' ->
            <<296:32>>;
        'REMOTE_PROC_NODE_DEVICE_LOOKUP_SCSI_HOST_BY_WWN' ->
            <<297:32>>;
        'REMOTE_PROC_DOMAIN_GET_JOB_STATS' ->
            <<298:32>>;
        'REMOTE_PROC_DOMAIN_MIGRATE_GET_COMPRESSION_CACHE' ->
            <<299:32>>;
        'REMOTE_PROC_DOMAIN_MIGRATE_SET_COMPRESSION_CACHE' ->
            <<300:32>>;
        'REMOTE_PROC_NODE_DEVICE_DETACH_FLAGS' ->
            <<301:32>>;
        'REMOTE_PROC_DOMAIN_MIGRATE_BEGIN3_PARAMS' ->
            <<302:32>>;
        'REMOTE_PROC_DOMAIN_MIGRATE_PREPARE3_PARAMS' ->
            <<303:32>>;
        'REMOTE_PROC_DOMAIN_MIGRATE_PREPARE_TUNNEL3_PARAMS' ->
            <<304:32>>;
        'REMOTE_PROC_DOMAIN_MIGRATE_PERFORM3_PARAMS' ->
            <<305:32>>;
        'REMOTE_PROC_DOMAIN_MIGRATE_FINISH3_PARAMS' ->
            <<306:32>>;
        'REMOTE_PROC_DOMAIN_MIGRATE_CONFIRM3_PARAMS' ->
            <<307:32>>;
        'REMOTE_PROC_DOMAIN_SET_MEMORY_STATS_PERIOD' ->
            <<308:32>>;
        'REMOTE_PROC_DOMAIN_CREATE_XML_WITH_FILES' ->
            <<309:32>>;
        'REMOTE_PROC_DOMAIN_CREATE_WITH_FILES' ->
            <<310:32>>;
        'REMOTE_PROC_DOMAIN_EVENT_DEVICE_REMOVED' ->
            <<311:32>>;
        'REMOTE_PROC_CONNECT_GET_CPU_MODEL_NAMES' ->
            <<312:32>>;
        'REMOTE_PROC_CONNECT_NETWORK_EVENT_REGISTER_ANY' ->
            <<313:32>>;
        'REMOTE_PROC_CONNECT_NETWORK_EVENT_DEREGISTER_ANY' ->
            <<314:32>>;
        'REMOTE_PROC_NETWORK_EVENT_LIFECYCLE' ->
            <<315:32>>;
        'REMOTE_PROC_CONNECT_DOMAIN_EVENT_CALLBACK_REGISTER_ANY' ->
            <<316:32>>;
        'REMOTE_PROC_CONNECT_DOMAIN_EVENT_CALLBACK_DEREGISTER_ANY' ->
            <<317:32>>;
        'REMOTE_PROC_DOMAIN_EVENT_CALLBACK_LIFECYCLE' ->
            <<318:32>>;
        'REMOTE_PROC_DOMAIN_EVENT_CALLBACK_REBOOT' ->
            <<319:32>>;
        'REMOTE_PROC_DOMAIN_EVENT_CALLBACK_RTC_CHANGE' ->
            <<320:32>>;
        'REMOTE_PROC_DOMAIN_EVENT_CALLBACK_WATCHDOG' ->
            <<321:32>>;
        'REMOTE_PROC_DOMAIN_EVENT_CALLBACK_IO_ERROR' ->
            <<322:32>>;
        'REMOTE_PROC_DOMAIN_EVENT_CALLBACK_GRAPHICS' ->
            <<323:32>>;
        'REMOTE_PROC_DOMAIN_EVENT_CALLBACK_IO_ERROR_REASON' ->
            <<324:32>>;
        'REMOTE_PROC_DOMAIN_EVENT_CALLBACK_CONTROL_ERROR' ->
            <<325:32>>;
        'REMOTE_PROC_DOMAIN_EVENT_CALLBACK_BLOCK_JOB' ->
            <<326:32>>;
        'REMOTE_PROC_DOMAIN_EVENT_CALLBACK_DISK_CHANGE' ->
            <<327:32>>;
        'REMOTE_PROC_DOMAIN_EVENT_CALLBACK_TRAY_CHANGE' ->
            <<328:32>>;
        'REMOTE_PROC_DOMAIN_EVENT_CALLBACK_PMWAKEUP' ->
            <<329:32>>;
        'REMOTE_PROC_DOMAIN_EVENT_CALLBACK_PMSUSPEND' ->
            <<330:32>>;
        'REMOTE_PROC_DOMAIN_EVENT_CALLBACK_BALLOON_CHANGE' ->
            <<331:32>>;
        'REMOTE_PROC_DOMAIN_EVENT_CALLBACK_PMSUSPEND_DISK' ->
            <<332:32>>;
        'REMOTE_PROC_DOMAIN_EVENT_CALLBACK_DEVICE_REMOVED' ->
            <<333:32>>;
        'REMOTE_PROC_DOMAIN_CORE_DUMP_WITH_FORMAT' ->
            <<334:32>>;
        'REMOTE_PROC_DOMAIN_FSFREEZE' ->
            <<335:32>>;
        'REMOTE_PROC_DOMAIN_FSTHAW' ->
            <<336:32>>;
        'REMOTE_PROC_DOMAIN_GET_TIME' ->
            <<337:32>>;
        'REMOTE_PROC_DOMAIN_SET_TIME' ->
            <<338:32>>;
        'REMOTE_PROC_DOMAIN_EVENT_BLOCK_JOB_2' ->
            <<339:32>>;
        'REMOTE_PROC_NODE_GET_FREE_PAGES' ->
            <<340:32>>;
        'REMOTE_PROC_NETWORK_GET_DHCP_LEASES' ->
            <<341:32>>;
        'REMOTE_PROC_CONNECT_GET_DOMAIN_CAPABILITIES' ->
            <<342:32>>;
        'REMOTE_PROC_DOMAIN_OPEN_GRAPHICS_FD' ->
            <<343:32>>;
        'REMOTE_PROC_CONNECT_GET_ALL_DOMAIN_STATS' ->
            <<344:32>>;
        'REMOTE_PROC_DOMAIN_BLOCK_COPY' ->
            <<345:32>>;
        'REMOTE_PROC_DOMAIN_EVENT_CALLBACK_TUNABLE' ->
            <<346:32>>;
        'REMOTE_PROC_NODE_ALLOC_PAGES' ->
            <<347:32>>;
        'REMOTE_PROC_DOMAIN_EVENT_CALLBACK_AGENT_LIFECYCLE' ->
            <<348:32>>;
        'REMOTE_PROC_DOMAIN_GET_FSINFO' ->
            <<349:32>>;
        'REMOTE_PROC_DOMAIN_DEFINE_XML_FLAGS' ->
            <<350:32>>;
        'REMOTE_PROC_DOMAIN_GET_IOTHREAD_INFO' ->
            <<351:32>>;
        'REMOTE_PROC_DOMAIN_PIN_IOTHREAD' ->
            <<352:32>>;
        'REMOTE_PROC_DOMAIN_INTERFACE_ADDRESSES' ->
            <<353:32>>;
        'REMOTE_PROC_DOMAIN_EVENT_CALLBACK_DEVICE_ADDED' ->
            <<354:32>>;
        'REMOTE_PROC_DOMAIN_ADD_IOTHREAD' ->
            <<355:32>>;
        'REMOTE_PROC_DOMAIN_DEL_IOTHREAD' ->
            <<356:32>>;
        'REMOTE_PROC_DOMAIN_SET_USER_PASSWORD' ->
            <<357:32>>;
        'REMOTE_PROC_DOMAIN_RENAME' ->
            <<358:32>>;
        'REMOTE_PROC_DOMAIN_EVENT_CALLBACK_MIGRATION_ITERATION' ->
            <<359:32>>;
        'REMOTE_PROC_CONNECT_REGISTER_CLOSE_CALLBACK' ->
            <<360:32>>;
        'REMOTE_PROC_CONNECT_UNREGISTER_CLOSE_CALLBACK' ->
            <<361:32>>;
        'REMOTE_PROC_CONNECT_EVENT_CONNECTION_CLOSED' ->
            <<362:32>>;
        'REMOTE_PROC_DOMAIN_EVENT_CALLBACK_JOB_COMPLETED' ->
            <<363:32>>;
        'REMOTE_PROC_DOMAIN_MIGRATE_START_POST_COPY' ->
            <<364:32>>;
        'REMOTE_PROC_DOMAIN_GET_PERF_EVENTS' ->
            <<365:32>>;
        'REMOTE_PROC_DOMAIN_SET_PERF_EVENTS' ->
            <<366:32>>;
        'REMOTE_PROC_DOMAIN_EVENT_CALLBACK_DEVICE_REMOVAL_FAILED' ->
            <<367:32>>;
        'REMOTE_PROC_CONNECT_STORAGE_POOL_EVENT_REGISTER_ANY' ->
            <<368:32>>;
        'REMOTE_PROC_CONNECT_STORAGE_POOL_EVENT_DEREGISTER_ANY' ->
            <<369:32>>;
        'REMOTE_PROC_STORAGE_POOL_EVENT_LIFECYCLE' ->
            <<370:32>>;
        'REMOTE_PROC_DOMAIN_GET_GUEST_VCPUS' ->
            <<371:32>>;
        'REMOTE_PROC_DOMAIN_SET_GUEST_VCPUS' ->
            <<372:32>>;
        'REMOTE_PROC_STORAGE_POOL_EVENT_REFRESH' ->
            <<373:32>>;
        'REMOTE_PROC_CONNECT_NODE_DEVICE_EVENT_REGISTER_ANY' ->
            <<374:32>>;
        'REMOTE_PROC_CONNECT_NODE_DEVICE_EVENT_DEREGISTER_ANY' ->
            <<375:32>>;
        'REMOTE_PROC_NODE_DEVICE_EVENT_LIFECYCLE' ->
            <<376:32>>;
        'REMOTE_PROC_NODE_DEVICE_EVENT_UPDATE' ->
            <<377:32>>;
        'REMOTE_PROC_STORAGE_VOL_GET_INFO_FLAGS' ->
            <<378:32>>;
        'REMOTE_PROC_DOMAIN_EVENT_CALLBACK_METADATA_CHANGE' ->
            <<379:32>>;
        'REMOTE_PROC_CONNECT_SECRET_EVENT_REGISTER_ANY' ->
            <<380:32>>;
        'REMOTE_PROC_CONNECT_SECRET_EVENT_DEREGISTER_ANY' ->
            <<381:32>>;
        'REMOTE_PROC_SECRET_EVENT_LIFECYCLE' ->
            <<382:32>>;
        'REMOTE_PROC_SECRET_EVENT_VALUE_CHANGED' ->
            <<383:32>>;
        'REMOTE_PROC_DOMAIN_SET_VCPU' ->
            <<384:32>>;
        'REMOTE_PROC_DOMAIN_EVENT_BLOCK_THRESHOLD' ->
            <<385:32>>;
        'REMOTE_PROC_DOMAIN_SET_BLOCK_THRESHOLD' ->
            <<386:32>>;
        'REMOTE_PROC_DOMAIN_MIGRATE_GET_MAX_DOWNTIME' ->
            <<387:32>>;
        'REMOTE_PROC_DOMAIN_MANAGED_SAVE_GET_XML_DESC' ->
            <<388:32>>;
        'REMOTE_PROC_DOMAIN_MANAGED_SAVE_DEFINE_XML' ->
            <<389:32>>;
        'REMOTE_PROC_DOMAIN_SET_LIFECYCLE_ACTION' ->
            <<390:32>>;
        'REMOTE_PROC_STORAGE_POOL_LOOKUP_BY_TARGET_PATH' ->
            <<391:32>>;
        'REMOTE_PROC_DOMAIN_DETACH_DEVICE_ALIAS' ->
            <<392:32>>;
        'REMOTE_PROC_CONNECT_COMPARE_HYPERVISOR_CPU' ->
            <<393:32>>;
        'REMOTE_PROC_CONNECT_BASELINE_HYPERVISOR_CPU' ->
            <<394:32>>;
        'REMOTE_PROC_NODE_GET_SEV_INFO' ->
            <<395:32>>;
        'REMOTE_PROC_DOMAIN_GET_LAUNCH_SECURITY_INFO' ->
            <<396:32>>;
        'REMOTE_PROC_NWFILTER_BINDING_LOOKUP_BY_PORT_DEV' ->
            <<397:32>>;
        'REMOTE_PROC_NWFILTER_BINDING_GET_XML_DESC' ->
            <<398:32>>;
        'REMOTE_PROC_NWFILTER_BINDING_CREATE_XML' ->
            <<399:32>>;
        'REMOTE_PROC_NWFILTER_BINDING_DELETE' ->
            <<400:32>>;
        'REMOTE_PROC_CONNECT_LIST_ALL_NWFILTER_BINDINGS' ->
            <<401:32>>;
        'REMOTE_PROC_DOMAIN_SET_IOTHREAD_PARAMS' ->
            <<402:32>>;
        'REMOTE_PROC_CONNECT_GET_STORAGE_POOL_CAPABILITIES' ->
            <<403:32>>;
        'REMOTE_PROC_NETWORK_LIST_ALL_PORTS' ->
            <<404:32>>;
        'REMOTE_PROC_NETWORK_PORT_LOOKUP_BY_UUID' ->
            <<405:32>>;
        'REMOTE_PROC_NETWORK_PORT_CREATE_XML' ->
            <<406:32>>;
        'REMOTE_PROC_NETWORK_PORT_GET_PARAMETERS' ->
            <<407:32>>;
        'REMOTE_PROC_NETWORK_PORT_SET_PARAMETERS' ->
            <<408:32>>;
        'REMOTE_PROC_NETWORK_PORT_GET_XML_DESC' ->
            <<409:32>>;
        'REMOTE_PROC_NETWORK_PORT_DELETE' ->
            <<410:32>>;
        'REMOTE_PROC_DOMAIN_CHECKPOINT_CREATE_XML' ->
            <<411:32>>;
        'REMOTE_PROC_DOMAIN_CHECKPOINT_GET_XML_DESC' ->
            <<412:32>>;
        'REMOTE_PROC_DOMAIN_LIST_ALL_CHECKPOINTS' ->
            <<413:32>>;
        'REMOTE_PROC_DOMAIN_CHECKPOINT_LIST_ALL_CHILDREN' ->
            <<414:32>>;
        'REMOTE_PROC_DOMAIN_CHECKPOINT_LOOKUP_BY_NAME' ->
            <<415:32>>;
        'REMOTE_PROC_DOMAIN_CHECKPOINT_GET_PARENT' ->
            <<416:32>>;
        'REMOTE_PROC_DOMAIN_CHECKPOINT_DELETE' ->
            <<417:32>>;
        'REMOTE_PROC_DOMAIN_GET_GUEST_INFO' ->
            <<418:32>>;
        'REMOTE_PROC_CONNECT_SET_IDENTITY' ->
            <<419:32>>;
        'REMOTE_PROC_DOMAIN_AGENT_SET_RESPONSE_TIMEOUT' ->
            <<420:32>>;
        'REMOTE_PROC_DOMAIN_BACKUP_BEGIN' ->
            <<421:32>>;
        'REMOTE_PROC_DOMAIN_BACKUP_GET_XML_DESC' ->
            <<422:32>>
    end.

dec_remote_procedure(_1, _2) ->
    begin
        <<_:_2/binary,_3:32,_/binary>> = _1,
        case _3 of
            1 ->
                {'REMOTE_PROC_CONNECT_OPEN', _2 + 4};
            2 ->
                {'REMOTE_PROC_CONNECT_CLOSE', _2 + 4};
            3 ->
                {'REMOTE_PROC_CONNECT_GET_TYPE', _2 + 4};
            4 ->
                {'REMOTE_PROC_CONNECT_GET_VERSION', _2 + 4};
            5 ->
                {'REMOTE_PROC_CONNECT_GET_MAX_VCPUS', _2 + 4};
            6 ->
                {'REMOTE_PROC_NODE_GET_INFO', _2 + 4};
            7 ->
                {'REMOTE_PROC_CONNECT_GET_CAPABILITIES', _2 + 4};
            8 ->
                {'REMOTE_PROC_DOMAIN_ATTACH_DEVICE', _2 + 4};
            9 ->
                {'REMOTE_PROC_DOMAIN_CREATE', _2 + 4};
            10 ->
                {'REMOTE_PROC_DOMAIN_CREATE_XML', _2 + 4};
            11 ->
                {'REMOTE_PROC_DOMAIN_DEFINE_XML', _2 + 4};
            12 ->
                {'REMOTE_PROC_DOMAIN_DESTROY', _2 + 4};
            13 ->
                {'REMOTE_PROC_DOMAIN_DETACH_DEVICE', _2 + 4};
            14 ->
                {'REMOTE_PROC_DOMAIN_GET_XML_DESC', _2 + 4};
            15 ->
                {'REMOTE_PROC_DOMAIN_GET_AUTOSTART', _2 + 4};
            16 ->
                {'REMOTE_PROC_DOMAIN_GET_INFO', _2 + 4};
            17 ->
                {'REMOTE_PROC_DOMAIN_GET_MAX_MEMORY', _2 + 4};
            18 ->
                {'REMOTE_PROC_DOMAIN_GET_MAX_VCPUS', _2 + 4};
            19 ->
                {'REMOTE_PROC_DOMAIN_GET_OS_TYPE', _2 + 4};
            20 ->
                {'REMOTE_PROC_DOMAIN_GET_VCPUS', _2 + 4};
            21 ->
                {'REMOTE_PROC_CONNECT_LIST_DEFINED_DOMAINS', _2 + 4};
            22 ->
                {'REMOTE_PROC_DOMAIN_LOOKUP_BY_ID', _2 + 4};
            23 ->
                {'REMOTE_PROC_DOMAIN_LOOKUP_BY_NAME', _2 + 4};
            24 ->
                {'REMOTE_PROC_DOMAIN_LOOKUP_BY_UUID', _2 + 4};
            25 ->
                {'REMOTE_PROC_CONNECT_NUM_OF_DEFINED_DOMAINS', _2 + 4};
            26 ->
                {'REMOTE_PROC_DOMAIN_PIN_VCPU', _2 + 4};
            27 ->
                {'REMOTE_PROC_DOMAIN_REBOOT', _2 + 4};
            28 ->
                {'REMOTE_PROC_DOMAIN_RESUME', _2 + 4};
            29 ->
                {'REMOTE_PROC_DOMAIN_SET_AUTOSTART', _2 + 4};
            30 ->
                {'REMOTE_PROC_DOMAIN_SET_MAX_MEMORY', _2 + 4};
            31 ->
                {'REMOTE_PROC_DOMAIN_SET_MEMORY', _2 + 4};
            32 ->
                {'REMOTE_PROC_DOMAIN_SET_VCPUS', _2 + 4};
            33 ->
                {'REMOTE_PROC_DOMAIN_SHUTDOWN', _2 + 4};
            34 ->
                {'REMOTE_PROC_DOMAIN_SUSPEND', _2 + 4};
            35 ->
                {'REMOTE_PROC_DOMAIN_UNDEFINE', _2 + 4};
            36 ->
                {'REMOTE_PROC_CONNECT_LIST_DEFINED_NETWORKS', _2 + 4};
            37 ->
                {'REMOTE_PROC_CONNECT_LIST_DOMAINS', _2 + 4};
            38 ->
                {'REMOTE_PROC_CONNECT_LIST_NETWORKS', _2 + 4};
            39 ->
                {'REMOTE_PROC_NETWORK_CREATE', _2 + 4};
            40 ->
                {'REMOTE_PROC_NETWORK_CREATE_XML', _2 + 4};
            41 ->
                {'REMOTE_PROC_NETWORK_DEFINE_XML', _2 + 4};
            42 ->
                {'REMOTE_PROC_NETWORK_DESTROY', _2 + 4};
            43 ->
                {'REMOTE_PROC_NETWORK_GET_XML_DESC', _2 + 4};
            44 ->
                {'REMOTE_PROC_NETWORK_GET_AUTOSTART', _2 + 4};
            45 ->
                {'REMOTE_PROC_NETWORK_GET_BRIDGE_NAME', _2 + 4};
            46 ->
                {'REMOTE_PROC_NETWORK_LOOKUP_BY_NAME', _2 + 4};
            47 ->
                {'REMOTE_PROC_NETWORK_LOOKUP_BY_UUID', _2 + 4};
            48 ->
                {'REMOTE_PROC_NETWORK_SET_AUTOSTART', _2 + 4};
            49 ->
                {'REMOTE_PROC_NETWORK_UNDEFINE', _2 + 4};
            50 ->
                {'REMOTE_PROC_CONNECT_NUM_OF_DEFINED_NETWORKS', _2 + 4};
            51 ->
                {'REMOTE_PROC_CONNECT_NUM_OF_DOMAINS', _2 + 4};
            52 ->
                {'REMOTE_PROC_CONNECT_NUM_OF_NETWORKS', _2 + 4};
            53 ->
                {'REMOTE_PROC_DOMAIN_CORE_DUMP', _2 + 4};
            54 ->
                {'REMOTE_PROC_DOMAIN_RESTORE', _2 + 4};
            55 ->
                {'REMOTE_PROC_DOMAIN_SAVE', _2 + 4};
            56 ->
                {'REMOTE_PROC_DOMAIN_GET_SCHEDULER_TYPE', _2 + 4};
            57 ->
                {'REMOTE_PROC_DOMAIN_GET_SCHEDULER_PARAMETERS', _2 + 4};
            58 ->
                {'REMOTE_PROC_DOMAIN_SET_SCHEDULER_PARAMETERS', _2 + 4};
            59 ->
                {'REMOTE_PROC_CONNECT_GET_HOSTNAME', _2 + 4};
            60 ->
                {'REMOTE_PROC_CONNECT_SUPPORTS_FEATURE', _2 + 4};
            61 ->
                {'REMOTE_PROC_DOMAIN_MIGRATE_PREPARE', _2 + 4};
            62 ->
                {'REMOTE_PROC_DOMAIN_MIGRATE_PERFORM', _2 + 4};
            63 ->
                {'REMOTE_PROC_DOMAIN_MIGRATE_FINISH', _2 + 4};
            64 ->
                {'REMOTE_PROC_DOMAIN_BLOCK_STATS', _2 + 4};
            65 ->
                {'REMOTE_PROC_DOMAIN_INTERFACE_STATS', _2 + 4};
            66 ->
                {'REMOTE_PROC_AUTH_LIST', _2 + 4};
            67 ->
                {'REMOTE_PROC_AUTH_SASL_INIT', _2 + 4};
            68 ->
                {'REMOTE_PROC_AUTH_SASL_START', _2 + 4};
            69 ->
                {'REMOTE_PROC_AUTH_SASL_STEP', _2 + 4};
            70 ->
                {'REMOTE_PROC_AUTH_POLKIT', _2 + 4};
            71 ->
                {'REMOTE_PROC_CONNECT_NUM_OF_STORAGE_POOLS', _2 + 4};
            72 ->
                {'REMOTE_PROC_CONNECT_LIST_STORAGE_POOLS', _2 + 4};
            73 ->
                {'REMOTE_PROC_CONNECT_NUM_OF_DEFINED_STORAGE_POOLS',
                 _2 + 4};
            74 ->
                {'REMOTE_PROC_CONNECT_LIST_DEFINED_STORAGE_POOLS',
                 _2 + 4};
            75 ->
                {'REMOTE_PROC_CONNECT_FIND_STORAGE_POOL_SOURCES',
                 _2 + 4};
            76 ->
                {'REMOTE_PROC_STORAGE_POOL_CREATE_XML', _2 + 4};
            77 ->
                {'REMOTE_PROC_STORAGE_POOL_DEFINE_XML', _2 + 4};
            78 ->
                {'REMOTE_PROC_STORAGE_POOL_CREATE', _2 + 4};
            79 ->
                {'REMOTE_PROC_STORAGE_POOL_BUILD', _2 + 4};
            80 ->
                {'REMOTE_PROC_STORAGE_POOL_DESTROY', _2 + 4};
            81 ->
                {'REMOTE_PROC_STORAGE_POOL_DELETE', _2 + 4};
            82 ->
                {'REMOTE_PROC_STORAGE_POOL_UNDEFINE', _2 + 4};
            83 ->
                {'REMOTE_PROC_STORAGE_POOL_REFRESH', _2 + 4};
            84 ->
                {'REMOTE_PROC_STORAGE_POOL_LOOKUP_BY_NAME', _2 + 4};
            85 ->
                {'REMOTE_PROC_STORAGE_POOL_LOOKUP_BY_UUID', _2 + 4};
            86 ->
                {'REMOTE_PROC_STORAGE_POOL_LOOKUP_BY_VOLUME', _2 + 4};
            87 ->
                {'REMOTE_PROC_STORAGE_POOL_GET_INFO', _2 + 4};
            88 ->
                {'REMOTE_PROC_STORAGE_POOL_GET_XML_DESC', _2 + 4};
            89 ->
                {'REMOTE_PROC_STORAGE_POOL_GET_AUTOSTART', _2 + 4};
            90 ->
                {'REMOTE_PROC_STORAGE_POOL_SET_AUTOSTART', _2 + 4};
            91 ->
                {'REMOTE_PROC_STORAGE_POOL_NUM_OF_VOLUMES', _2 + 4};
            92 ->
                {'REMOTE_PROC_STORAGE_POOL_LIST_VOLUMES', _2 + 4};
            93 ->
                {'REMOTE_PROC_STORAGE_VOL_CREATE_XML', _2 + 4};
            94 ->
                {'REMOTE_PROC_STORAGE_VOL_DELETE', _2 + 4};
            95 ->
                {'REMOTE_PROC_STORAGE_VOL_LOOKUP_BY_NAME', _2 + 4};
            96 ->
                {'REMOTE_PROC_STORAGE_VOL_LOOKUP_BY_KEY', _2 + 4};
            97 ->
                {'REMOTE_PROC_STORAGE_VOL_LOOKUP_BY_PATH', _2 + 4};
            98 ->
                {'REMOTE_PROC_STORAGE_VOL_GET_INFO', _2 + 4};
            99 ->
                {'REMOTE_PROC_STORAGE_VOL_GET_XML_DESC', _2 + 4};
            100 ->
                {'REMOTE_PROC_STORAGE_VOL_GET_PATH', _2 + 4};
            101 ->
                {'REMOTE_PROC_NODE_GET_CELLS_FREE_MEMORY', _2 + 4};
            102 ->
                {'REMOTE_PROC_NODE_GET_FREE_MEMORY', _2 + 4};
            103 ->
                {'REMOTE_PROC_DOMAIN_BLOCK_PEEK', _2 + 4};
            104 ->
                {'REMOTE_PROC_DOMAIN_MEMORY_PEEK', _2 + 4};
            105 ->
                {'REMOTE_PROC_CONNECT_DOMAIN_EVENT_REGISTER', _2 + 4};
            106 ->
                {'REMOTE_PROC_CONNECT_DOMAIN_EVENT_DEREGISTER', _2 + 4};
            107 ->
                {'REMOTE_PROC_DOMAIN_EVENT_LIFECYCLE', _2 + 4};
            108 ->
                {'REMOTE_PROC_DOMAIN_MIGRATE_PREPARE2', _2 + 4};
            109 ->
                {'REMOTE_PROC_DOMAIN_MIGRATE_FINISH2', _2 + 4};
            110 ->
                {'REMOTE_PROC_CONNECT_GET_URI', _2 + 4};
            111 ->
                {'REMOTE_PROC_NODE_NUM_OF_DEVICES', _2 + 4};
            112 ->
                {'REMOTE_PROC_NODE_LIST_DEVICES', _2 + 4};
            113 ->
                {'REMOTE_PROC_NODE_DEVICE_LOOKUP_BY_NAME', _2 + 4};
            114 ->
                {'REMOTE_PROC_NODE_DEVICE_GET_XML_DESC', _2 + 4};
            115 ->
                {'REMOTE_PROC_NODE_DEVICE_GET_PARENT', _2 + 4};
            116 ->
                {'REMOTE_PROC_NODE_DEVICE_NUM_OF_CAPS', _2 + 4};
            117 ->
                {'REMOTE_PROC_NODE_DEVICE_LIST_CAPS', _2 + 4};
            118 ->
                {'REMOTE_PROC_NODE_DEVICE_DETTACH', _2 + 4};
            119 ->
                {'REMOTE_PROC_NODE_DEVICE_RE_ATTACH', _2 + 4};
            120 ->
                {'REMOTE_PROC_NODE_DEVICE_RESET', _2 + 4};
            121 ->
                {'REMOTE_PROC_DOMAIN_GET_SECURITY_LABEL', _2 + 4};
            122 ->
                {'REMOTE_PROC_NODE_GET_SECURITY_MODEL', _2 + 4};
            123 ->
                {'REMOTE_PROC_NODE_DEVICE_CREATE_XML', _2 + 4};
            124 ->
                {'REMOTE_PROC_NODE_DEVICE_DESTROY', _2 + 4};
            125 ->
                {'REMOTE_PROC_STORAGE_VOL_CREATE_XML_FROM', _2 + 4};
            126 ->
                {'REMOTE_PROC_CONNECT_NUM_OF_INTERFACES', _2 + 4};
            127 ->
                {'REMOTE_PROC_CONNECT_LIST_INTERFACES', _2 + 4};
            128 ->
                {'REMOTE_PROC_INTERFACE_LOOKUP_BY_NAME', _2 + 4};
            129 ->
                {'REMOTE_PROC_INTERFACE_LOOKUP_BY_MAC_STRING', _2 + 4};
            130 ->
                {'REMOTE_PROC_INTERFACE_GET_XML_DESC', _2 + 4};
            131 ->
                {'REMOTE_PROC_INTERFACE_DEFINE_XML', _2 + 4};
            132 ->
                {'REMOTE_PROC_INTERFACE_UNDEFINE', _2 + 4};
            133 ->
                {'REMOTE_PROC_INTERFACE_CREATE', _2 + 4};
            134 ->
                {'REMOTE_PROC_INTERFACE_DESTROY', _2 + 4};
            135 ->
                {'REMOTE_PROC_CONNECT_DOMAIN_XML_FROM_NATIVE', _2 + 4};
            136 ->
                {'REMOTE_PROC_CONNECT_DOMAIN_XML_TO_NATIVE', _2 + 4};
            137 ->
                {'REMOTE_PROC_CONNECT_NUM_OF_DEFINED_INTERFACES',
                 _2 + 4};
            138 ->
                {'REMOTE_PROC_CONNECT_LIST_DEFINED_INTERFACES', _2 + 4};
            139 ->
                {'REMOTE_PROC_CONNECT_NUM_OF_SECRETS', _2 + 4};
            140 ->
                {'REMOTE_PROC_CONNECT_LIST_SECRETS', _2 + 4};
            141 ->
                {'REMOTE_PROC_SECRET_LOOKUP_BY_UUID', _2 + 4};
            142 ->
                {'REMOTE_PROC_SECRET_DEFINE_XML', _2 + 4};
            143 ->
                {'REMOTE_PROC_SECRET_GET_XML_DESC', _2 + 4};
            144 ->
                {'REMOTE_PROC_SECRET_SET_VALUE', _2 + 4};
            145 ->
                {'REMOTE_PROC_SECRET_GET_VALUE', _2 + 4};
            146 ->
                {'REMOTE_PROC_SECRET_UNDEFINE', _2 + 4};
            147 ->
                {'REMOTE_PROC_SECRET_LOOKUP_BY_USAGE', _2 + 4};
            148 ->
                {'REMOTE_PROC_DOMAIN_MIGRATE_PREPARE_TUNNEL', _2 + 4};
            149 ->
                {'REMOTE_PROC_CONNECT_IS_SECURE', _2 + 4};
            150 ->
                {'REMOTE_PROC_DOMAIN_IS_ACTIVE', _2 + 4};
            151 ->
                {'REMOTE_PROC_DOMAIN_IS_PERSISTENT', _2 + 4};
            152 ->
                {'REMOTE_PROC_NETWORK_IS_ACTIVE', _2 + 4};
            153 ->
                {'REMOTE_PROC_NETWORK_IS_PERSISTENT', _2 + 4};
            154 ->
                {'REMOTE_PROC_STORAGE_POOL_IS_ACTIVE', _2 + 4};
            155 ->
                {'REMOTE_PROC_STORAGE_POOL_IS_PERSISTENT', _2 + 4};
            156 ->
                {'REMOTE_PROC_INTERFACE_IS_ACTIVE', _2 + 4};
            157 ->
                {'REMOTE_PROC_CONNECT_GET_LIB_VERSION', _2 + 4};
            158 ->
                {'REMOTE_PROC_CONNECT_COMPARE_CPU', _2 + 4};
            159 ->
                {'REMOTE_PROC_DOMAIN_MEMORY_STATS', _2 + 4};
            160 ->
                {'REMOTE_PROC_DOMAIN_ATTACH_DEVICE_FLAGS', _2 + 4};
            161 ->
                {'REMOTE_PROC_DOMAIN_DETACH_DEVICE_FLAGS', _2 + 4};
            162 ->
                {'REMOTE_PROC_CONNECT_BASELINE_CPU', _2 + 4};
            163 ->
                {'REMOTE_PROC_DOMAIN_GET_JOB_INFO', _2 + 4};
            164 ->
                {'REMOTE_PROC_DOMAIN_ABORT_JOB', _2 + 4};
            165 ->
                {'REMOTE_PROC_STORAGE_VOL_WIPE', _2 + 4};
            166 ->
                {'REMOTE_PROC_DOMAIN_MIGRATE_SET_MAX_DOWNTIME', _2 + 4};
            167 ->
                {'REMOTE_PROC_CONNECT_DOMAIN_EVENT_REGISTER_ANY',
                 _2 + 4};
            168 ->
                {'REMOTE_PROC_CONNECT_DOMAIN_EVENT_DEREGISTER_ANY',
                 _2 + 4};
            169 ->
                {'REMOTE_PROC_DOMAIN_EVENT_REBOOT', _2 + 4};
            170 ->
                {'REMOTE_PROC_DOMAIN_EVENT_RTC_CHANGE', _2 + 4};
            171 ->
                {'REMOTE_PROC_DOMAIN_EVENT_WATCHDOG', _2 + 4};
            172 ->
                {'REMOTE_PROC_DOMAIN_EVENT_IO_ERROR', _2 + 4};
            173 ->
                {'REMOTE_PROC_DOMAIN_EVENT_GRAPHICS', _2 + 4};
            174 ->
                {'REMOTE_PROC_DOMAIN_UPDATE_DEVICE_FLAGS', _2 + 4};
            175 ->
                {'REMOTE_PROC_NWFILTER_LOOKUP_BY_NAME', _2 + 4};
            176 ->
                {'REMOTE_PROC_NWFILTER_LOOKUP_BY_UUID', _2 + 4};
            177 ->
                {'REMOTE_PROC_NWFILTER_GET_XML_DESC', _2 + 4};
            178 ->
                {'REMOTE_PROC_CONNECT_NUM_OF_NWFILTERS', _2 + 4};
            179 ->
                {'REMOTE_PROC_CONNECT_LIST_NWFILTERS', _2 + 4};
            180 ->
                {'REMOTE_PROC_NWFILTER_DEFINE_XML', _2 + 4};
            181 ->
                {'REMOTE_PROC_NWFILTER_UNDEFINE', _2 + 4};
            182 ->
                {'REMOTE_PROC_DOMAIN_MANAGED_SAVE', _2 + 4};
            183 ->
                {'REMOTE_PROC_DOMAIN_HAS_MANAGED_SAVE_IMAGE', _2 + 4};
            184 ->
                {'REMOTE_PROC_DOMAIN_MANAGED_SAVE_REMOVE', _2 + 4};
            185 ->
                {'REMOTE_PROC_DOMAIN_SNAPSHOT_CREATE_XML', _2 + 4};
            186 ->
                {'REMOTE_PROC_DOMAIN_SNAPSHOT_GET_XML_DESC', _2 + 4};
            187 ->
                {'REMOTE_PROC_DOMAIN_SNAPSHOT_NUM', _2 + 4};
            188 ->
                {'REMOTE_PROC_DOMAIN_SNAPSHOT_LIST_NAMES', _2 + 4};
            189 ->
                {'REMOTE_PROC_DOMAIN_SNAPSHOT_LOOKUP_BY_NAME', _2 + 4};
            190 ->
                {'REMOTE_PROC_DOMAIN_HAS_CURRENT_SNAPSHOT', _2 + 4};
            191 ->
                {'REMOTE_PROC_DOMAIN_SNAPSHOT_CURRENT', _2 + 4};
            192 ->
                {'REMOTE_PROC_DOMAIN_REVERT_TO_SNAPSHOT', _2 + 4};
            193 ->
                {'REMOTE_PROC_DOMAIN_SNAPSHOT_DELETE', _2 + 4};
            194 ->
                {'REMOTE_PROC_DOMAIN_GET_BLOCK_INFO', _2 + 4};
            195 ->
                {'REMOTE_PROC_DOMAIN_EVENT_IO_ERROR_REASON', _2 + 4};
            196 ->
                {'REMOTE_PROC_DOMAIN_CREATE_WITH_FLAGS', _2 + 4};
            197 ->
                {'REMOTE_PROC_DOMAIN_SET_MEMORY_PARAMETERS', _2 + 4};
            198 ->
                {'REMOTE_PROC_DOMAIN_GET_MEMORY_PARAMETERS', _2 + 4};
            199 ->
                {'REMOTE_PROC_DOMAIN_SET_VCPUS_FLAGS', _2 + 4};
            200 ->
                {'REMOTE_PROC_DOMAIN_GET_VCPUS_FLAGS', _2 + 4};
            201 ->
                {'REMOTE_PROC_DOMAIN_OPEN_CONSOLE', _2 + 4};
            202 ->
                {'REMOTE_PROC_DOMAIN_IS_UPDATED', _2 + 4};
            203 ->
                {'REMOTE_PROC_CONNECT_GET_SYSINFO', _2 + 4};
            204 ->
                {'REMOTE_PROC_DOMAIN_SET_MEMORY_FLAGS', _2 + 4};
            205 ->
                {'REMOTE_PROC_DOMAIN_SET_BLKIO_PARAMETERS', _2 + 4};
            206 ->
                {'REMOTE_PROC_DOMAIN_GET_BLKIO_PARAMETERS', _2 + 4};
            207 ->
                {'REMOTE_PROC_DOMAIN_MIGRATE_SET_MAX_SPEED', _2 + 4};
            208 ->
                {'REMOTE_PROC_STORAGE_VOL_UPLOAD', _2 + 4};
            209 ->
                {'REMOTE_PROC_STORAGE_VOL_DOWNLOAD', _2 + 4};
            210 ->
                {'REMOTE_PROC_DOMAIN_INJECT_NMI', _2 + 4};
            211 ->
                {'REMOTE_PROC_DOMAIN_SCREENSHOT', _2 + 4};
            212 ->
                {'REMOTE_PROC_DOMAIN_GET_STATE', _2 + 4};
            213 ->
                {'REMOTE_PROC_DOMAIN_MIGRATE_BEGIN3', _2 + 4};
            214 ->
                {'REMOTE_PROC_DOMAIN_MIGRATE_PREPARE3', _2 + 4};
            215 ->
                {'REMOTE_PROC_DOMAIN_MIGRATE_PREPARE_TUNNEL3', _2 + 4};
            216 ->
                {'REMOTE_PROC_DOMAIN_MIGRATE_PERFORM3', _2 + 4};
            217 ->
                {'REMOTE_PROC_DOMAIN_MIGRATE_FINISH3', _2 + 4};
            218 ->
                {'REMOTE_PROC_DOMAIN_MIGRATE_CONFIRM3', _2 + 4};
            219 ->
                {'REMOTE_PROC_DOMAIN_SET_SCHEDULER_PARAMETERS_FLAGS',
                 _2 + 4};
            220 ->
                {'REMOTE_PROC_INTERFACE_CHANGE_BEGIN', _2 + 4};
            221 ->
                {'REMOTE_PROC_INTERFACE_CHANGE_COMMIT', _2 + 4};
            222 ->
                {'REMOTE_PROC_INTERFACE_CHANGE_ROLLBACK', _2 + 4};
            223 ->
                {'REMOTE_PROC_DOMAIN_GET_SCHEDULER_PARAMETERS_FLAGS',
                 _2 + 4};
            224 ->
                {'REMOTE_PROC_DOMAIN_EVENT_CONTROL_ERROR', _2 + 4};
            225 ->
                {'REMOTE_PROC_DOMAIN_PIN_VCPU_FLAGS', _2 + 4};
            226 ->
                {'REMOTE_PROC_DOMAIN_SEND_KEY', _2 + 4};
            227 ->
                {'REMOTE_PROC_NODE_GET_CPU_STATS', _2 + 4};
            228 ->
                {'REMOTE_PROC_NODE_GET_MEMORY_STATS', _2 + 4};
            229 ->
                {'REMOTE_PROC_DOMAIN_GET_CONTROL_INFO', _2 + 4};
            230 ->
                {'REMOTE_PROC_DOMAIN_GET_VCPU_PIN_INFO', _2 + 4};
            231 ->
                {'REMOTE_PROC_DOMAIN_UNDEFINE_FLAGS', _2 + 4};
            232 ->
                {'REMOTE_PROC_DOMAIN_SAVE_FLAGS', _2 + 4};
            233 ->
                {'REMOTE_PROC_DOMAIN_RESTORE_FLAGS', _2 + 4};
            234 ->
                {'REMOTE_PROC_DOMAIN_DESTROY_FLAGS', _2 + 4};
            235 ->
                {'REMOTE_PROC_DOMAIN_SAVE_IMAGE_GET_XML_DESC', _2 + 4};
            236 ->
                {'REMOTE_PROC_DOMAIN_SAVE_IMAGE_DEFINE_XML', _2 + 4};
            237 ->
                {'REMOTE_PROC_DOMAIN_BLOCK_JOB_ABORT', _2 + 4};
            238 ->
                {'REMOTE_PROC_DOMAIN_GET_BLOCK_JOB_INFO', _2 + 4};
            239 ->
                {'REMOTE_PROC_DOMAIN_BLOCK_JOB_SET_SPEED', _2 + 4};
            240 ->
                {'REMOTE_PROC_DOMAIN_BLOCK_PULL', _2 + 4};
            241 ->
                {'REMOTE_PROC_DOMAIN_EVENT_BLOCK_JOB', _2 + 4};
            242 ->
                {'REMOTE_PROC_DOMAIN_MIGRATE_GET_MAX_SPEED', _2 + 4};
            243 ->
                {'REMOTE_PROC_DOMAIN_BLOCK_STATS_FLAGS', _2 + 4};
            244 ->
                {'REMOTE_PROC_DOMAIN_SNAPSHOT_GET_PARENT', _2 + 4};
            245 ->
                {'REMOTE_PROC_DOMAIN_RESET', _2 + 4};
            246 ->
                {'REMOTE_PROC_DOMAIN_SNAPSHOT_NUM_CHILDREN', _2 + 4};
            247 ->
                {'REMOTE_PROC_DOMAIN_SNAPSHOT_LIST_CHILDREN_NAMES',
                 _2 + 4};
            248 ->
                {'REMOTE_PROC_DOMAIN_EVENT_DISK_CHANGE', _2 + 4};
            249 ->
                {'REMOTE_PROC_DOMAIN_OPEN_GRAPHICS', _2 + 4};
            250 ->
                {'REMOTE_PROC_NODE_SUSPEND_FOR_DURATION', _2 + 4};
            251 ->
                {'REMOTE_PROC_DOMAIN_BLOCK_RESIZE', _2 + 4};
            252 ->
                {'REMOTE_PROC_DOMAIN_SET_BLOCK_IO_TUNE', _2 + 4};
            253 ->
                {'REMOTE_PROC_DOMAIN_GET_BLOCK_IO_TUNE', _2 + 4};
            254 ->
                {'REMOTE_PROC_DOMAIN_SET_NUMA_PARAMETERS', _2 + 4};
            255 ->
                {'REMOTE_PROC_DOMAIN_GET_NUMA_PARAMETERS', _2 + 4};
            256 ->
                {'REMOTE_PROC_DOMAIN_SET_INTERFACE_PARAMETERS', _2 + 4};
            257 ->
                {'REMOTE_PROC_DOMAIN_GET_INTERFACE_PARAMETERS', _2 + 4};
            258 ->
                {'REMOTE_PROC_DOMAIN_SHUTDOWN_FLAGS', _2 + 4};
            259 ->
                {'REMOTE_PROC_STORAGE_VOL_WIPE_PATTERN', _2 + 4};
            260 ->
                {'REMOTE_PROC_STORAGE_VOL_RESIZE', _2 + 4};
            261 ->
                {'REMOTE_PROC_DOMAIN_PM_SUSPEND_FOR_DURATION', _2 + 4};
            262 ->
                {'REMOTE_PROC_DOMAIN_GET_CPU_STATS', _2 + 4};
            263 ->
                {'REMOTE_PROC_DOMAIN_GET_DISK_ERRORS', _2 + 4};
            264 ->
                {'REMOTE_PROC_DOMAIN_SET_METADATA', _2 + 4};
            265 ->
                {'REMOTE_PROC_DOMAIN_GET_METADATA', _2 + 4};
            266 ->
                {'REMOTE_PROC_DOMAIN_BLOCK_REBASE', _2 + 4};
            267 ->
                {'REMOTE_PROC_DOMAIN_PM_WAKEUP', _2 + 4};
            268 ->
                {'REMOTE_PROC_DOMAIN_EVENT_TRAY_CHANGE', _2 + 4};
            269 ->
                {'REMOTE_PROC_DOMAIN_EVENT_PMWAKEUP', _2 + 4};
            270 ->
                {'REMOTE_PROC_DOMAIN_EVENT_PMSUSPEND', _2 + 4};
            271 ->
                {'REMOTE_PROC_DOMAIN_SNAPSHOT_IS_CURRENT', _2 + 4};
            272 ->
                {'REMOTE_PROC_DOMAIN_SNAPSHOT_HAS_METADATA', _2 + 4};
            273 ->
                {'REMOTE_PROC_CONNECT_LIST_ALL_DOMAINS', _2 + 4};
            274 ->
                {'REMOTE_PROC_DOMAIN_LIST_ALL_SNAPSHOTS', _2 + 4};
            275 ->
                {'REMOTE_PROC_DOMAIN_SNAPSHOT_LIST_ALL_CHILDREN',
                 _2 + 4};
            276 ->
                {'REMOTE_PROC_DOMAIN_EVENT_BALLOON_CHANGE', _2 + 4};
            277 ->
                {'REMOTE_PROC_DOMAIN_GET_HOSTNAME', _2 + 4};
            278 ->
                {'REMOTE_PROC_DOMAIN_GET_SECURITY_LABEL_LIST', _2 + 4};
            279 ->
                {'REMOTE_PROC_DOMAIN_PIN_EMULATOR', _2 + 4};
            280 ->
                {'REMOTE_PROC_DOMAIN_GET_EMULATOR_PIN_INFO', _2 + 4};
            281 ->
                {'REMOTE_PROC_CONNECT_LIST_ALL_STORAGE_POOLS', _2 + 4};
            282 ->
                {'REMOTE_PROC_STORAGE_POOL_LIST_ALL_VOLUMES', _2 + 4};
            283 ->
                {'REMOTE_PROC_CONNECT_LIST_ALL_NETWORKS', _2 + 4};
            284 ->
                {'REMOTE_PROC_CONNECT_LIST_ALL_INTERFACES', _2 + 4};
            285 ->
                {'REMOTE_PROC_CONNECT_LIST_ALL_NODE_DEVICES', _2 + 4};
            286 ->
                {'REMOTE_PROC_CONNECT_LIST_ALL_NWFILTERS', _2 + 4};
            287 ->
                {'REMOTE_PROC_CONNECT_LIST_ALL_SECRETS', _2 + 4};
            288 ->
                {'REMOTE_PROC_NODE_SET_MEMORY_PARAMETERS', _2 + 4};
            289 ->
                {'REMOTE_PROC_NODE_GET_MEMORY_PARAMETERS', _2 + 4};
            290 ->
                {'REMOTE_PROC_DOMAIN_BLOCK_COMMIT', _2 + 4};
            291 ->
                {'REMOTE_PROC_NETWORK_UPDATE', _2 + 4};
            292 ->
                {'REMOTE_PROC_DOMAIN_EVENT_PMSUSPEND_DISK', _2 + 4};
            293 ->
                {'REMOTE_PROC_NODE_GET_CPU_MAP', _2 + 4};
            294 ->
                {'REMOTE_PROC_DOMAIN_FSTRIM', _2 + 4};
            295 ->
                {'REMOTE_PROC_DOMAIN_SEND_PROCESS_SIGNAL', _2 + 4};
            296 ->
                {'REMOTE_PROC_DOMAIN_OPEN_CHANNEL', _2 + 4};
            297 ->
                {'REMOTE_PROC_NODE_DEVICE_LOOKUP_SCSI_HOST_BY_WWN',
                 _2 + 4};
            298 ->
                {'REMOTE_PROC_DOMAIN_GET_JOB_STATS', _2 + 4};
            299 ->
                {'REMOTE_PROC_DOMAIN_MIGRATE_GET_COMPRESSION_CACHE',
                 _2 + 4};
            300 ->
                {'REMOTE_PROC_DOMAIN_MIGRATE_SET_COMPRESSION_CACHE',
                 _2 + 4};
            301 ->
                {'REMOTE_PROC_NODE_DEVICE_DETACH_FLAGS', _2 + 4};
            302 ->
                {'REMOTE_PROC_DOMAIN_MIGRATE_BEGIN3_PARAMS', _2 + 4};
            303 ->
                {'REMOTE_PROC_DOMAIN_MIGRATE_PREPARE3_PARAMS', _2 + 4};
            304 ->
                {'REMOTE_PROC_DOMAIN_MIGRATE_PREPARE_TUNNEL3_PARAMS',
                 _2 + 4};
            305 ->
                {'REMOTE_PROC_DOMAIN_MIGRATE_PERFORM3_PARAMS', _2 + 4};
            306 ->
                {'REMOTE_PROC_DOMAIN_MIGRATE_FINISH3_PARAMS', _2 + 4};
            307 ->
                {'REMOTE_PROC_DOMAIN_MIGRATE_CONFIRM3_PARAMS', _2 + 4};
            308 ->
                {'REMOTE_PROC_DOMAIN_SET_MEMORY_STATS_PERIOD', _2 + 4};
            309 ->
                {'REMOTE_PROC_DOMAIN_CREATE_XML_WITH_FILES', _2 + 4};
            310 ->
                {'REMOTE_PROC_DOMAIN_CREATE_WITH_FILES', _2 + 4};
            311 ->
                {'REMOTE_PROC_DOMAIN_EVENT_DEVICE_REMOVED', _2 + 4};
            312 ->
                {'REMOTE_PROC_CONNECT_GET_CPU_MODEL_NAMES', _2 + 4};
            313 ->
                {'REMOTE_PROC_CONNECT_NETWORK_EVENT_REGISTER_ANY',
                 _2 + 4};
            314 ->
                {'REMOTE_PROC_CONNECT_NETWORK_EVENT_DEREGISTER_ANY',
                 _2 + 4};
            315 ->
                {'REMOTE_PROC_NETWORK_EVENT_LIFECYCLE', _2 + 4};
            316 ->
                {'REMOTE_PROC_CONNECT_DOMAIN_EVENT_CALLBACK_REGISTER_ANY',
                 _2 + 4};
            317 ->
                {'REMOTE_PROC_CONNECT_DOMAIN_EVENT_CALLBACK_DEREGISTER_ANY',
                 _2 + 4};
            318 ->
                {'REMOTE_PROC_DOMAIN_EVENT_CALLBACK_LIFECYCLE', _2 + 4};
            319 ->
                {'REMOTE_PROC_DOMAIN_EVENT_CALLBACK_REBOOT', _2 + 4};
            320 ->
                {'REMOTE_PROC_DOMAIN_EVENT_CALLBACK_RTC_CHANGE', _2 + 4};
            321 ->
                {'REMOTE_PROC_DOMAIN_EVENT_CALLBACK_WATCHDOG', _2 + 4};
            322 ->
                {'REMOTE_PROC_DOMAIN_EVENT_CALLBACK_IO_ERROR', _2 + 4};
            323 ->
                {'REMOTE_PROC_DOMAIN_EVENT_CALLBACK_GRAPHICS', _2 + 4};
            324 ->
                {'REMOTE_PROC_DOMAIN_EVENT_CALLBACK_IO_ERROR_REASON',
                 _2 + 4};
            325 ->
                {'REMOTE_PROC_DOMAIN_EVENT_CALLBACK_CONTROL_ERROR',
                 _2 + 4};
            326 ->
                {'REMOTE_PROC_DOMAIN_EVENT_CALLBACK_BLOCK_JOB', _2 + 4};
            327 ->
                {'REMOTE_PROC_DOMAIN_EVENT_CALLBACK_DISK_CHANGE',
                 _2 + 4};
            328 ->
                {'REMOTE_PROC_DOMAIN_EVENT_CALLBACK_TRAY_CHANGE',
                 _2 + 4};
            329 ->
                {'REMOTE_PROC_DOMAIN_EVENT_CALLBACK_PMWAKEUP', _2 + 4};
            330 ->
                {'REMOTE_PROC_DOMAIN_EVENT_CALLBACK_PMSUSPEND', _2 + 4};
            331 ->
                {'REMOTE_PROC_DOMAIN_EVENT_CALLBACK_BALLOON_CHANGE',
                 _2 + 4};
            332 ->
                {'REMOTE_PROC_DOMAIN_EVENT_CALLBACK_PMSUSPEND_DISK',
                 _2 + 4};
            333 ->
                {'REMOTE_PROC_DOMAIN_EVENT_CALLBACK_DEVICE_REMOVED',
                 _2 + 4};
            334 ->
                {'REMOTE_PROC_DOMAIN_CORE_DUMP_WITH_FORMAT', _2 + 4};
            335 ->
                {'REMOTE_PROC_DOMAIN_FSFREEZE', _2 + 4};
            336 ->
                {'REMOTE_PROC_DOMAIN_FSTHAW', _2 + 4};
            337 ->
                {'REMOTE_PROC_DOMAIN_GET_TIME', _2 + 4};
            338 ->
                {'REMOTE_PROC_DOMAIN_SET_TIME', _2 + 4};
            339 ->
                {'REMOTE_PROC_DOMAIN_EVENT_BLOCK_JOB_2', _2 + 4};
            340 ->
                {'REMOTE_PROC_NODE_GET_FREE_PAGES', _2 + 4};
            341 ->
                {'REMOTE_PROC_NETWORK_GET_DHCP_LEASES', _2 + 4};
            342 ->
                {'REMOTE_PROC_CONNECT_GET_DOMAIN_CAPABILITIES', _2 + 4};
            343 ->
                {'REMOTE_PROC_DOMAIN_OPEN_GRAPHICS_FD', _2 + 4};
            344 ->
                {'REMOTE_PROC_CONNECT_GET_ALL_DOMAIN_STATS', _2 + 4};
            345 ->
                {'REMOTE_PROC_DOMAIN_BLOCK_COPY', _2 + 4};
            346 ->
                {'REMOTE_PROC_DOMAIN_EVENT_CALLBACK_TUNABLE', _2 + 4};
            347 ->
                {'REMOTE_PROC_NODE_ALLOC_PAGES', _2 + 4};
            348 ->
                {'REMOTE_PROC_DOMAIN_EVENT_CALLBACK_AGENT_LIFECYCLE',
                 _2 + 4};
            349 ->
                {'REMOTE_PROC_DOMAIN_GET_FSINFO', _2 + 4};
            350 ->
                {'REMOTE_PROC_DOMAIN_DEFINE_XML_FLAGS', _2 + 4};
            351 ->
                {'REMOTE_PROC_DOMAIN_GET_IOTHREAD_INFO', _2 + 4};
            352 ->
                {'REMOTE_PROC_DOMAIN_PIN_IOTHREAD', _2 + 4};
            353 ->
                {'REMOTE_PROC_DOMAIN_INTERFACE_ADDRESSES', _2 + 4};
            354 ->
                {'REMOTE_PROC_DOMAIN_EVENT_CALLBACK_DEVICE_ADDED',
                 _2 + 4};
            355 ->
                {'REMOTE_PROC_DOMAIN_ADD_IOTHREAD', _2 + 4};
            356 ->
                {'REMOTE_PROC_DOMAIN_DEL_IOTHREAD', _2 + 4};
            357 ->
                {'REMOTE_PROC_DOMAIN_SET_USER_PASSWORD', _2 + 4};
            358 ->
                {'REMOTE_PROC_DOMAIN_RENAME', _2 + 4};
            359 ->
                {'REMOTE_PROC_DOMAIN_EVENT_CALLBACK_MIGRATION_ITERATION',
                 _2 + 4};
            360 ->
                {'REMOTE_PROC_CONNECT_REGISTER_CLOSE_CALLBACK', _2 + 4};
            361 ->
                {'REMOTE_PROC_CONNECT_UNREGISTER_CLOSE_CALLBACK',
                 _2 + 4};
            362 ->
                {'REMOTE_PROC_CONNECT_EVENT_CONNECTION_CLOSED', _2 + 4};
            363 ->
                {'REMOTE_PROC_DOMAIN_EVENT_CALLBACK_JOB_COMPLETED',
                 _2 + 4};
            364 ->
                {'REMOTE_PROC_DOMAIN_MIGRATE_START_POST_COPY', _2 + 4};
            365 ->
                {'REMOTE_PROC_DOMAIN_GET_PERF_EVENTS', _2 + 4};
            366 ->
                {'REMOTE_PROC_DOMAIN_SET_PERF_EVENTS', _2 + 4};
            367 ->
                {'REMOTE_PROC_DOMAIN_EVENT_CALLBACK_DEVICE_REMOVAL_FAILED',
                 _2 + 4};
            368 ->
                {'REMOTE_PROC_CONNECT_STORAGE_POOL_EVENT_REGISTER_ANY',
                 _2 + 4};
            369 ->
                {'REMOTE_PROC_CONNECT_STORAGE_POOL_EVENT_DEREGISTER_ANY',
                 _2 + 4};
            370 ->
                {'REMOTE_PROC_STORAGE_POOL_EVENT_LIFECYCLE', _2 + 4};
            371 ->
                {'REMOTE_PROC_DOMAIN_GET_GUEST_VCPUS', _2 + 4};
            372 ->
                {'REMOTE_PROC_DOMAIN_SET_GUEST_VCPUS', _2 + 4};
            373 ->
                {'REMOTE_PROC_STORAGE_POOL_EVENT_REFRESH', _2 + 4};
            374 ->
                {'REMOTE_PROC_CONNECT_NODE_DEVICE_EVENT_REGISTER_ANY',
                 _2 + 4};
            375 ->
                {'REMOTE_PROC_CONNECT_NODE_DEVICE_EVENT_DEREGISTER_ANY',
                 _2 + 4};
            376 ->
                {'REMOTE_PROC_NODE_DEVICE_EVENT_LIFECYCLE', _2 + 4};
            377 ->
                {'REMOTE_PROC_NODE_DEVICE_EVENT_UPDATE', _2 + 4};
            378 ->
                {'REMOTE_PROC_STORAGE_VOL_GET_INFO_FLAGS', _2 + 4};
            379 ->
                {'REMOTE_PROC_DOMAIN_EVENT_CALLBACK_METADATA_CHANGE',
                 _2 + 4};
            380 ->
                {'REMOTE_PROC_CONNECT_SECRET_EVENT_REGISTER_ANY',
                 _2 + 4};
            381 ->
                {'REMOTE_PROC_CONNECT_SECRET_EVENT_DEREGISTER_ANY',
                 _2 + 4};
            382 ->
                {'REMOTE_PROC_SECRET_EVENT_LIFECYCLE', _2 + 4};
            383 ->
                {'REMOTE_PROC_SECRET_EVENT_VALUE_CHANGED', _2 + 4};
            384 ->
                {'REMOTE_PROC_DOMAIN_SET_VCPU', _2 + 4};
            385 ->
                {'REMOTE_PROC_DOMAIN_EVENT_BLOCK_THRESHOLD', _2 + 4};
            386 ->
                {'REMOTE_PROC_DOMAIN_SET_BLOCK_THRESHOLD', _2 + 4};
            387 ->
                {'REMOTE_PROC_DOMAIN_MIGRATE_GET_MAX_DOWNTIME', _2 + 4};
            388 ->
                {'REMOTE_PROC_DOMAIN_MANAGED_SAVE_GET_XML_DESC', _2 + 4};
            389 ->
                {'REMOTE_PROC_DOMAIN_MANAGED_SAVE_DEFINE_XML', _2 + 4};
            390 ->
                {'REMOTE_PROC_DOMAIN_SET_LIFECYCLE_ACTION', _2 + 4};
            391 ->
                {'REMOTE_PROC_STORAGE_POOL_LOOKUP_BY_TARGET_PATH',
                 _2 + 4};
            392 ->
                {'REMOTE_PROC_DOMAIN_DETACH_DEVICE_ALIAS', _2 + 4};
            393 ->
                {'REMOTE_PROC_CONNECT_COMPARE_HYPERVISOR_CPU', _2 + 4};
            394 ->
                {'REMOTE_PROC_CONNECT_BASELINE_HYPERVISOR_CPU', _2 + 4};
            395 ->
                {'REMOTE_PROC_NODE_GET_SEV_INFO', _2 + 4};
            396 ->
                {'REMOTE_PROC_DOMAIN_GET_LAUNCH_SECURITY_INFO', _2 + 4};
            397 ->
                {'REMOTE_PROC_NWFILTER_BINDING_LOOKUP_BY_PORT_DEV',
                 _2 + 4};
            398 ->
                {'REMOTE_PROC_NWFILTER_BINDING_GET_XML_DESC', _2 + 4};
            399 ->
                {'REMOTE_PROC_NWFILTER_BINDING_CREATE_XML', _2 + 4};
            400 ->
                {'REMOTE_PROC_NWFILTER_BINDING_DELETE', _2 + 4};
            401 ->
                {'REMOTE_PROC_CONNECT_LIST_ALL_NWFILTER_BINDINGS',
                 _2 + 4};
            402 ->
                {'REMOTE_PROC_DOMAIN_SET_IOTHREAD_PARAMS', _2 + 4};
            403 ->
                {'REMOTE_PROC_CONNECT_GET_STORAGE_POOL_CAPABILITIES',
                 _2 + 4};
            404 ->
                {'REMOTE_PROC_NETWORK_LIST_ALL_PORTS', _2 + 4};
            405 ->
                {'REMOTE_PROC_NETWORK_PORT_LOOKUP_BY_UUID', _2 + 4};
            406 ->
                {'REMOTE_PROC_NETWORK_PORT_CREATE_XML', _2 + 4};
            407 ->
                {'REMOTE_PROC_NETWORK_PORT_GET_PARAMETERS', _2 + 4};
            408 ->
                {'REMOTE_PROC_NETWORK_PORT_SET_PARAMETERS', _2 + 4};
            409 ->
                {'REMOTE_PROC_NETWORK_PORT_GET_XML_DESC', _2 + 4};
            410 ->
                {'REMOTE_PROC_NETWORK_PORT_DELETE', _2 + 4};
            411 ->
                {'REMOTE_PROC_DOMAIN_CHECKPOINT_CREATE_XML', _2 + 4};
            412 ->
                {'REMOTE_PROC_DOMAIN_CHECKPOINT_GET_XML_DESC', _2 + 4};
            413 ->
                {'REMOTE_PROC_DOMAIN_LIST_ALL_CHECKPOINTS', _2 + 4};
            414 ->
                {'REMOTE_PROC_DOMAIN_CHECKPOINT_LIST_ALL_CHILDREN',
                 _2 + 4};
            415 ->
                {'REMOTE_PROC_DOMAIN_CHECKPOINT_LOOKUP_BY_NAME', _2 + 4};
            416 ->
                {'REMOTE_PROC_DOMAIN_CHECKPOINT_GET_PARENT', _2 + 4};
            417 ->
                {'REMOTE_PROC_DOMAIN_CHECKPOINT_DELETE', _2 + 4};
            418 ->
                {'REMOTE_PROC_DOMAIN_GET_GUEST_INFO', _2 + 4};
            419 ->
                {'REMOTE_PROC_CONNECT_SET_IDENTITY', _2 + 4};
            420 ->
                {'REMOTE_PROC_DOMAIN_AGENT_SET_RESPONSE_TIMEOUT',
                 _2 + 4};
            421 ->
                {'REMOTE_PROC_DOMAIN_BACKUP_BEGIN', _2 + 4};
            422 ->
                {'REMOTE_PROC_DOMAIN_BACKUP_GET_XML_DESC', _2 + 4}
        end
    end.

dec_remote_procedure_i2a(_4) ->
    case _4 of
        1 ->
            'REMOTE_PROC_CONNECT_OPEN';
        2 ->
            'REMOTE_PROC_CONNECT_CLOSE';
        3 ->
            'REMOTE_PROC_CONNECT_GET_TYPE';
        4 ->
            'REMOTE_PROC_CONNECT_GET_VERSION';
        5 ->
            'REMOTE_PROC_CONNECT_GET_MAX_VCPUS';
        6 ->
            'REMOTE_PROC_NODE_GET_INFO';
        7 ->
            'REMOTE_PROC_CONNECT_GET_CAPABILITIES';
        8 ->
            'REMOTE_PROC_DOMAIN_ATTACH_DEVICE';
        9 ->
            'REMOTE_PROC_DOMAIN_CREATE';
        10 ->
            'REMOTE_PROC_DOMAIN_CREATE_XML';
        11 ->
            'REMOTE_PROC_DOMAIN_DEFINE_XML';
        12 ->
            'REMOTE_PROC_DOMAIN_DESTROY';
        13 ->
            'REMOTE_PROC_DOMAIN_DETACH_DEVICE';
        14 ->
            'REMOTE_PROC_DOMAIN_GET_XML_DESC';
        15 ->
            'REMOTE_PROC_DOMAIN_GET_AUTOSTART';
        16 ->
            'REMOTE_PROC_DOMAIN_GET_INFO';
        17 ->
            'REMOTE_PROC_DOMAIN_GET_MAX_MEMORY';
        18 ->
            'REMOTE_PROC_DOMAIN_GET_MAX_VCPUS';
        19 ->
            'REMOTE_PROC_DOMAIN_GET_OS_TYPE';
        20 ->
            'REMOTE_PROC_DOMAIN_GET_VCPUS';
        21 ->
            'REMOTE_PROC_CONNECT_LIST_DEFINED_DOMAINS';
        22 ->
            'REMOTE_PROC_DOMAIN_LOOKUP_BY_ID';
        23 ->
            'REMOTE_PROC_DOMAIN_LOOKUP_BY_NAME';
        24 ->
            'REMOTE_PROC_DOMAIN_LOOKUP_BY_UUID';
        25 ->
            'REMOTE_PROC_CONNECT_NUM_OF_DEFINED_DOMAINS';
        26 ->
            'REMOTE_PROC_DOMAIN_PIN_VCPU';
        27 ->
            'REMOTE_PROC_DOMAIN_REBOOT';
        28 ->
            'REMOTE_PROC_DOMAIN_RESUME';
        29 ->
            'REMOTE_PROC_DOMAIN_SET_AUTOSTART';
        30 ->
            'REMOTE_PROC_DOMAIN_SET_MAX_MEMORY';
        31 ->
            'REMOTE_PROC_DOMAIN_SET_MEMORY';
        32 ->
            'REMOTE_PROC_DOMAIN_SET_VCPUS';
        33 ->
            'REMOTE_PROC_DOMAIN_SHUTDOWN';
        34 ->
            'REMOTE_PROC_DOMAIN_SUSPEND';
        35 ->
            'REMOTE_PROC_DOMAIN_UNDEFINE';
        36 ->
            'REMOTE_PROC_CONNECT_LIST_DEFINED_NETWORKS';
        37 ->
            'REMOTE_PROC_CONNECT_LIST_DOMAINS';
        38 ->
            'REMOTE_PROC_CONNECT_LIST_NETWORKS';
        39 ->
            'REMOTE_PROC_NETWORK_CREATE';
        40 ->
            'REMOTE_PROC_NETWORK_CREATE_XML';
        41 ->
            'REMOTE_PROC_NETWORK_DEFINE_XML';
        42 ->
            'REMOTE_PROC_NETWORK_DESTROY';
        43 ->
            'REMOTE_PROC_NETWORK_GET_XML_DESC';
        44 ->
            'REMOTE_PROC_NETWORK_GET_AUTOSTART';
        45 ->
            'REMOTE_PROC_NETWORK_GET_BRIDGE_NAME';
        46 ->
            'REMOTE_PROC_NETWORK_LOOKUP_BY_NAME';
        47 ->
            'REMOTE_PROC_NETWORK_LOOKUP_BY_UUID';
        48 ->
            'REMOTE_PROC_NETWORK_SET_AUTOSTART';
        49 ->
            'REMOTE_PROC_NETWORK_UNDEFINE';
        50 ->
            'REMOTE_PROC_CONNECT_NUM_OF_DEFINED_NETWORKS';
        51 ->
            'REMOTE_PROC_CONNECT_NUM_OF_DOMAINS';
        52 ->
            'REMOTE_PROC_CONNECT_NUM_OF_NETWORKS';
        53 ->
            'REMOTE_PROC_DOMAIN_CORE_DUMP';
        54 ->
            'REMOTE_PROC_DOMAIN_RESTORE';
        55 ->
            'REMOTE_PROC_DOMAIN_SAVE';
        56 ->
            'REMOTE_PROC_DOMAIN_GET_SCHEDULER_TYPE';
        57 ->
            'REMOTE_PROC_DOMAIN_GET_SCHEDULER_PARAMETERS';
        58 ->
            'REMOTE_PROC_DOMAIN_SET_SCHEDULER_PARAMETERS';
        59 ->
            'REMOTE_PROC_CONNECT_GET_HOSTNAME';
        60 ->
            'REMOTE_PROC_CONNECT_SUPPORTS_FEATURE';
        61 ->
            'REMOTE_PROC_DOMAIN_MIGRATE_PREPARE';
        62 ->
            'REMOTE_PROC_DOMAIN_MIGRATE_PERFORM';
        63 ->
            'REMOTE_PROC_DOMAIN_MIGRATE_FINISH';
        64 ->
            'REMOTE_PROC_DOMAIN_BLOCK_STATS';
        65 ->
            'REMOTE_PROC_DOMAIN_INTERFACE_STATS';
        66 ->
            'REMOTE_PROC_AUTH_LIST';
        67 ->
            'REMOTE_PROC_AUTH_SASL_INIT';
        68 ->
            'REMOTE_PROC_AUTH_SASL_START';
        69 ->
            'REMOTE_PROC_AUTH_SASL_STEP';
        70 ->
            'REMOTE_PROC_AUTH_POLKIT';
        71 ->
            'REMOTE_PROC_CONNECT_NUM_OF_STORAGE_POOLS';
        72 ->
            'REMOTE_PROC_CONNECT_LIST_STORAGE_POOLS';
        73 ->
            'REMOTE_PROC_CONNECT_NUM_OF_DEFINED_STORAGE_POOLS';
        74 ->
            'REMOTE_PROC_CONNECT_LIST_DEFINED_STORAGE_POOLS';
        75 ->
            'REMOTE_PROC_CONNECT_FIND_STORAGE_POOL_SOURCES';
        76 ->
            'REMOTE_PROC_STORAGE_POOL_CREATE_XML';
        77 ->
            'REMOTE_PROC_STORAGE_POOL_DEFINE_XML';
        78 ->
            'REMOTE_PROC_STORAGE_POOL_CREATE';
        79 ->
            'REMOTE_PROC_STORAGE_POOL_BUILD';
        80 ->
            'REMOTE_PROC_STORAGE_POOL_DESTROY';
        81 ->
            'REMOTE_PROC_STORAGE_POOL_DELETE';
        82 ->
            'REMOTE_PROC_STORAGE_POOL_UNDEFINE';
        83 ->
            'REMOTE_PROC_STORAGE_POOL_REFRESH';
        84 ->
            'REMOTE_PROC_STORAGE_POOL_LOOKUP_BY_NAME';
        85 ->
            'REMOTE_PROC_STORAGE_POOL_LOOKUP_BY_UUID';
        86 ->
            'REMOTE_PROC_STORAGE_POOL_LOOKUP_BY_VOLUME';
        87 ->
            'REMOTE_PROC_STORAGE_POOL_GET_INFO';
        88 ->
            'REMOTE_PROC_STORAGE_POOL_GET_XML_DESC';
        89 ->
            'REMOTE_PROC_STORAGE_POOL_GET_AUTOSTART';
        90 ->
            'REMOTE_PROC_STORAGE_POOL_SET_AUTOSTART';
        91 ->
            'REMOTE_PROC_STORAGE_POOL_NUM_OF_VOLUMES';
        92 ->
            'REMOTE_PROC_STORAGE_POOL_LIST_VOLUMES';
        93 ->
            'REMOTE_PROC_STORAGE_VOL_CREATE_XML';
        94 ->
            'REMOTE_PROC_STORAGE_VOL_DELETE';
        95 ->
            'REMOTE_PROC_STORAGE_VOL_LOOKUP_BY_NAME';
        96 ->
            'REMOTE_PROC_STORAGE_VOL_LOOKUP_BY_KEY';
        97 ->
            'REMOTE_PROC_STORAGE_VOL_LOOKUP_BY_PATH';
        98 ->
            'REMOTE_PROC_STORAGE_VOL_GET_INFO';
        99 ->
            'REMOTE_PROC_STORAGE_VOL_GET_XML_DESC';
        100 ->
            'REMOTE_PROC_STORAGE_VOL_GET_PATH';
        101 ->
            'REMOTE_PROC_NODE_GET_CELLS_FREE_MEMORY';
        102 ->
            'REMOTE_PROC_NODE_GET_FREE_MEMORY';
        103 ->
            'REMOTE_PROC_DOMAIN_BLOCK_PEEK';
        104 ->
            'REMOTE_PROC_DOMAIN_MEMORY_PEEK';
        105 ->
            'REMOTE_PROC_CONNECT_DOMAIN_EVENT_REGISTER';
        106 ->
            'REMOTE_PROC_CONNECT_DOMAIN_EVENT_DEREGISTER';
        107 ->
            'REMOTE_PROC_DOMAIN_EVENT_LIFECYCLE';
        108 ->
            'REMOTE_PROC_DOMAIN_MIGRATE_PREPARE2';
        109 ->
            'REMOTE_PROC_DOMAIN_MIGRATE_FINISH2';
        110 ->
            'REMOTE_PROC_CONNECT_GET_URI';
        111 ->
            'REMOTE_PROC_NODE_NUM_OF_DEVICES';
        112 ->
            'REMOTE_PROC_NODE_LIST_DEVICES';
        113 ->
            'REMOTE_PROC_NODE_DEVICE_LOOKUP_BY_NAME';
        114 ->
            'REMOTE_PROC_NODE_DEVICE_GET_XML_DESC';
        115 ->
            'REMOTE_PROC_NODE_DEVICE_GET_PARENT';
        116 ->
            'REMOTE_PROC_NODE_DEVICE_NUM_OF_CAPS';
        117 ->
            'REMOTE_PROC_NODE_DEVICE_LIST_CAPS';
        118 ->
            'REMOTE_PROC_NODE_DEVICE_DETTACH';
        119 ->
            'REMOTE_PROC_NODE_DEVICE_RE_ATTACH';
        120 ->
            'REMOTE_PROC_NODE_DEVICE_RESET';
        121 ->
            'REMOTE_PROC_DOMAIN_GET_SECURITY_LABEL';
        122 ->
            'REMOTE_PROC_NODE_GET_SECURITY_MODEL';
        123 ->
            'REMOTE_PROC_NODE_DEVICE_CREATE_XML';
        124 ->
            'REMOTE_PROC_NODE_DEVICE_DESTROY';
        125 ->
            'REMOTE_PROC_STORAGE_VOL_CREATE_XML_FROM';
        126 ->
            'REMOTE_PROC_CONNECT_NUM_OF_INTERFACES';
        127 ->
            'REMOTE_PROC_CONNECT_LIST_INTERFACES';
        128 ->
            'REMOTE_PROC_INTERFACE_LOOKUP_BY_NAME';
        129 ->
            'REMOTE_PROC_INTERFACE_LOOKUP_BY_MAC_STRING';
        130 ->
            'REMOTE_PROC_INTERFACE_GET_XML_DESC';
        131 ->
            'REMOTE_PROC_INTERFACE_DEFINE_XML';
        132 ->
            'REMOTE_PROC_INTERFACE_UNDEFINE';
        133 ->
            'REMOTE_PROC_INTERFACE_CREATE';
        134 ->
            'REMOTE_PROC_INTERFACE_DESTROY';
        135 ->
            'REMOTE_PROC_CONNECT_DOMAIN_XML_FROM_NATIVE';
        136 ->
            'REMOTE_PROC_CONNECT_DOMAIN_XML_TO_NATIVE';
        137 ->
            'REMOTE_PROC_CONNECT_NUM_OF_DEFINED_INTERFACES';
        138 ->
            'REMOTE_PROC_CONNECT_LIST_DEFINED_INTERFACES';
        139 ->
            'REMOTE_PROC_CONNECT_NUM_OF_SECRETS';
        140 ->
            'REMOTE_PROC_CONNECT_LIST_SECRETS';
        141 ->
            'REMOTE_PROC_SECRET_LOOKUP_BY_UUID';
        142 ->
            'REMOTE_PROC_SECRET_DEFINE_XML';
        143 ->
            'REMOTE_PROC_SECRET_GET_XML_DESC';
        144 ->
            'REMOTE_PROC_SECRET_SET_VALUE';
        145 ->
            'REMOTE_PROC_SECRET_GET_VALUE';
        146 ->
            'REMOTE_PROC_SECRET_UNDEFINE';
        147 ->
            'REMOTE_PROC_SECRET_LOOKUP_BY_USAGE';
        148 ->
            'REMOTE_PROC_DOMAIN_MIGRATE_PREPARE_TUNNEL';
        149 ->
            'REMOTE_PROC_CONNECT_IS_SECURE';
        150 ->
            'REMOTE_PROC_DOMAIN_IS_ACTIVE';
        151 ->
            'REMOTE_PROC_DOMAIN_IS_PERSISTENT';
        152 ->
            'REMOTE_PROC_NETWORK_IS_ACTIVE';
        153 ->
            'REMOTE_PROC_NETWORK_IS_PERSISTENT';
        154 ->
            'REMOTE_PROC_STORAGE_POOL_IS_ACTIVE';
        155 ->
            'REMOTE_PROC_STORAGE_POOL_IS_PERSISTENT';
        156 ->
            'REMOTE_PROC_INTERFACE_IS_ACTIVE';
        157 ->
            'REMOTE_PROC_CONNECT_GET_LIB_VERSION';
        158 ->
            'REMOTE_PROC_CONNECT_COMPARE_CPU';
        159 ->
            'REMOTE_PROC_DOMAIN_MEMORY_STATS';
        160 ->
            'REMOTE_PROC_DOMAIN_ATTACH_DEVICE_FLAGS';
        161 ->
            'REMOTE_PROC_DOMAIN_DETACH_DEVICE_FLAGS';
        162 ->
            'REMOTE_PROC_CONNECT_BASELINE_CPU';
        163 ->
            'REMOTE_PROC_DOMAIN_GET_JOB_INFO';
        164 ->
            'REMOTE_PROC_DOMAIN_ABORT_JOB';
        165 ->
            'REMOTE_PROC_STORAGE_VOL_WIPE';
        166 ->
            'REMOTE_PROC_DOMAIN_MIGRATE_SET_MAX_DOWNTIME';
        167 ->
            'REMOTE_PROC_CONNECT_DOMAIN_EVENT_REGISTER_ANY';
        168 ->
            'REMOTE_PROC_CONNECT_DOMAIN_EVENT_DEREGISTER_ANY';
        169 ->
            'REMOTE_PROC_DOMAIN_EVENT_REBOOT';
        170 ->
            'REMOTE_PROC_DOMAIN_EVENT_RTC_CHANGE';
        171 ->
            'REMOTE_PROC_DOMAIN_EVENT_WATCHDOG';
        172 ->
            'REMOTE_PROC_DOMAIN_EVENT_IO_ERROR';
        173 ->
            'REMOTE_PROC_DOMAIN_EVENT_GRAPHICS';
        174 ->
            'REMOTE_PROC_DOMAIN_UPDATE_DEVICE_FLAGS';
        175 ->
            'REMOTE_PROC_NWFILTER_LOOKUP_BY_NAME';
        176 ->
            'REMOTE_PROC_NWFILTER_LOOKUP_BY_UUID';
        177 ->
            'REMOTE_PROC_NWFILTER_GET_XML_DESC';
        178 ->
            'REMOTE_PROC_CONNECT_NUM_OF_NWFILTERS';
        179 ->
            'REMOTE_PROC_CONNECT_LIST_NWFILTERS';
        180 ->
            'REMOTE_PROC_NWFILTER_DEFINE_XML';
        181 ->
            'REMOTE_PROC_NWFILTER_UNDEFINE';
        182 ->
            'REMOTE_PROC_DOMAIN_MANAGED_SAVE';
        183 ->
            'REMOTE_PROC_DOMAIN_HAS_MANAGED_SAVE_IMAGE';
        184 ->
            'REMOTE_PROC_DOMAIN_MANAGED_SAVE_REMOVE';
        185 ->
            'REMOTE_PROC_DOMAIN_SNAPSHOT_CREATE_XML';
        186 ->
            'REMOTE_PROC_DOMAIN_SNAPSHOT_GET_XML_DESC';
        187 ->
            'REMOTE_PROC_DOMAIN_SNAPSHOT_NUM';
        188 ->
            'REMOTE_PROC_DOMAIN_SNAPSHOT_LIST_NAMES';
        189 ->
            'REMOTE_PROC_DOMAIN_SNAPSHOT_LOOKUP_BY_NAME';
        190 ->
            'REMOTE_PROC_DOMAIN_HAS_CURRENT_SNAPSHOT';
        191 ->
            'REMOTE_PROC_DOMAIN_SNAPSHOT_CURRENT';
        192 ->
            'REMOTE_PROC_DOMAIN_REVERT_TO_SNAPSHOT';
        193 ->
            'REMOTE_PROC_DOMAIN_SNAPSHOT_DELETE';
        194 ->
            'REMOTE_PROC_DOMAIN_GET_BLOCK_INFO';
        195 ->
            'REMOTE_PROC_DOMAIN_EVENT_IO_ERROR_REASON';
        196 ->
            'REMOTE_PROC_DOMAIN_CREATE_WITH_FLAGS';
        197 ->
            'REMOTE_PROC_DOMAIN_SET_MEMORY_PARAMETERS';
        198 ->
            'REMOTE_PROC_DOMAIN_GET_MEMORY_PARAMETERS';
        199 ->
            'REMOTE_PROC_DOMAIN_SET_VCPUS_FLAGS';
        200 ->
            'REMOTE_PROC_DOMAIN_GET_VCPUS_FLAGS';
        201 ->
            'REMOTE_PROC_DOMAIN_OPEN_CONSOLE';
        202 ->
            'REMOTE_PROC_DOMAIN_IS_UPDATED';
        203 ->
            'REMOTE_PROC_CONNECT_GET_SYSINFO';
        204 ->
            'REMOTE_PROC_DOMAIN_SET_MEMORY_FLAGS';
        205 ->
            'REMOTE_PROC_DOMAIN_SET_BLKIO_PARAMETERS';
        206 ->
            'REMOTE_PROC_DOMAIN_GET_BLKIO_PARAMETERS';
        207 ->
            'REMOTE_PROC_DOMAIN_MIGRATE_SET_MAX_SPEED';
        208 ->
            'REMOTE_PROC_STORAGE_VOL_UPLOAD';
        209 ->
            'REMOTE_PROC_STORAGE_VOL_DOWNLOAD';
        210 ->
            'REMOTE_PROC_DOMAIN_INJECT_NMI';
        211 ->
            'REMOTE_PROC_DOMAIN_SCREENSHOT';
        212 ->
            'REMOTE_PROC_DOMAIN_GET_STATE';
        213 ->
            'REMOTE_PROC_DOMAIN_MIGRATE_BEGIN3';
        214 ->
            'REMOTE_PROC_DOMAIN_MIGRATE_PREPARE3';
        215 ->
            'REMOTE_PROC_DOMAIN_MIGRATE_PREPARE_TUNNEL3';
        216 ->
            'REMOTE_PROC_DOMAIN_MIGRATE_PERFORM3';
        217 ->
            'REMOTE_PROC_DOMAIN_MIGRATE_FINISH3';
        218 ->
            'REMOTE_PROC_DOMAIN_MIGRATE_CONFIRM3';
        219 ->
            'REMOTE_PROC_DOMAIN_SET_SCHEDULER_PARAMETERS_FLAGS';
        220 ->
            'REMOTE_PROC_INTERFACE_CHANGE_BEGIN';
        221 ->
            'REMOTE_PROC_INTERFACE_CHANGE_COMMIT';
        222 ->
            'REMOTE_PROC_INTERFACE_CHANGE_ROLLBACK';
        223 ->
            'REMOTE_PROC_DOMAIN_GET_SCHEDULER_PARAMETERS_FLAGS';
        224 ->
            'REMOTE_PROC_DOMAIN_EVENT_CONTROL_ERROR';
        225 ->
            'REMOTE_PROC_DOMAIN_PIN_VCPU_FLAGS';
        226 ->
            'REMOTE_PROC_DOMAIN_SEND_KEY';
        227 ->
            'REMOTE_PROC_NODE_GET_CPU_STATS';
        228 ->
            'REMOTE_PROC_NODE_GET_MEMORY_STATS';
        229 ->
            'REMOTE_PROC_DOMAIN_GET_CONTROL_INFO';
        230 ->
            'REMOTE_PROC_DOMAIN_GET_VCPU_PIN_INFO';
        231 ->
            'REMOTE_PROC_DOMAIN_UNDEFINE_FLAGS';
        232 ->
            'REMOTE_PROC_DOMAIN_SAVE_FLAGS';
        233 ->
            'REMOTE_PROC_DOMAIN_RESTORE_FLAGS';
        234 ->
            'REMOTE_PROC_DOMAIN_DESTROY_FLAGS';
        235 ->
            'REMOTE_PROC_DOMAIN_SAVE_IMAGE_GET_XML_DESC';
        236 ->
            'REMOTE_PROC_DOMAIN_SAVE_IMAGE_DEFINE_XML';
        237 ->
            'REMOTE_PROC_DOMAIN_BLOCK_JOB_ABORT';
        238 ->
            'REMOTE_PROC_DOMAIN_GET_BLOCK_JOB_INFO';
        239 ->
            'REMOTE_PROC_DOMAIN_BLOCK_JOB_SET_SPEED';
        240 ->
            'REMOTE_PROC_DOMAIN_BLOCK_PULL';
        241 ->
            'REMOTE_PROC_DOMAIN_EVENT_BLOCK_JOB';
        242 ->
            'REMOTE_PROC_DOMAIN_MIGRATE_GET_MAX_SPEED';
        243 ->
            'REMOTE_PROC_DOMAIN_BLOCK_STATS_FLAGS';
        244 ->
            'REMOTE_PROC_DOMAIN_SNAPSHOT_GET_PARENT';
        245 ->
            'REMOTE_PROC_DOMAIN_RESET';
        246 ->
            'REMOTE_PROC_DOMAIN_SNAPSHOT_NUM_CHILDREN';
        247 ->
            'REMOTE_PROC_DOMAIN_SNAPSHOT_LIST_CHILDREN_NAMES';
        248 ->
            'REMOTE_PROC_DOMAIN_EVENT_DISK_CHANGE';
        249 ->
            'REMOTE_PROC_DOMAIN_OPEN_GRAPHICS';
        250 ->
            'REMOTE_PROC_NODE_SUSPEND_FOR_DURATION';
        251 ->
            'REMOTE_PROC_DOMAIN_BLOCK_RESIZE';
        252 ->
            'REMOTE_PROC_DOMAIN_SET_BLOCK_IO_TUNE';
        253 ->
            'REMOTE_PROC_DOMAIN_GET_BLOCK_IO_TUNE';
        254 ->
            'REMOTE_PROC_DOMAIN_SET_NUMA_PARAMETERS';
        255 ->
            'REMOTE_PROC_DOMAIN_GET_NUMA_PARAMETERS';
        256 ->
            'REMOTE_PROC_DOMAIN_SET_INTERFACE_PARAMETERS';
        257 ->
            'REMOTE_PROC_DOMAIN_GET_INTERFACE_PARAMETERS';
        258 ->
            'REMOTE_PROC_DOMAIN_SHUTDOWN_FLAGS';
        259 ->
            'REMOTE_PROC_STORAGE_VOL_WIPE_PATTERN';
        260 ->
            'REMOTE_PROC_STORAGE_VOL_RESIZE';
        261 ->
            'REMOTE_PROC_DOMAIN_PM_SUSPEND_FOR_DURATION';
        262 ->
            'REMOTE_PROC_DOMAIN_GET_CPU_STATS';
        263 ->
            'REMOTE_PROC_DOMAIN_GET_DISK_ERRORS';
        264 ->
            'REMOTE_PROC_DOMAIN_SET_METADATA';
        265 ->
            'REMOTE_PROC_DOMAIN_GET_METADATA';
        266 ->
            'REMOTE_PROC_DOMAIN_BLOCK_REBASE';
        267 ->
            'REMOTE_PROC_DOMAIN_PM_WAKEUP';
        268 ->
            'REMOTE_PROC_DOMAIN_EVENT_TRAY_CHANGE';
        269 ->
            'REMOTE_PROC_DOMAIN_EVENT_PMWAKEUP';
        270 ->
            'REMOTE_PROC_DOMAIN_EVENT_PMSUSPEND';
        271 ->
            'REMOTE_PROC_DOMAIN_SNAPSHOT_IS_CURRENT';
        272 ->
            'REMOTE_PROC_DOMAIN_SNAPSHOT_HAS_METADATA';
        273 ->
            'REMOTE_PROC_CONNECT_LIST_ALL_DOMAINS';
        274 ->
            'REMOTE_PROC_DOMAIN_LIST_ALL_SNAPSHOTS';
        275 ->
            'REMOTE_PROC_DOMAIN_SNAPSHOT_LIST_ALL_CHILDREN';
        276 ->
            'REMOTE_PROC_DOMAIN_EVENT_BALLOON_CHANGE';
        277 ->
            'REMOTE_PROC_DOMAIN_GET_HOSTNAME';
        278 ->
            'REMOTE_PROC_DOMAIN_GET_SECURITY_LABEL_LIST';
        279 ->
            'REMOTE_PROC_DOMAIN_PIN_EMULATOR';
        280 ->
            'REMOTE_PROC_DOMAIN_GET_EMULATOR_PIN_INFO';
        281 ->
            'REMOTE_PROC_CONNECT_LIST_ALL_STORAGE_POOLS';
        282 ->
            'REMOTE_PROC_STORAGE_POOL_LIST_ALL_VOLUMES';
        283 ->
            'REMOTE_PROC_CONNECT_LIST_ALL_NETWORKS';
        284 ->
            'REMOTE_PROC_CONNECT_LIST_ALL_INTERFACES';
        285 ->
            'REMOTE_PROC_CONNECT_LIST_ALL_NODE_DEVICES';
        286 ->
            'REMOTE_PROC_CONNECT_LIST_ALL_NWFILTERS';
        287 ->
            'REMOTE_PROC_CONNECT_LIST_ALL_SECRETS';
        288 ->
            'REMOTE_PROC_NODE_SET_MEMORY_PARAMETERS';
        289 ->
            'REMOTE_PROC_NODE_GET_MEMORY_PARAMETERS';
        290 ->
            'REMOTE_PROC_DOMAIN_BLOCK_COMMIT';
        291 ->
            'REMOTE_PROC_NETWORK_UPDATE';
        292 ->
            'REMOTE_PROC_DOMAIN_EVENT_PMSUSPEND_DISK';
        293 ->
            'REMOTE_PROC_NODE_GET_CPU_MAP';
        294 ->
            'REMOTE_PROC_DOMAIN_FSTRIM';
        295 ->
            'REMOTE_PROC_DOMAIN_SEND_PROCESS_SIGNAL';
        296 ->
            'REMOTE_PROC_DOMAIN_OPEN_CHANNEL';
        297 ->
            'REMOTE_PROC_NODE_DEVICE_LOOKUP_SCSI_HOST_BY_WWN';
        298 ->
            'REMOTE_PROC_DOMAIN_GET_JOB_STATS';
        299 ->
            'REMOTE_PROC_DOMAIN_MIGRATE_GET_COMPRESSION_CACHE';
        300 ->
            'REMOTE_PROC_DOMAIN_MIGRATE_SET_COMPRESSION_CACHE';
        301 ->
            'REMOTE_PROC_NODE_DEVICE_DETACH_FLAGS';
        302 ->
            'REMOTE_PROC_DOMAIN_MIGRATE_BEGIN3_PARAMS';
        303 ->
            'REMOTE_PROC_DOMAIN_MIGRATE_PREPARE3_PARAMS';
        304 ->
            'REMOTE_PROC_DOMAIN_MIGRATE_PREPARE_TUNNEL3_PARAMS';
        305 ->
            'REMOTE_PROC_DOMAIN_MIGRATE_PERFORM3_PARAMS';
        306 ->
            'REMOTE_PROC_DOMAIN_MIGRATE_FINISH3_PARAMS';
        307 ->
            'REMOTE_PROC_DOMAIN_MIGRATE_CONFIRM3_PARAMS';
        308 ->
            'REMOTE_PROC_DOMAIN_SET_MEMORY_STATS_PERIOD';
        309 ->
            'REMOTE_PROC_DOMAIN_CREATE_XML_WITH_FILES';
        310 ->
            'REMOTE_PROC_DOMAIN_CREATE_WITH_FILES';
        311 ->
            'REMOTE_PROC_DOMAIN_EVENT_DEVICE_REMOVED';
        312 ->
            'REMOTE_PROC_CONNECT_GET_CPU_MODEL_NAMES';
        313 ->
            'REMOTE_PROC_CONNECT_NETWORK_EVENT_REGISTER_ANY';
        314 ->
            'REMOTE_PROC_CONNECT_NETWORK_EVENT_DEREGISTER_ANY';
        315 ->
            'REMOTE_PROC_NETWORK_EVENT_LIFECYCLE';
        316 ->
            'REMOTE_PROC_CONNECT_DOMAIN_EVENT_CALLBACK_REGISTER_ANY';
        317 ->
            'REMOTE_PROC_CONNECT_DOMAIN_EVENT_CALLBACK_DEREGISTER_ANY';
        318 ->
            'REMOTE_PROC_DOMAIN_EVENT_CALLBACK_LIFECYCLE';
        319 ->
            'REMOTE_PROC_DOMAIN_EVENT_CALLBACK_REBOOT';
        320 ->
            'REMOTE_PROC_DOMAIN_EVENT_CALLBACK_RTC_CHANGE';
        321 ->
            'REMOTE_PROC_DOMAIN_EVENT_CALLBACK_WATCHDOG';
        322 ->
            'REMOTE_PROC_DOMAIN_EVENT_CALLBACK_IO_ERROR';
        323 ->
            'REMOTE_PROC_DOMAIN_EVENT_CALLBACK_GRAPHICS';
        324 ->
            'REMOTE_PROC_DOMAIN_EVENT_CALLBACK_IO_ERROR_REASON';
        325 ->
            'REMOTE_PROC_DOMAIN_EVENT_CALLBACK_CONTROL_ERROR';
        326 ->
            'REMOTE_PROC_DOMAIN_EVENT_CALLBACK_BLOCK_JOB';
        327 ->
            'REMOTE_PROC_DOMAIN_EVENT_CALLBACK_DISK_CHANGE';
        328 ->
            'REMOTE_PROC_DOMAIN_EVENT_CALLBACK_TRAY_CHANGE';
        329 ->
            'REMOTE_PROC_DOMAIN_EVENT_CALLBACK_PMWAKEUP';
        330 ->
            'REMOTE_PROC_DOMAIN_EVENT_CALLBACK_PMSUSPEND';
        331 ->
            'REMOTE_PROC_DOMAIN_EVENT_CALLBACK_BALLOON_CHANGE';
        332 ->
            'REMOTE_PROC_DOMAIN_EVENT_CALLBACK_PMSUSPEND_DISK';
        333 ->
            'REMOTE_PROC_DOMAIN_EVENT_CALLBACK_DEVICE_REMOVED';
        334 ->
            'REMOTE_PROC_DOMAIN_CORE_DUMP_WITH_FORMAT';
        335 ->
            'REMOTE_PROC_DOMAIN_FSFREEZE';
        336 ->
            'REMOTE_PROC_DOMAIN_FSTHAW';
        337 ->
            'REMOTE_PROC_DOMAIN_GET_TIME';
        338 ->
            'REMOTE_PROC_DOMAIN_SET_TIME';
        339 ->
            'REMOTE_PROC_DOMAIN_EVENT_BLOCK_JOB_2';
        340 ->
            'REMOTE_PROC_NODE_GET_FREE_PAGES';
        341 ->
            'REMOTE_PROC_NETWORK_GET_DHCP_LEASES';
        342 ->
            'REMOTE_PROC_CONNECT_GET_DOMAIN_CAPABILITIES';
        343 ->
            'REMOTE_PROC_DOMAIN_OPEN_GRAPHICS_FD';
        344 ->
            'REMOTE_PROC_CONNECT_GET_ALL_DOMAIN_STATS';
        345 ->
            'REMOTE_PROC_DOMAIN_BLOCK_COPY';
        346 ->
            'REMOTE_PROC_DOMAIN_EVENT_CALLBACK_TUNABLE';
        347 ->
            'REMOTE_PROC_NODE_ALLOC_PAGES';
        348 ->
            'REMOTE_PROC_DOMAIN_EVENT_CALLBACK_AGENT_LIFECYCLE';
        349 ->
            'REMOTE_PROC_DOMAIN_GET_FSINFO';
        350 ->
            'REMOTE_PROC_DOMAIN_DEFINE_XML_FLAGS';
        351 ->
            'REMOTE_PROC_DOMAIN_GET_IOTHREAD_INFO';
        352 ->
            'REMOTE_PROC_DOMAIN_PIN_IOTHREAD';
        353 ->
            'REMOTE_PROC_DOMAIN_INTERFACE_ADDRESSES';
        354 ->
            'REMOTE_PROC_DOMAIN_EVENT_CALLBACK_DEVICE_ADDED';
        355 ->
            'REMOTE_PROC_DOMAIN_ADD_IOTHREAD';
        356 ->
            'REMOTE_PROC_DOMAIN_DEL_IOTHREAD';
        357 ->
            'REMOTE_PROC_DOMAIN_SET_USER_PASSWORD';
        358 ->
            'REMOTE_PROC_DOMAIN_RENAME';
        359 ->
            'REMOTE_PROC_DOMAIN_EVENT_CALLBACK_MIGRATION_ITERATION';
        360 ->
            'REMOTE_PROC_CONNECT_REGISTER_CLOSE_CALLBACK';
        361 ->
            'REMOTE_PROC_CONNECT_UNREGISTER_CLOSE_CALLBACK';
        362 ->
            'REMOTE_PROC_CONNECT_EVENT_CONNECTION_CLOSED';
        363 ->
            'REMOTE_PROC_DOMAIN_EVENT_CALLBACK_JOB_COMPLETED';
        364 ->
            'REMOTE_PROC_DOMAIN_MIGRATE_START_POST_COPY';
        365 ->
            'REMOTE_PROC_DOMAIN_GET_PERF_EVENTS';
        366 ->
            'REMOTE_PROC_DOMAIN_SET_PERF_EVENTS';
        367 ->
            'REMOTE_PROC_DOMAIN_EVENT_CALLBACK_DEVICE_REMOVAL_FAILED';
        368 ->
            'REMOTE_PROC_CONNECT_STORAGE_POOL_EVENT_REGISTER_ANY';
        369 ->
            'REMOTE_PROC_CONNECT_STORAGE_POOL_EVENT_DEREGISTER_ANY';
        370 ->
            'REMOTE_PROC_STORAGE_POOL_EVENT_LIFECYCLE';
        371 ->
            'REMOTE_PROC_DOMAIN_GET_GUEST_VCPUS';
        372 ->
            'REMOTE_PROC_DOMAIN_SET_GUEST_VCPUS';
        373 ->
            'REMOTE_PROC_STORAGE_POOL_EVENT_REFRESH';
        374 ->
            'REMOTE_PROC_CONNECT_NODE_DEVICE_EVENT_REGISTER_ANY';
        375 ->
            'REMOTE_PROC_CONNECT_NODE_DEVICE_EVENT_DEREGISTER_ANY';
        376 ->
            'REMOTE_PROC_NODE_DEVICE_EVENT_LIFECYCLE';
        377 ->
            'REMOTE_PROC_NODE_DEVICE_EVENT_UPDATE';
        378 ->
            'REMOTE_PROC_STORAGE_VOL_GET_INFO_FLAGS';
        379 ->
            'REMOTE_PROC_DOMAIN_EVENT_CALLBACK_METADATA_CHANGE';
        380 ->
            'REMOTE_PROC_CONNECT_SECRET_EVENT_REGISTER_ANY';
        381 ->
            'REMOTE_PROC_CONNECT_SECRET_EVENT_DEREGISTER_ANY';
        382 ->
            'REMOTE_PROC_SECRET_EVENT_LIFECYCLE';
        383 ->
            'REMOTE_PROC_SECRET_EVENT_VALUE_CHANGED';
        384 ->
            'REMOTE_PROC_DOMAIN_SET_VCPU';
        385 ->
            'REMOTE_PROC_DOMAIN_EVENT_BLOCK_THRESHOLD';
        386 ->
            'REMOTE_PROC_DOMAIN_SET_BLOCK_THRESHOLD';
        387 ->
            'REMOTE_PROC_DOMAIN_MIGRATE_GET_MAX_DOWNTIME';
        388 ->
            'REMOTE_PROC_DOMAIN_MANAGED_SAVE_GET_XML_DESC';
        389 ->
            'REMOTE_PROC_DOMAIN_MANAGED_SAVE_DEFINE_XML';
        390 ->
            'REMOTE_PROC_DOMAIN_SET_LIFECYCLE_ACTION';
        391 ->
            'REMOTE_PROC_STORAGE_POOL_LOOKUP_BY_TARGET_PATH';
        392 ->
            'REMOTE_PROC_DOMAIN_DETACH_DEVICE_ALIAS';
        393 ->
            'REMOTE_PROC_CONNECT_COMPARE_HYPERVISOR_CPU';
        394 ->
            'REMOTE_PROC_CONNECT_BASELINE_HYPERVISOR_CPU';
        395 ->
            'REMOTE_PROC_NODE_GET_SEV_INFO';
        396 ->
            'REMOTE_PROC_DOMAIN_GET_LAUNCH_SECURITY_INFO';
        397 ->
            'REMOTE_PROC_NWFILTER_BINDING_LOOKUP_BY_PORT_DEV';
        398 ->
            'REMOTE_PROC_NWFILTER_BINDING_GET_XML_DESC';
        399 ->
            'REMOTE_PROC_NWFILTER_BINDING_CREATE_XML';
        400 ->
            'REMOTE_PROC_NWFILTER_BINDING_DELETE';
        401 ->
            'REMOTE_PROC_CONNECT_LIST_ALL_NWFILTER_BINDINGS';
        402 ->
            'REMOTE_PROC_DOMAIN_SET_IOTHREAD_PARAMS';
        403 ->
            'REMOTE_PROC_CONNECT_GET_STORAGE_POOL_CAPABILITIES';
        404 ->
            'REMOTE_PROC_NETWORK_LIST_ALL_PORTS';
        405 ->
            'REMOTE_PROC_NETWORK_PORT_LOOKUP_BY_UUID';
        406 ->
            'REMOTE_PROC_NETWORK_PORT_CREATE_XML';
        407 ->
            'REMOTE_PROC_NETWORK_PORT_GET_PARAMETERS';
        408 ->
            'REMOTE_PROC_NETWORK_PORT_SET_PARAMETERS';
        409 ->
            'REMOTE_PROC_NETWORK_PORT_GET_XML_DESC';
        410 ->
            'REMOTE_PROC_NETWORK_PORT_DELETE';
        411 ->
            'REMOTE_PROC_DOMAIN_CHECKPOINT_CREATE_XML';
        412 ->
            'REMOTE_PROC_DOMAIN_CHECKPOINT_GET_XML_DESC';
        413 ->
            'REMOTE_PROC_DOMAIN_LIST_ALL_CHECKPOINTS';
        414 ->
            'REMOTE_PROC_DOMAIN_CHECKPOINT_LIST_ALL_CHILDREN';
        415 ->
            'REMOTE_PROC_DOMAIN_CHECKPOINT_LOOKUP_BY_NAME';
        416 ->
            'REMOTE_PROC_DOMAIN_CHECKPOINT_GET_PARENT';
        417 ->
            'REMOTE_PROC_DOMAIN_CHECKPOINT_DELETE';
        418 ->
            'REMOTE_PROC_DOMAIN_GET_GUEST_INFO';
        419 ->
            'REMOTE_PROC_CONNECT_SET_IDENTITY';
        420 ->
            'REMOTE_PROC_DOMAIN_AGENT_SET_RESPONSE_TIMEOUT';
        421 ->
            'REMOTE_PROC_DOMAIN_BACKUP_BEGIN';
        422 ->
            'REMOTE_PROC_DOMAIN_BACKUP_GET_XML_DESC'
    end.

map_elem(Fun, Bin, Off, infinity, N) ->
  map_elem0(Fun, Bin, Off, N, []);
map_elem(Fun, Bin, Off, Max, N) when N =< Max ->
  map_elem0(Fun, Bin, Off, N, []).

map_elem0(Fun, Bin, Off, 0, L) ->
  {lists:reverse(L,[]), Off};
map_elem0(Fun, Bin, Off, N, L) ->
  {E,Off1} = Fun(Bin, Off),
map_elem0(Fun, Bin, Off1, N-1, [E|L]).

io_list_len(L) -> io_list_len(L, 0).
io_list_len([H|T], N) ->
  if
    H >= 0, H =< 255 -> io_list_len(T, N+1);
    is_list(H) -> io_list_len(T, io_list_len(H,N));
    is_binary(H) -> io_list_len(T, size(H) + N);
    true -> exit({xdr, opaque})
  end;
io_list_len(H, N) when is_binary(H) ->
  size(H) + N;
io_list_len([], N) ->
N.

enc_align(Len) ->
  case Len rem 4 of
    0 -> <<>>;
    1 -> <<0,0,0>>;
    2 -> <<0,0>>;
    3 -> <<0>>
  end.

align(Len) ->
  case Len rem 4 of
    0 -> Len;
    1 -> Len+3;
    2 -> Len+2;
    3 -> Len+1
  end.
